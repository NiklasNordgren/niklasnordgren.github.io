{"version":3,"sources":["./styles.scss","./dark_theme.scss","./node_modules/@angular/material/_theming.scss","./light_theme.scss"],"names":[],"mappings":";;;;AAAA;AAEA;EACE;EACA;EACA;EACA;AAAF;AAGA;;EAEE;AAAF;AAGA;EACE;EACA;AAAF;AAGA;EACE;AAAF;AAGA;EACE;EACA;AAAF;AAGA;EACE;AAAF;AAGA;EACE;EACA;EACA;AAAF;AAGA;EACE;EACA;EACA;AAAF;AAGA;EACE;AAAF;AAGA;EACE;AAAF;AAGA;EACE;EACA;EACA;EACA;AAAF;AAGA;EACE;AAAF;AAGA;EACE;AAAF;AAGA;EACE;AAAF;AAGA;EACE;AAAF;AAGA;EACE;AAAF;AAGA;EACE;AAAF;AAGA;EACE;AAAF;AAGA;EACE;AAAF;AAGA;;;;EAIE;AAAF;AAGA;EACE;EACA;UAAA;EACA;AAAF;AAGA;EACE;EACA;UAAA;EACA;AAAF;AAGA;EACE;EACA;UAAA;EACA;AAAF;AAGA;EACE;AAAF,C;;ACrHA;;;;CAAA;ACu0DA;AA+IA;AAobA;AAmwDA;AA6CA;AAx+CE;EACE,gBAvLoB;EAwLpB,eAzLkB;AD5gFtB;ACysFE;EAEE;ADvsFJ;AC0sFE;EACE;ADvsFJ;ACq3EE;EA/VE;EAYF;EAqVE;ADj3EJ;ACo3EE;EApWE;EAYF;EA0VE;ADh3EJ;ACm3EE;EAzWE;EAYF;EA+VE;AD/2EJ;ACk3EE;EA9WE;EAYF;EAoWE;AD92EJ;ACo3EE;EAtXE;EA+XA;ADx3EJ;AC23EE;EAlYE;EA2YA;AD/3EJ;ACk4EE;EA9YE;EAYF;AD3/DF;ACi4EE;EAlZE;EAYF;ADt/DF;AC+3EI;EACE;AD73EN;ACi4EE;EA1ZE;EAYF;AD9+DF;ACg4EE;EA9ZE;EAYF;EAoZE;AD53EJ;AC+3EE;EAnaE;EAYF;EAyZE;AD33EJ;AC83EE;EAxaE;EAYF;EA8ZE;AD13EJ;AC63EE;EA7aE;EAYF;EAmaE;ADz3EJ;ACuqFE;EA7tBE;EAYF;ADj9DF;ACg2FE;;EAGI;EACA;EACA;AD91FN;ACmiGE;EAEI;EACA;ADjiGN;ACqiGE;EACE;ADliGJ;ACqiGE;;EAEE;ADliGJ;ACmqGE;EACE;ADhqGJ;ACmxGE;EACE;EACA;ADhxGJ;ACkxGI;;EAEE,eA3FsB;ADrrG5B;AC23GE;EACE;EACA;ADx3GJ;AC23GE;EACE;ADx3GJ;AC2kHE;EACE,eAjL0B;ADv5G9B;AC2kHE;;EAGI;EACA;ADzkHN;AC6kHE;EAEI,eA7LiC;EA8LjC;AD3kHN;AC6pHE;EAlxDE;EAYF;ADl5DF;ACoxHE;EAEI;EACA;EACA;ADlxHN;ACsxHE;EAt5DE;EAYF;ADv4DF;ACu8ME;EArlJE,kBAeU;EAdV,gBAeY;EAdZ,kBAeY;EAdZ,mBAeY;EAGd;AD/3DF;ACm8ME;EACE,yBAPuB;ADz7M3B;ACs8MI;;EACE,eAvB2B;EAwB3B,kBAtCU;AD55MhB;ACs8MI;;EACE;EACA;ADn8MN;ACq8MM;;EACE;EACA,kBAhDQ;ADl5MhB;ACu8ME;EACE;EAEA;ADr8MJ;ACy8MI;;EAtEF;EAEA;AD/3MF;AC28MI;EA9EF;EAEA;AD33MF;AC88ME;EACE;EACA,sBAnEiB;ADx4MrB;AC88ME;EACE;AD38MJ;AC88ME;EAGE,iBAhEuB;AD74M3B;ACg9ME;EACE,cA/EoB;EAgFpB,0BAzEqB;EA6ErB;ADh9MJ;ACk8LI;EACE,sBAJqB;AD37L3B;ACk8LI;EACE;ADh8LN;ACo8LM;;EA1DJ;EAIA;EAGA;AD34LF;ACq8LM;EAjEJ;EAIA;EAGA;ADt4LF;ACw8LM;EAzEJ;EAIA;EAGA;ADj4LF;AC08LI;EACE;ADx8LN;AC28LI;EAGE,cAzCqB;ADl6L3B;AC88LI;EACE,0BAjDmB;EAqDnB;AD/8LN;ACq9LE;EAGM;;IAxFN;ED13LA;ECy9LM;IA/FN;EDv3LA;EC89LM;IAvGN;EDp3LA;AACF;ACkwLI;EACE;ADhwLN;ACmwLI;EACE;EACA,kBAT2B;ADxvLjC;ACqwLM;;EAjCJ;EAEA;ADjuLF;ACywLM;EA1CJ;EAEA;AD7tLF;ACilMI;EACE;AD9kMN;ACilMI;EACE;EACA,mBAT8B;ADtkMpC;ACmlMM;;EAxCJ;EAEA;ADxiMF;ACulMM;EAjDJ;EAEA;ADpiMF;AC0uHE;;EAGE;ADxuHJ;ACurHE;;EARA;EACA;EACA;EAQE;EACA;ADlrHJ;ACqrHI;;EACE,eAyCqB;AD3tH3B;AC86HE;EACE;AD36HJ;ACsmIE;EAEI;EACA;EACA;ADpmIN;ACurIE;;EAGI;EACA;ADrrIN;AC4/IE;EACE;ADz/IJ;ACk4JE;EAGI;EACA;ADj4JN;ACwiKE;EAEI;EACA;ADtiKN;AC0iKE;EACE;ADviKJ;AC0iKE;EACE;ADviKJ;AC0iKE;EAEI;EACA;ADxiKN;ACoyKE;EAEI;EACA;EACA;ADlyKN;AC+5KE;;;;;;;EAnvHE;EAYF;EA+uHE;AD35KJ;AC89KE;EAEE,eArBoB;EAsBpB,gBArB2B;EAsB3B,mBAtB2B;ADt8K/B;AC+9KE;EACE,eAvB4B;EAwB5B,gBAtBA;EAuBA,mBAvBA;ADr8KJ;ACy7HI;EACE;ADt7HN;AC8lHE;EARA;EACA;EACA;EAQE;EACA;AD1lHJ;AC6lHI;EACE,eAkVuB;AD76H7B;ACg7HI;EACE;AD96HN;ACilHE;EARA;EACA;EACA;EAQE;EACA;AD7kHJ;ACglHI;EACE,eAuVuB;ADr6H7B;ACw6HI;EACE;EACA;EACA;ADt6HN;AC46HI;EACE;ADz6HN;AC8jHE;EARA;EACA;EACA;EAQE;EACA;AD1jHJ;AC6jHI;EACE,eAqWuB;ADh6H7B;ACm6HI;EACE;ADj6HN;ACijHE;EARA;EACA;EACA;EAQE;EACA;AD7iHJ;ACgjHI;EACE,eA0WuB;ADx5H7B;AC25HI;EAEE;EACA;AD15HN;ACmpDE;EAGI;ADlpDN;AC+rDE;EA9GE;EAYF;ADxlDF;ACw8KE;EAEI;EACA;ADt8KN;AC08KE;EACE;EAEE;EACA;EACA;ADx8KN;ACgyME;;EAEE;EACA;AD7xMJ;ACgzCE;EACE;EAIA;ADhzCJ;ACuzCI;EACE;ADrzCN;ACyzCE;EACE;ADtzCJ;ACyzCE;EACE;EACA;EACA;EAEA;EACA;ADvzCJ;ACpVI;EA+oDE;ADxzCN;ACtXE;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAIA;EAGA;EAGA;EACA;ADkXJ;ACrgBE;EAEE;EAGA;EACA;EACA;EACA;ADqgBJ;ACjgBE;EACE;EACA,aA3B4B;AD+hBhC;AClgBI;EAGE;ADkgBN;AC1fE;EACE;EACA;EACA,aA1CkB;ADuiBtB;ACzfE;EAGE;EACA;EACA;EACA,aApDkB;EAwDlB;EACA;EACA;ADufJ;ACpfE;EAEE;EACA;EACA;EACA;EACA;EAEA,aApE2B;EAqE3B;EACA;EACA;EACA;ADqfJ;ACnfI;EACE;ADqfN;AChfM;EAGE;ADgfR;AC3eE;EACE,+BAtFmC;ADokBvC;ACteI;EACE;ADyeN;ACneE;EACE;EACA,aA3GkB;EAgHlB;EAIA;EAGA;EACA;AD6dJ;ACzdE;EACE;EAKA;EAKA;ADodJ;ACrXE;EAA0C;ADyX5C;ACxXE;EAAwC;AD2X1C;ACzXE;EAEE;AD0XJ;ACvXE;EAEE;ADyXJ;ACpXE;EACE;ADuXJ;ACjXE;EAqBA;EACA;EApBE;EACA;ADqXJ;AC5WE;EASA;EACA;EARE;ADgXJ;ACw2CE;EACE;ADr2CJ;AC6yME;EACE;AD1yMJ;AA1fA;EACE;EACA;EACA;EACA;EACA;EACA;AA6fF;AA/eA;EACE;EACA;EACA;EACA;EACA;EACA;AAkfF;AApeA;EACE;EACA;EACA;EACA;EACA;EACA;AAueF;ACwqCE;EAII;ADxqCN;AC45CE;EACE;AD15CJ;AC45CI;EAEE;AD35CN;AC+5CI;EACE;AD75CN;ACg6CI;EACE;EACA;AD95CN;ACi6CI;EACE;AD/5CN;ACm6CE;EACE;ADj6CJ;ACo6CE;EACE;ADl6CJ;ACq6CE;EACE;ADn6CJ;AC88CE;EACE;AD58CJ;AC+8CE;EACE;AD78CJ;AC+/CE;EACE;AD7/CJ;AC+/CI;EACE;AD7/CN;ACigDE;EACE,cAZe;ADn/CnB;ACkgDE;;EAEE;ADhgDJ;ACwgDE;;;;EAIE;ADtgDJ;ACygDE;;EAEE;ADvgDJ;AC4gDI;;EACE,mBAxCa;ADj+CnB;AC2pME;EAIE;EACA;AD5pMJ;ACmqMI;EAx4MF;ADwOF;ACgqMI;EAx4MF;AD2OF;AC6pMI;EAx4MF;AD8OF;AC0pMI;EAx4MF;ADiPF;ACupMI;EAx4MF;ADoPF;ACopMI;EAx4MF;ADuPF;ACipMI;EAx4MF;AD0PF;AC8oMI;EAx4MF;AD6PF;AC2oMI;EAx4MF;ADgQF;ACwoMI;EAx4MF;ADmQF;ACqoMI;EAx4MF;ADsQF;ACkoMI;EAx4MF;ADyQF;AC+nMI;EAx4MF;AD4QF;AC4nMI;EAx4MF;AD+QF;ACynMI;EAx4MF;ADkRF;ACsnMI;EAx4MF;ADqRF;ACmnMI;EAx4MF;ADwRF;ACgnMI;EAx4MF;AD2RF;AC6mMI;EAx4MF;AD8RF;AC0mMI;EAx4MF;ADiSF;ACumMI;EAx4MF;ADoSF;AComMI;EAx4MF;ADuSF;ACimMI;EAx4MF;AD0SF;AC8lMI;EAx4MF;AD6SF;AC2lMI;EAx4MF;ADgTF;AC+lMI;EACE;AD7lMN;ACmrDE;EAEE;EACA;ADjrDJ;AC7SE;EAXA;AD2TF;ACqrDI;EACE;ADnrDN;ACqrDM;EACE;ADnrDR;ACizDE;EACE;EACA;AD/yDJ;ACppBI;EAs8EE;EACA;AD/yDN;ACozDI;EACE;EACA;ADjzDN;ACszDI;EACE;EACA;ADpzDN;ACwzDE;EACE;ADtzDJ;AC0zDI;EACE;ADxzDN;AC6zDI;EAWI;EAMF;AD10DN;AC80DE;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AD50DJ;AC+0DE;;EAEE;AD70DJ;ACk1DE;EAEE;ADj1DJ;ACkrDE;EACE,WANmB;EAOnB,YAPmB;EAQnB,iBARmB;ADxqDvB;ACorDI;EACE;ADlrDN;ACurDI;EACE;ADrrDN;AC0rDI;EACE;ADxrDN;AC6rDI;EACE;EACA;AD3rDN;ACgsDI;EACE;AD9rDN;ACmsDI;EACE;EACA;ADjsDN;ACusDM;EACE;ADrsDR;AC0sDM;EACE;EACA;ADxsDR;AC6sDM;EACE;AD3sDR;ACgtDM;EACE;EACA;AD9sDR;AC2oDE;EACE,WAPqB;EAQrB,YARqB;EASrB,iBATqB;ADhoDzB;AC6oDI;EACE;AD3oDN;ACgpDI;EACE;AD9oDN;ACmpDI;EACE;ADjpDN;ACspDI;EACE;EACA;ADppDN;ACypDI;EACE;ADvpDN;AC4pDI;EACE;EACA;AD1pDN;ACgqDM;EACE;AD9pDR;ACmqDM;EACE;EACA;ADjqDR;ACsqDM;EACE;ADpqDR;ACyqDM;EACE;EACA;ADvqDR;AComDE;EACE,WALmB;EAMnB,YANmB;EAOnB,iBAPmB;AD3lDvB;ACsmDI;EACE;ADpmDN;ACymDI;EACE;ADvmDN;AC4mDI;EACE;AD1mDN;AC+mDI;EACE;EACA;AD7mDN;ACknDI;EACE;ADhnDN;ACqnDI;EACE;EACA;ADnnDN;ACynDM;EACE;ADvnDR;AC4nDM;EACE;EACA;AD1nDR;AC+nDM;EACE;AD7nDR;ACkoDM;EACE;EACA;ADhoDR;AC2xDE;EA/vEA;EAiwEE;EACA;ADzxDJ;ACs5DE;EAKE;EACA;ADx5DJ;ACw3DE;EACE;ADt3DJ;ACw3DE;EACE;ADt3DJ;ACw3DE;EACE;ADt3DJ;AC03DI;EAEE;ADz3DN;ACszDE;EACE;ADpzDJ;ACuzDE;EACE;ADrzDJ;ACwzDE;EACE;ADtzDJ;ACyzDE;EACE;ADvzDJ;ACw4DI;EACE,YAxGuB;EAyGvB;ADt4DN;AC04DE;EACE;ADx4DJ;AC64DE;EACE;AD34DJ;AC84DE;EAEE;EACA;AD74DJ;ACk1DE;EACE;ADh1DJ;ACk1DE;EACE;ADh1DJ;ACk1DE;EACE;ADh1DJ;ACo1DI;EAEE;ADn1DN;ACs0DE;EACE;ADp0DJ;ACs0DE;EACE;ADp0DJ;ACs0DE;EACE;ADp0DJ;ACw0DI;EAEE;ADv0DN;ACqyDE;EAXA,oCADmB;ADtxDrB;ACsyDE;EAfA,oCADmB;ADnxDrB;ACuyDE;EAnBA,0CADmB;ADhxDrB;ACziBE;EAXA;ADujBF;AC5iBE;EAXA;AD0jBF;AC/iBE;EAXA;AD6jBF;ACljBE;EAXA;ADgkBF;ACrjBE;EAXA;ADmkBF;ACxjBE;EAXA;ADskBF;AC3jBE;EAXA;ADykBF;ACw7DE;;EAjgFA;AD6kBF;ACy7DE;;EAEE;ADv7DJ;AC07DE;EACE;ADx7DJ;AC07DI;EACE;ADx7DN;AC47DE;EACE;EACA;AD17DJ;AC47DI;EACE;AD17DN;AC87DE;EACE;AD57DJ;AC+7DE;EACE;EACA;AD77DJ;ACi8DI;EACE;EACA;EACA;AD/7DN;ACm8DE;EACE;EACA;ADj8DJ;ACm8DI;EACE;ADj8DN;ACq8DE;EACE;EACA;ADn8DJ;ACq8DI;EACE;ADn8DN;ACs8DI;EACE;ADp8DN;ACw8DE;;EAEE;ADt8DJ;ACu9DI;EACE,iBALc;ADh9DpB;ACw/DE;EAEE;EACA;ADt/DJ;AC5nBE;EAXA;AD0oBF;AC/nBE;EAXA;AD6oBF;ACw/DE;EACE;ADt/DJ;AC8jEE;EACE;AD5jEJ;AC+jEE;EACE,aAdoB;AD/iExB;ACgkEE;EAGE;ADhkEJ;ACmkEE;EACE,yBAxBoB;ADziExB;ACqkEI;EACE;ADnkEN;ACskEI;EACE;ADpkEN;ACukEI;EACE;ADrkEN;AC4kEM;EACE,yBAtCW;ADpiEnB;AC+kEM;EACE,qBA5CW;ADjiEnB;ACilEI;EACE;AD/kEN;ACqlEE;EACE;ADnlEJ;ACwlEI;;EACE;ADrlEN;ACwlEI;;EACE;ADrlEN;ACwlEI;;EACE;ADrlEN;AC8qEE;EA3CA,yBAwCwB;EAvCxB,YAwCwB;ADxqE1B;ACkoEE;EACE,YAqCsB;EApCtB;ADhoEJ;AC0qEM;EA/2FJ;ADwsBF;AC2qEM;EACE;ADzqER;AC6qEI;EACE;AD3qEN;AC8qEI;EACE;AD5qEN;ACirEI;EAlEF,yBAwBwE;EAvBxE,0BAuBiC;ADnoEnC;AC8mEE;EACE,0BAoB+B;EAnB/B;AD5mEJ;ACioEE;EATA,oCADmB;ADpnErB;AC0qEI;EAtEF,yBAwBwE;EAvBxE,YAuBiC;ADxnEnC;ACmmEE;EACE,YAoB+B;EAnB/B;ADjmEJ;ACsnEE;EATA,0CADmB;ADzmErB;ACmqEI;EA1EF,yBAwBwE;EAvBxE,0BAuBiC;AD7mEnC;ACwlEE;EACE,0BAoB+B;EAnB/B;ADtlEJ;AC2mEE;EATA,oCADmB;AD9lErB;ACkvEE;EACE;ADhvEJ;ACmvEE;;;;EAIE;ADjvEJ;ACovEE;;EAEE;ADlvEJ;ACqvEE;EACE;ADnvEJ;ACsvEE;EACE;ADpvEJ;AC61EE;EACE;AD31EJ;ACg2EE;;;EAGE;AD91EJ;ACi2EE;EACE;AD/1EJ;ACk2EE;EACE;ADh2EJ;ACm2EE;EACE;ADj2EJ;ACo2EE;;EAEE;EACA;ADl2EJ;AC4zEE;EA2CI,+BAlCa;ADl0EnB;ACw2EE;EACE,+BAvCe;AD/zEnB;ACy2EE;EAOI;AD72EN;ACmzEE;EAqEI;ADr3EN;ACgzEE;EA8EM;AD33ER;AC48EE;EACE,oCAtMA;ADpwEJ;AC68EE;;EAEE,kCAViB;ADj8ErB;AC88EE;;EAEE;AD58EJ;AC+8EE;;EAEE;AD78EJ;ACg9EE;;EAEE,mBAxBc;ADt7ElB;ACi9EE;;EAEE,mBA5BuB;ADn7E3B;ACkvEE;EACE;EACA;ADhvEJ;ACmvEE;EAII;ADpvEN;AC6vEE;EACE;AD3vEJ;AC4wEE;;;EARM;AD/vER;ACm2EE;EAnrGA;EAqrGE;EACA;ADj2EJ;ACi6EE;EACE,kCAtMA;ADztEJ;ACk6EE;;EAEE,kCAViB;ADt5ErB;ACm6EE;;EAEE;ADj6EJ;ACo6EE;;EAEE;ADl6EJ;ACq6EE;;EAEE,mBAxBc;AD34ElB;ACs6EE;;EAEE,mBA5BuB;ADx4E3B;ACusEE;EACE;EACA;ADrsEJ;ACwsEE;EAII;ADzsEN;ACktEE;EACE;ADhtEJ;ACiuEE;;;EARM;ADptER;AC23EE;EACE,iCAtMA;ADnrEJ;AC43EE;;EAEE,kCAViB;ADh3ErB;AC63EE;;EAEE;AD33EJ;AC83EE;;EAEE;AD53EJ;AC+3EE;;EAEE,mBAxBc;ADr2ElB;ACg4EE;;EAEE,mBA5BuB;ADl2E3B;ACiqEE;EACE;EACA;AD/pEJ;ACkqEE;EAII;ADnqEN;AC4qEE;EACE;AD1qEJ;AC2rEE;;;EARM;AD9qER;ACgyEE;EAjsGA;ADo6BF;ACiyEE;EACE;AD/xEJ;ACiyEI;EACE;AD/xEN;ACkyEI;EACE;ADhyEN;ACoyEE;EACE;ADlyEJ;ACo4EE;EApzGA;EAszGE;EACA;ADl4EJ;ACsgEE;EACE;ADpgEJ;ACugEE;EACE;ADrgEJ;ACk9EE;EAEE;EACA;ADj9EJ;ACp7BE;EAXA;ADk8BF;ACi9EE;EACE;AD/8EJ;AC27EM;EAwBF;ADh9EJ;ACq9EE;EACE;IAEE;EDp9EJ;AACF;ACu9EE;EACE;ADr9EJ;ACw9EE;;EAEE;ADt9EJ;ACy9EE;EACE;ADv9EJ;ACy9EI;;EAEE;ADv9EN;ACm/EI;EACE,YALe;AD5+ErB;ACm/EM;EACE,YAVY;ADv+EpB;ACshKE;EACE,+BAXY;ADxgKhB;ACshKE;EACE,+BAfY;ADrgKhB;ACuhKE;EACE,cAlBoB;ADngKxB;ACuhKI;EACE,cAhBqB;ADrgK3B;ACwhKI;EACE,cAnBmB;ADngKzB;AC0hKE;EACE,cA7BqB;AD3/JzB;AC2hKE;EACE,uBA9BqB;AD3/JzB;AC6hKI;EACE,yBAhCsB;AD3/J5B;AC6hKM;EACE,yBArCmB;ADt/J3B;AC8hKM;EACE,yBAxCiB;ADp/JzB;ACkiKI;EACE,cA9CsB;ADl/J5B;ACmiKI;EACE,cApDqB;AD7+J3B;ACoiKI;EACE,cAvDmB;AD3+JzB;AC0iKI;EACE,cAhEmB;ADx+JzB;AC0iKM;;EAEE,cApEiB;ADp+JzB;AC4iKI;;EAEE,yBA1EmB;ADh+JzB;AC8iKE;EACE,cA/EqB;AD79JzB;AC0kJI;EACE,+BALU;ADnkJhB;AC2kJI;EACE,+BATU;ADhkJhB;AC4kJI;EACE,0CAZc;AD9jJpB;AC6kJI;EAj/DF;EACA;EACA;ADzlFF;AC25JI;EACE,0CAJc;ADr5JpB;AC45JI;EAx0EF;EACA;EACA;ADjlFF;AC07II;EACE,0CAPc;ADj7IpB;AC27II;EACE,2CAVuB;AD/6I7B;AC47II;EACE,0CAbc;AD76IpB;AC87IM;EACE,+BAjBiB;AD36IzB;AC+7IM;EACE;AD77IR;ACkvJI;EACE,+BATY;ADvuJlB;ACmvJI;EACE,YAZkB;ADruJxB;ACqvJM;EACE,cAhBkB;ADnuJ1B;ACsvJM;EACE,cAnBiB;ADjuJzB;ACuvJM;EACE,cAtBe;AD/tJvB;AC2vJM;EACE,cA7Be;AD5tJvB;AC8vJM;EACE,+BAxCiB;ADptJzB;AC+vJM;EACE,gCAtCmB;ADvtJ3B;AC0/EI;EACE;ADx/EN;AC2/EI;EACE;ADz/EN;AC4/EI;EACE;AD1/EN;ACsmFE;EACE;ADpmFJ;ACumFE;;EAEE;ADrmFJ;ACwmFE;EACE;ADtmFJ;AC6iFE;EA4DI;ADtmFN;AC8iFE;EAwDI;ADnmFN;AC+iFE;EAoDI;ADhmFN;ACgjFE;EAgDI;AD7lFN;ACsmFM;EACE,0BD3rIY;AAulDpB;ACumFM;EACE,0BD7rIa;AAwlDrB;AC0mFE;EACE;ADxmFJ;AC2mFE;;EAEE;ADzmFJ;AC4mFE;EACE;AD1mFJ;AC+pFI;EACE;AD7pFN;ACgqFI;EACE;AD9pFN;ACiqFI;EACE;AD/pFN;ACmqFE;EACE;ADjqFJ;ACuqFI;;;;;EACE;ADjqFN;ACsqFI;EACE;ADpqFN;AC4vFE;EAEE;AD3vFJ;ACjpCE;EAXA;AD+pCF;AC2vFE;EACE;EACA;ADzvFJ;AC4vFM;;EAGE;AD3vFR;ACgwFE;;EAEE;AD9vFJ;ACqwFI;;;;EACE;ADhwFN;AC8zFE;EACE;AD5zFJ;AC+zFE;;EAEE;AD7zFJ;ACg0FE;;EAEE;EACA;AD9zFJ;ACi0FE;;EAEE;AD/zFJ;ACm0FI;;;;EAIE;ADj0FN;ACs1FI;EACE,gBAJK;ADh1FX;ACq3FE;EACE;ADl3FJ;ACq3FE;EACE;ADn3FJ;ACs3FE;EACE;ADp3FJ;ACw3FI;EACE;ADt3FN;ACy3FI;EACE;ADv3FN;AC03FI;EACE;ADx3FN;AC63FI;EACE;AD33FN;AC83FI;EACE;AD53FN;AC+3FI;EACE;AD73FN;ACo6FI;EACE;ADl6FN;ACq6FI;EACE;ADn6FN;ACs6FI;EACE;ADp6FN;ACy9FE;EACE;ADv9FJ;ACk8FE;EACE;ADh8FJ;ACm8FE;;EAIE;ADn8FJ;AC27FE;EACE;ADz7FJ;AC47FE;;EAIE;AD57FJ;ACo7FE;EACE;ADl7FJ;ACq7FE;;EAIE;ADr7FJ;ACs9FM;;EAEE;ADp9FR;ACu9FM;;EAEE;ADr9FR;ACw9FM;EACE;ADt9FR;AC49FI;EACE;AD19FN;AC0gGE;EACE;ADxgGJ;AC2gGE;EACE;ADzgGJ;AC4gGE;EACE;AD1gGJ;AC6gGE;EACE;AD3gGJ;AC8gGE;EACE;AD5gGJ;ACzxCE;EAXA;ADuyCF;AC4gGI;EACE;AD1gGN;ACghGM;EACE;AD9gGR;ACihGM;EACE;AD/gGR;ACkhGM;EACE;ADhhGR;ACohGI;EACE;ADlhGN;ACqhGI;EACE;ADnhGN;AC4kGE;EACE,yBALmC;EAMnC;AD1kGJ;AC6kGE;EACE,yBAXwB;EAYxB;AD3kGJ;AC6kGI;EACE,yBAb2B;AD9jGjC;AC8kGI;EAl5IF;ADu0CF;ACklGE;EACE,iDAvBmB;ADzjGvB;ACklGI;EACE,gDA1BiB;EA2BjB;ADhlGN;AColGE;EACE,gDAhCmB;EAiCnB;ADllGJ;AColGI;EACE;EACA,iDArCiB;AD7iGvB;ACslGE;EAQI;AD3lGN;ACooGI;EACE;ADloGN;ACqoGI;EAGE;ADroGN;ACwoGI;EAGE;ADxoGN;AC2nGI;EACE;ADznGN;AC4nGI;EAGE;AD5nGN;AC+nGI;EAGE;AD/nGN;ACknGI;EACE;ADhnGN;ACmnGI;EAGE;ADnnGN;ACsnGI;EAGE;ADtnGN;AC2pGI;EAGE,uBAhBqB;AD3oG3B;AC+pGE;EAthJA;EAwhJE;AD7pGJ;ACgqGE;EACE,0CA3BoB;ADnoGxB;AC4uGE;EACE,0CAVqB;ADhuGzB;ACisGE;;;EAGE;AD/rGJ;ACksGE;EACE;ADhsGJ;ACmsGE;EAGE,0CADQ;ADlsGZ;ACsrGE;;;EAGE;ADprGJ;ACurGE;EACE;ADrrGJ;ACwrGE;EAGE,wCADQ;ADvrGZ;AC2qGE;;;EAGE;ADzqGJ;AC4qGE;EACE;AD1qGJ;AC6qGE;EAGE,uCADQ;AD5qGZ;AC0tGI;;EACE,0CA3B2B;AD5rGjC;AC4tGI;;;EAGE,0CAlCwB;ADxrG9B;AC8tGM;EACE,0CAvCsB;ADrrG9B;ACkuGI;EAGE,2CADQ;ADjuGd;AC4uGM;;EAEE,uBA3DqC;AD/qG7C;AC8uGQ;;EAEE,0CAhEyC;AD5qGnD;ACkvGM;EACE,sCA3EiB;EA4EjB;ADhvGR;ACqvGQ;EACE,sCAjFuB;ADlqGjC;ACsvGQ;EACE,sCApFoB;ADhqG9B;AC0vGE;EACE,sCAvFsB;ADjqG1B;ACiwGE;EACE;EAIA;ADlwGJ;AC4wGE;EACE;AD1wGJ;ACi2GI;EAGE;ADj2GN;ACu2GI;EACE;IACE;EDr2GN;AACF;ACw2GI;;EAIE;ADx2GN;AC22GI;EAGE;EACA;AD32GN;AC82GI;;;EAGE;EACA;AD52GN;ACg3GM;EACE;AD92GR;ACi3GM;;;EAGE;EACA;AD/2GR;ACo3GM;EACE;ADl3GR;ACq3GM;;;EAGE;EACA;ADn3GR;ACu3GI;EACE;EACA;ADr3GN;ACw3GI;EACE;ADt3GN;ACy3GI;EACE;ADv3GN;AC23GE;EACE;ADz3GJ;AC43GE;EACE;AD13GJ;AC63GE;;;EAGE;AD33GJ;ACk6GI;EACE,YALK;AD35GX;ACm6GI;;EAEE;ADh6GN;ACq6GI;EACE;EACA;ADl6GN;ACu6GM;EACE;ADp6GR;ACy6GI;EACE;ADt6GN;ACq8GE;EAYI;AD78GN;ACy/GE;;EAEE,kDAJc;ADn/GlB;AC2/GI;;EAEE,+CAVY;EAWZ;ADz/GN;AC6/GE;EACE;AD3/GJ;AC6/GI;EACE;AD3/GN;AC+/GE;EACE;AD7/GJ;ACggHE;EACE;AD9/GJ;ACkgHE;;EAEE;EACA;ADhgHJ;AC8iHM;;;;;EACE;ADxiHR;AC6hHE;EACE;AD3hHJ;AC0hHE;EACE;ADxhHJ;ACiiHM;;;;;EACE;AD3hHR;ACghHE;EACE;AD9gHJ;AC6gHE;EACE;AD3gHJ;ACohHM;;;;;EACE;AD9gHR;ACmgHE;EACE;ADjgHJ;ACggHE;EACE;AD9/GJ;ACugHM;;;;;EACE;ADjgHR;AC4gHE;EACE;AD1gHJ;AC8gHE;EACE;AD5gHJ;AC8gHI;EACE;AD5gHN;ACihHE;;;;;EAGE;AD7gHJ;ACghHE;EACE;AD9gHJ;ACmhHE;;;EAEE;ADhhHJ;ACw+GM;;;;;EACE;ADl+GR;AC6+GE;EACE;AD3+GJ;AC++GE;EACE;AD7+GJ;AC++GI;EACE;AD7+GN;ACk/GE;;;;;EAGE;AD9+GJ;ACi/GE;EACE;AD/+GJ;ACo/GE;;;EAEE;ADj/GJ;ACy8GM;;;;;EACE;ADn8GR;AC88GE;EACE;AD58GJ;ACg9GE;EACE;AD98GJ;ACg9GI;EACE;AD98GN;ACm9GE;;;;;EAGE;AD/8GJ;ACk9GE;EACE;ADh9GJ;ACq9GE;;;EAEE;ADl9GJ;ACukHE;EACE;EACA;ADrkHJ;ACukHI;EApCF;EACA;ADhiHF;ACukHI;EAxCF;EACA;AD5hHF;ACukHI;EA5CF;EACA;ADxhHF;AC4hHE;;;EAGE;AD1hHJ;AC6hHE;;;;;EAKE;AD3hHJ;AC8hHE;EACE;AD5hHJ;AC+/GE;EACE,gBA4Ee;ADzkHnB;AC+/GE;EACE,YAyEe;ADrkHnB;ACilHI;EAzFF;IACE,gBA8Ec;EDlkHhB;;ECs/GA;IACE,YA2Ec;ED9jHhB;AACF;ACinHE;EACE;AD/mHJ;ACugJE;EACE;ADrgJJ;ACwgJE;;EAEE;ADtgJJ;AC4hJI;EACE,gBAJK;ADthJX;ACypHE;EAGE;EACA;EA35KF;ADowDF;AC4pHE;EACE;AD1pHJ;AC5bE;EAII;AD4bN;ACxME;EACE;AD0MJ;ACxMI;EAEE;ADyMN;ACrMI;EACE;ADuMN;ACpMI;EACE;EACA;ADsMN;ACnMI;EACE;ADqMN;ACjME;EACE;ADmMJ;AChME;EACE;ADkMJ;AC/LE;EACE;ADiMJ;ACtJE;EACE;ADwJJ;ACrJE;EACE;ADuJJ;ACrGE;EACE;ADuGJ;ACrGI;EACE;ADuGN;ACnGE;EACE,cAZe;ADiHnB;AClGE;;EAEE;ADoGJ;AC5FE;;;;EAIE;AD8FJ;AC3FE;;EAEE;AD6FJ;ACxFI;;EACE,mBAxCa;ADmInB;ACujJE;EAIE;EACA;ADxjJJ;AC+jJI;EAx4MF;AD40DF;AC4jJI;EAx4MF;AD+0DF;ACyjJI;EAx4MF;ADk1DF;ACsjJI;EAx4MF;ADq1DF;ACmjJI;EAx4MF;ADw1DF;ACgjJI;EAx4MF;AD21DF;AC6iJI;EAx4MF;AD81DF;AC0iJI;EAx4MF;ADi2DF;ACuiJI;EAx4MF;ADo2DF;ACoiJI;EAx4MF;ADu2DF;ACiiJI;EAx4MF;AD02DF;AC8hJI;EAx4MF;AD62DF;AC2hJI;EAx4MF;ADg3DF;ACwhJI;EAx4MF;ADm3DF;ACqhJI;EAx4MF;ADs3DF;ACkhJI;EAx4MF;ADy3DF;AC+gJI;EAx4MF;AD43DF;AC4gJI;EAx4MF;AD+3DF;ACygJI;EAx4MF;ADk4DF;ACsgJI;EAx4MF;ADq4DF;ACmgJI;EAx4MF;ADw4DF;ACggJI;EAx4MF;AD24DF;AC6/II;EAx4MF;AD84DF;AC0/II;EAx4MF;ADi5DF;ACu/II;EAx4MF;ADo5DF;AC2/II;EACE;ADz/IN;AC+EE;EAEE;EACA;AD7EJ;ACj5DE;EAXA;AD+5DF;ACiFI;EACE;AD/EN;ACiFM;EACE;AD/ER;AC6ME;EACE;EACA;AD3MJ;ACxvEI;EAs8EE;EACA;AD3MN;ACgNI;EACE;EACA;AD7MN;ACkNI;EACE;EACA;ADhNN;ACoNE;EACE;ADlNJ;ACsNI;EACE;ADpNN;ACyNI;EAWI;EAMF;ADtON;AC0OE;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;ADxOJ;AC2OE;;EAEE;ADzOJ;AC8OE;EAEE;AD7OJ;AC8EE;EACE,WANmB;EAOnB,YAPmB;EAQnB,iBARmB;ADpEvB;ACgFI;EACE;AD9EN;ACmFI;EACE;ADjFN;ACsFI;EACE;ADpFN;ACyFI;EACE;EACA;ADvFN;AC4FI;EACE;AD1FN;AC+FI;EACE;EACA;AD7FN;ACmGM;EACE;ADjGR;ACsGM;EACE;EACA;ADpGR;ACyGM;EACE;ADvGR;AC4GM;EACE;EACA;AD1GR;ACuCE;EACE,WAPqB;EAQrB,YARqB;EASrB,iBATqB;AD5BzB;ACyCI;EACE;ADvCN;AC4CI;EACE;AD1CN;AC+CI;EACE;AD7CN;ACkDI;EACE;EACA;ADhDN;ACqDI;EACE;ADnDN;ACwDI;EACE;EACA;ADtDN;AC4DM;EACE;AD1DR;AC+DM;EACE;EACA;AD7DR;ACkEM;EACE;ADhER;ACqEM;EACE;EACA;ADnER;ACAE;EACE,WALmB;EAMnB,YANmB;EAOnB,iBAPmB;ADSvB;ACEI;EACE;ADAN;ACKI;EACE;ADHN;ACQI;EACE;ADNN;ACWI;EACE;EACA;ADTN;ACcI;EACE;ADZN;ACiBI;EACE;EACA;ADfN;ACqBM;EACE;ADnBR;ACwBM;EACE;EACA;ADtBR;AC2BM;EACE;ADzBR;AC8BM;EACE;EACA;AD5BR;ACuLE;EA/vEA;EAiwEE;EACA;ADrLJ;ACkTE;EAKE;EACA;ADpTJ;ACoRE;EACE;ADlRJ;ACoRE;EACE;ADlRJ;ACoRE;EACE;ADlRJ;ACsRI;EAEE;ADrRN;ACkNE;EACE;ADhNJ;ACmNE;EACE;ADjNJ;ACoNE;EACE;ADlNJ;ACqNE;EACE;ADnNJ;ACoSI;EACE,YAxGuB;EAyGvB;ADlSN;ACsSE;EACE;ADpSJ;ACySE;EACE;ADvSJ;AC0SE;EAEE;EACA;ADzSJ;AC8OE;EACE;AD5OJ;AC8OE;EACE;AD5OJ;AC8OE;EACE;AD5OJ;ACgPI;EAEE;AD/ON;ACkOE;EACE;ADhOJ;ACkOE;EACE;ADhOJ;ACkOE;EACE;ADhOJ;ACoOI;EAEE;ADnON;ACiME;EAXA,oCADmB;ADlLrB;ACkME;EAfA,oCADmB;AD/KrB;ACmME;EAnBA,0CADmB;AD5KrB;AC7oEE;EAXA;AD2pEF;AChpEE;EAXA;AD8pEF;ACnpEE;EAXA;ADiqEF;ACtpEE;EAXA;ADoqEF;ACzpEE;EAXA;ADuqEF;AC5pEE;EAXA;AD0qEF;AC/pEE;EAXA;AD6qEF;ACoVE;;EAjgFA;ADirEF;ACqVE;;EAEE;ADnVJ;ACsVE;EACE;ADpVJ;ACsVI;EACE;ADpVN;ACwVE;EACE;EACA;ADtVJ;ACwVI;EACE;ADtVN;AC0VE;EACE;ADxVJ;AC2VE;EACE;EACA;ADzVJ;AC6VI;EACE;EACA;EACA;AD3VN;AC+VE;EACE;EACA;AD7VJ;AC+VI;EACE;AD7VN;ACiWE;EACE;EACA;AD/VJ;ACiWI;EACE;AD/VN;ACkWI;EACE;ADhWN;ACoWE;;EAEE;ADlWJ;ACuZE;EAEE;EACA;ADtZJ;AC5tEE;EAXA;AD0uEF;AC/tEE;EAXA;AD6uEF;ACwZE;EACE;ADtZJ;AC8dE;EACE;AD5dJ;AC+dE;EACE,aAdoB;AD/cxB;ACgeE;EAGE;ADheJ;ACmeE;EACE,yBAxBoB;ADzcxB;ACqeI;EACE;ADneN;ACseI;EACE;ADpeN;ACueI;EACE;ADreN;AC4eM;EACE,yBAtCW;ADpcnB;AC+eM;EACE,qBA5CW;ADjcnB;ACifI;EACE;AD/eN;ACqfE;EACE;ADnfJ;ACwfI;;EACE;ADrfN;ACwfI;;EACE;ADrfN;ACwfI;;EACE;ADrfN;AC8kBE;EA3CA,yBAwCwB;EAvCxB,0BAwCwB;ADxkB1B;ACkiBE;EACE,0BAqCsB;EApCtB;ADhiBJ;AC0kBM;EA/2FJ;ADwyEF;AC2kBM;EACE;ADzkBR;AC6kBI;EACE;AD3kBN;AC8kBI;EACE;AD5kBN;ACilBI;EAlEF,yBAwBwE;EAvBxE,0BAuBiC;ADniBnC;AC8gBE;EACE,0BAoB+B;EAnB/B;AD5gBJ;ACiiBE;EATA,oCADmB;ADphBrB;AC0kBI;EAtEF,yBAwBwE;EAvBxE,YAuBiC;ADxhBnC;ACmgBE;EACE,YAoB+B;EAnB/B;ADjgBJ;ACshBE;EATA,0CADmB;ADzgBrB;ACmkBI;EA1EF,yBAwBwE;EAvBxE,0BAuBiC;AD7gBnC;ACwfE;EACE,0BAoB+B;EAnB/B;ADtfJ;AC2gBE;EATA,oCADmB;AD9frB;ACkpBE;EACE;ADhpBJ;ACmpBE;;;;EAIE;ADjpBJ;ACopBE;;EAEE;ADlpBJ;ACqpBE;EACE;ADnpBJ;ACspBE;EACE;ADppBJ;AC6vBE;EACE;AD3vBJ;ACgwBE;;;EAGE;AD9vBJ;ACiwBE;EACE;AD/vBJ;ACkwBE;EACE;ADhwBJ;ACmwBE;EACE;ADjwBJ;ACowBE;;EAEE;EACA;ADlwBJ;AC4tBE;EA2CI,0BAlCa;ADluBnB;ACwwBE;EACE,0BAvCe;AD/tBnB;ACywBE;EAOI;AD7wBN;ACmtBE;EAqEI;ADrxBN;ACgtBE;EA8EM;AD3xBR;AC42BE;EACE,oCAtMA;ADpqBJ;AC62BE;;EAEE,kCAViB;ADj2BrB;AC82BE;;EAEE;AD52BJ;AC+2BE;;EAEE;AD72BJ;ACg3BE;;EAEE,mBAxBc;ADt1BlB;ACi3BE;;EAEE,mBA5BuB;ADn1B3B;ACkpBE;EACE;EACA;ADhpBJ;ACmpBE;EAII;ADppBN;AC6pBE;EACE;AD3pBJ;AC4qBE;;;EARM;AD/pBR;ACmwBE;EAnrGA;EAqrGE;EACA;ADjwBJ;ACi0BE;EACE,kCAtMA;ADznBJ;ACk0BE;;EAEE,kCAViB;ADtzBrB;ACm0BE;;EAEE;ADj0BJ;ACo0BE;;EAEE;ADl0BJ;ACq0BE;;EAEE,mBAxBc;AD3yBlB;ACs0BE;;EAEE,mBA5BuB;ADxyB3B;ACumBE;EACE;EACA;ADrmBJ;ACwmBE;EAII;ADzmBN;ACknBE;EACE;ADhnBJ;ACioBE;;;EARM;ADpnBR;AC2xBE;EACE,iCAtMA;ADnlBJ;AC4xBE;;EAEE,kCAViB;ADhxBrB;AC6xBE;;EAEE;AD3xBJ;AC8xBE;;EAEE;AD5xBJ;AC+xBE;;EAEE,mBAxBc;ADrwBlB;ACgyBE;;EAEE,mBA5BuB;ADlwB3B;ACikBE;EACE;EACA;AD/jBJ;ACkkBE;EAII;ADnkBN;AC4kBE;EACE;AD1kBJ;AC2lBE;;;EARM;AD9kBR;ACgsBE;EAjsGA;ADogFF;ACisBE;EACE;AD/rBJ;ACisBI;EACE;AD/rBN;ACksBI;EACE;ADhsBN;ACosBE;EACE;ADlsBJ;ACoyBE;EApzGA;EAszGE;EACA;ADlyBJ;ACsaE;EACE;ADpaJ;ACuaE;EACE;ADraJ;ACk3BE;EAEE;EACA;ADj3BJ;ACphFE;EAXA;ADkiFF;ACi3BE;EACE;AD/2BJ;AC21BM;EAwBF;ADh3BJ;ACq3BE;EACE;IAEE;EDp3BJ;AACF;ACu3BE;EACE;ADr3BJ;ACw3BE;;EAEE;ADt3BJ;ACy3BE;EACE;ADv3BJ;ACy3BI;;EAEE;ADv3BN;AC47GE;EACE,yBAXY;AD/6GhB;AC67GE;EACE,yBAfY;AD56GhB;AC87GE;EACE,cAlBoB;AD16GxB;AC87GI;EACE,cAhBqB;AD56G3B;AC+7GI;EACE,cAnBmB;AD16GzB;ACi8GE;EACE,cA7BqB;ADl6GzB;ACk8GE;EACE,qCA9BqB;ADl6GzB;ACo8GI;EACE,yBAhCsB;ADl6G5B;ACo8GM;EACE,yBArCmB;AD75G3B;ACq8GM;EACE,yBAxCiB;AD35GzB;ACy8GI;EACE,cA9CsB;ADz5G5B;AC08GI;EACE,cApDqB;ADp5G3B;AC28GI;EACE,cAvDmB;ADl5GzB;ACi9GI;EACE,cAhEmB;AD/4GzB;ACi9GM;;EAEE,cApEiB;AD34GzB;ACm9GI;;EAEE,yBA1EmB;ADv4GzB;ACq9GE;EACE,cA/EqB;ADp4GzB;ACi/FI;EACE,0BALU;AD1+FhB;ACk/FI;EACE,0BATU;ADv+FhB;ACm/FI;EACE,qCAZc;ADr+FpB;ACo/FI;EAj/DF;EACA;EACA;ADhgCF;ACk0GI;EACE,qCAJc;AD5zGpB;ACm0GI;EAx0EF;EACA;EACA;ADx/BF;ACi2FI;EACE,qCAPc;ADx1FpB;ACk2FI;EACE,qCAVuB;ADt1F7B;ACm2FI;EACE,qCAbc;ADp1FpB;ACq2FM;EACE,0BAjBiB;ADl1FzB;ACs2FM;EACE;ADp2FR;ACypGI;EACE,0BATY;AD9oGlB;AC0pGI;EACE,0BAZkB;AD5oGxB;AC4pGM;EACE,cAhBkB;AD1oG1B;AC6pGM;EACE,cAnBiB;ADxoGzB;AC8pGM;EACE,cAtBe;ADtoGvB;ACkqGM;EACE,cA7Be;ADnoGvB;ACqqGM;EACE,0BAxCiB;AD3nGzB;ACsqGM;EACE,0BAtCmB;AD9nG3B;ACi6BI;EACE;AD/5BN;ACk6BI;EACE;ADh6BN;ACm6BI;EACE;ADj6BN;AC6gCE;EACE;AD3gCJ;AC8gCE;;EAEE;AD5gCJ;AC+gCE;EACE;AD7gCJ;ACo9BE;EA4DI;AD7gCN;ACq9BE;EAwDI;AD1gCN;ACs9BE;EAoDI;ADvgCN;ACu9BE;EAgDI;ADpgCN;ACuhCE;EACE;ADrhCJ;ACwhCE;;EAEE;ADthCJ;ACyhCE;EACE;ADvhCJ;AC4kCI;EACE;AD1kCN;AC6kCI;EACE;AD3kCN;AC8kCI;EACE;AD5kCN;ACglCE;EACE;AD9kCJ;AColCI;;;;;EACE;AD9kCN;ACmlCI;EACE;ADjlCN;ACyqCE;EAEE;ADxqCJ;ACpuFE;EAXA;ADkvFF;ACwqCE;EACE;EACA;ADtqCJ;ACyqCM;;EAGE;ADxqCR;AC6qCE;;EAEE;AD3qCJ;ACkrCI;;;;EACE;AD7qCN;AC2uCE;EACE;ADzuCJ;AC4uCE;;EAEE;AD1uCJ;AC6uCE;;EAEE;EACA;AD3uCJ;AC8uCE;;EAEE;AD5uCJ;ACgvCI;;;;EAIE;AD9uCN;ACqyCE;EACE;ADnyCJ;ACsyCE;EACE;ADpyCJ;ACuyCE;EACE;ADryCJ;ACyyCI;EACE;ADvyCN;AC0yCI;EACE;ADxyCN;AC2yCI;EACE;ADzyCN;AC8yCI;EACE;AD5yCN;AC+yCI;EACE;AD7yCN;ACgzCI;EACE;AD9yCN;ACq1CI;EACE;ADn1CN;ACs1CI;EACE;ADp1CN;ACu1CI;EACE;ADr1CN;AC04CE;EACE;ADx4CJ;ACm3CE;EACE;ADj3CJ;ACo3CE;;EAIE;ADp3CJ;AC42CE;EACE;AD12CJ;AC62CE;;EAIE;AD72CJ;ACq2CE;EACE;ADn2CJ;ACs2CE;;EAIE;ADt2CJ;ACu4CM;;EAEE;ADr4CR;ACw4CM;;EAEE;ADt4CR;ACy4CM;EACE;ADv4CR;AC64CI;EACE;AD34CN;AC27CE;EACE;ADz7CJ;AC47CE;EACE;AD17CJ;AC67CE;EACE;AD37CJ;AC87CE;EACE;AD57CJ;AC+7CE;EACE;AD77CJ;ACx2FE;EAXA;ADs3FF;AC67CI;EACE;AD37CN;ACi8CM;EACE;AD/7CR;ACk8CM;EACE;ADh8CR;ACm8CM;EACE;ADj8CR;ACq8CI;EACE;ADn8CN;ACs8CI;EACE;ADp8CN;AC6/CE;EACE,yBALmC;EAMnC;AD3/CJ;AC8/CE;EACE,uBAXwB;EAYxB;AD5/CJ;AC8/CI;EACE,uBAb2B;AD/+CjC;AC+/CI;EAl5IF;ADs5FF;ACmgDE;EACE,2CAvBmB;AD1+CvB;ACmgDI;EACE,0CA1BiB;EA2BjB;ADjgDN;ACqgDE;EACE,0CAhCmB;EAiCnB;ADngDJ;ACqgDI;EACE;EACA,2CArCiB;AD99CvB;ACugDE;EAQI;AD5gDN;ACqjDI;EACE;ADnjDN;ACsjDI;EAGE;ADtjDN;ACyjDI;EAGE;ADzjDN;AC4iDI;EACE;AD1iDN;AC6iDI;EAGE;AD7iDN;ACgjDI;EAGE;ADhjDN;ACmiDI;EACE;ADjiDN;ACoiDI;EAGE;ADpiDN;ACuiDI;EAGE;ADviDN;AC4kDI;EAGE,uBAhBqB;AD5jD3B;ACglDE;EAthJA;EAwhJE;AD9kDJ;ACilDE;EACE,qCA3BoB;ADpjDxB;AC6pDE;EACE,qCAVqB;ADjpDzB;ACknDE;;;EAGE;ADhnDJ;ACmnDE;EACE;ADjnDJ;AConDE;EAGE,0CADQ;ADnnDZ;ACumDE;;;EAGE;ADrmDJ;ACwmDE;EACE;ADtmDJ;ACymDE;EAGE,wCADQ;ADxmDZ;AC4lDE;;;EAGE;AD1lDJ;AC6lDE;EACE;AD3lDJ;AC8lDE;EAGE,uCADQ;AD7lDZ;AC2oDI;;EACE,qCA3B2B;AD7mDjC;AC6oDI;;;EAGE,qCAlCwB;ADzmD9B;AC+oDM;EACE,qCAvCsB;ADtmD9B;ACmpDI;EAGE,qCADQ;ADlpDd;AC6pDM;;EAEE,qCA3DqC;ADhmD7C;AC+pDQ;;EAEE,qCAhEyC;AD7lDnD;ACmqDM;EACE,iCA3EiB;EA4EjB;ADjqDR;ACsqDQ;EACE,iCAjFuB;ADnlDjC;ACuqDQ;EACE,iCApFoB;ADjlD9B;AC2qDE;EACE,gCAvFsB;ADllD1B;ACkrDE;EACE;EAIA;ADnrDJ;AC6rDE;EACE;AD3rDJ;ACkxDI;EAGE;ADlxDN;ACwxDI;EACE;IACE;EDtxDN;AACF;ACyxDI;;EAIE;ADzxDN;AC4xDI;EAGE;EACA;AD5xDN;AC+xDI;;;EAGE;EACA;AD7xDN;ACiyDM;EACE;AD/xDR;ACkyDM;;;EAGE;EACA;ADhyDR;ACqyDM;EACE;ADnyDR;ACsyDM;;;EAGE;EACA;ADpyDR;ACwyDI;EACE;EACA;ADtyDN;ACyyDI;EACE;ADvyDN;AC0yDI;EACE;ADxyDN;AC4yDE;EACE;AD1yDJ;AC6yDE;EACE;AD3yDJ;AC8yDE;;;EAGE;AD5yDJ;AC24DE;EAYI;ADp5DN;ACg8DE;;EAEE,4CAJc;AD17DlB;ACk8DI;;EAEE,yCAVY;EAWZ;ADh8DN;ACo8DE;EACE;ADl8DJ;ACo8DI;EACE;ADl8DN;ACs8DE;EACE;ADp8DJ;ACu8DE;EACE;ADr8DJ;ACy8DE;;EAEE;EACA;ADv8DJ;ACq/DM;;;;;EACE;AD/+DR;ACo+DE;EACE;ADl+DJ;ACi+DE;EACE;AD/9DJ;ACw+DM;;;;;EACE;ADl+DR;ACu9DE;EACE;ADr9DJ;ACo9DE;EACE;ADl9DJ;AC29DM;;;;;EACE;ADr9DR;AC08DE;EACE;ADx8DJ;ACu8DE;EACE;ADr8DJ;AC88DM;;;;;EACE;ADx8DR;ACm9DE;EACE;ADj9DJ;ACq9DE;EACE;ADn9DJ;ACq9DI;EACE;ADn9DN;ACw9DE;;;;;EAGE;ADp9DJ;ACu9DE;EACE;ADr9DJ;AC09DE;;;EAEE;ADv9DJ;AC+6DM;;;;;EACE;ADz6DR;ACo7DE;EACE;ADl7DJ;ACs7DE;EACE;ADp7DJ;ACs7DI;EACE;ADp7DN;ACy7DE;;;;;EAGE;ADr7DJ;ACw7DE;EACE;ADt7DJ;AC27DE;;;EAEE;ADx7DJ;ACg5DM;;;;;EACE;AD14DR;ACq5DE;EACE;ADn5DJ;ACu5DE;EACE;ADr5DJ;ACu5DI;EACE;ADr5DN;AC05DE;;;;;EAGE;ADt5DJ;ACy5DE;EACE;ADv5DJ;AC45DE;;;EAEE;ADz5DJ;AC8gEE;EACE;EACA;AD5gEJ;AC8gEI;EApCF;EACA;ADv+DF;AC8gEI;EAxCF;EACA;ADn+DF;AC8gEI;EA5CF;EACA;AD/9DF;ACm+DE;;;EAGE;ADj+DJ;ACo+DE;;;;;EAKE;ADl+DJ;ACq+DE;EACE;ADn+DJ;ACykEE;EACE;ADvkEJ;AC+9FE;EACE;AD79FJ;ACg+FE;;EAEE;AD99FJ;AConEE;EAGE;EACA;EA35KF;ADwyGF;ACwnEE;EACE;ADtnEJ;AAllHA;;;EAGE;EACA;EACA;EACA;AAqlHF;AAllHA;EACE;EACA;AAqlHF;AAllHA;EACE;EACA;AAqlHF;AAnlHE;EACE;AAqlHJ,C;;AEn0HA;;;;CAAA;ADu0DA;AA+IA;AAobA;AAmwDA;AA6CA;AAx+CE;EACE,gBAvLoB;EAwLpB,eAzLkB;AC5gFtB;ADysFE;EAEE;ACvsFJ;AD0sFE;EACE;ACvsFJ;ADq3EE;EA/VE;EAYF;EAqVE;ACj3EJ;ADo3EE;EApWE;EAYF;EA0VE;ACh3EJ;ADm3EE;EAzWE;EAYF;EA+VE;AC/2EJ;ADk3EE;EA9WE;EAYF;EAoWE;AC92EJ;ADo3EE;EAtXE;EA+XA;ACx3EJ;AD23EE;EAlYE;EA2YA;AC/3EJ;ADk4EE;EA9YE;EAYF;AC3/DF;ADi4EE;EAlZE;EAYF;ACt/DF;AD+3EI;EACE;AC73EN;ADi4EE;EA1ZE;EAYF;AC9+DF;ADg4EE;EA9ZE;EAYF;EAoZE;AC53EJ;AD+3EE;EAnaE;EAYF;EAyZE;AC33EJ;AD83EE;EAxaE;EAYF;EA8ZE;AC13EJ;AD63EE;EA7aE;EAYF;EAmaE;ACz3EJ;ADuqFE;EA7tBE;EAYF;ACj9DF;ADg2FE;;EAGI;EACA;EACA;AC91FN;ADmiGE;EAEI;EACA;ACjiGN;ADqiGE;EACE;ACliGJ;ADqiGE;;EAEE;ACliGJ;ADmqGE;EACE;AChqGJ;ADmxGE;EACE;EACA;AChxGJ;ADkxGI;;EAEE,eA3FsB;ACrrG5B;AD23GE;EACE;EACA;ACx3GJ;AD23GE;EACE;ACx3GJ;AD2kHE;EACE,eAjL0B;ACv5G9B;AD2kHE;;EAGI;EACA;ACzkHN;AD6kHE;EAEI,eA7LiC;EA8LjC;AC3kHN;AD6pHE;EAlxDE;EAYF;ACl5DF;ADoxHE;EAEI;EACA;EACA;AClxHN;ADsxHE;EAt5DE;EAYF;ACv4DF;ADu8ME;EArlJE,kBAeU;EAdV,gBAeY;EAdZ,kBAeY;EAdZ,mBAeY;EAGd;AC/3DF;ADm8ME;EACE,yBAPuB;ACz7M3B;ADs8MI;;EACE,eAvB2B;EAwB3B,kBAtCU;AC55MhB;ADs8MI;;EACE;EACA;ACn8MN;ADq8MM;;EACE;EACA,kBAhDQ;ACl5MhB;ADu8ME;EACE;EAEA;ACr8MJ;ADy8MI;;EAtEF;EAEA;AC/3MF;AD28MI;EA9EF;EAEA;AC33MF;AD88ME;EACE;EACA,sBAnEiB;ACx4MrB;AD88ME;EACE;AC38MJ;AD88ME;EAGE,iBAhEuB;AC74M3B;ADg9ME;EACE,cA/EoB;EAgFpB,0BAzEqB;EA6ErB;ACh9MJ;ADk8LI;EACE,sBAJqB;AC37L3B;ADk8LI;EACE;ACh8LN;ADo8LM;;EA1DJ;EAIA;EAGA;AC34LF;ADq8LM;EAjEJ;EAIA;EAGA;ACt4LF;ADw8LM;EAzEJ;EAIA;EAGA;ACj4LF;AD08LI;EACE;ACx8LN;AD28LI;EAGE,cAzCqB;ACl6L3B;AD88LI;EACE,0BAjDmB;EAqDnB;AC/8LN;ADq9LE;EAGM;;IAxFN;EC13LA;EDy9LM;IA/FN;ECv3LA;ED89LM;IAvGN;ECp3LA;AACF;ADkwLI;EACE;AChwLN;ADmwLI;EACE;EACA,kBAT2B;ACxvLjC;ADqwLM;;EAjCJ;EAEA;ACjuLF;ADywLM;EA1CJ;EAEA;AC7tLF;ADilMI;EACE;AC9kMN;ADilMI;EACE;EACA,mBAT8B;ACtkMpC;ADmlMM;;EAxCJ;EAEA;ACxiMF;ADulMM;EAjDJ;EAEA;ACpiMF;AD0uHE;;EAGE;ACxuHJ;ADurHE;;EARA;EACA;EACA;EAQE;EACA;AClrHJ;ADqrHI;;EACE,eAyCqB;AC3tH3B;AD86HE;EACE;AC36HJ;ADsmIE;EAEI;EACA;EACA;ACpmIN;ADurIE;;EAGI;EACA;ACrrIN;AD4/IE;EACE;ACz/IJ;ADk4JE;EAGI;EACA;ACj4JN;ADwiKE;EAEI;EACA;ACtiKN;AD0iKE;EACE;ACviKJ;AD0iKE;EACE;ACviKJ;AD0iKE;EAEI;EACA;ACxiKN;ADoyKE;EAEI;EACA;EACA;AClyKN;AD+5KE;;;;;;;EAnvHE;EAYF;EA+uHE;AC35KJ;AD89KE;EAEE,eArBoB;EAsBpB,gBArB2B;EAsB3B,mBAtB2B;ACt8K/B;AD+9KE;EACE,eAvB4B;EAwB5B,gBAtBA;EAuBA,mBAvBA;ACr8KJ;ADy7HI;EACE;ACt7HN;AD8lHE;EARA;EACA;EACA;EAQE;EACA;AC1lHJ;AD6lHI;EACE,eAkVuB;AC76H7B;ADg7HI;EACE;AC96HN;ADilHE;EARA;EACA;EACA;EAQE;EACA;AC7kHJ;ADglHI;EACE,eAuVuB;ACr6H7B;ADw6HI;EACE;EACA;EACA;ACt6HN;AD46HI;EACE;ACz6HN;AD8jHE;EARA;EACA;EACA;EAQE;EACA;AC1jHJ;AD6jHI;EACE,eAqWuB;ACh6H7B;ADm6HI;EACE;ACj6HN;ADijHE;EARA;EACA;EACA;EAQE;EACA;AC7iHJ;ADgjHI;EACE,eA0WuB;ACx5H7B;AD25HI;EAEE;EACA;AC15HN;ADmpDE;EAGI;AClpDN;AD+rDE;EA9GE;EAYF;ACxlDF;ADw8KE;EAEI;EACA;ACt8KN;AD08KE;EACE;EAEE;EACA;EACA;ACx8KN;ADgyME;;EAEE;EACA;AC7xMJ;ADgzCE;EACE;EAIA;AChzCJ;ADuzCI;EACE;ACrzCN;ADyzCE;EACE;ACtzCJ;ADyzCE;EACE;EACA;EACA;EAEA;EACA;ACvzCJ;ADpVI;EA+oDE;ACxzCN;ADtXE;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAIA;EAGA;EAGA;EACA;ACkXJ;ADrgBE;EAEE;EAGA;EACA;EACA;EACA;ACqgBJ;ADjgBE;EACE;EACA,aA3B4B;AC+hBhC;ADlgBI;EAGE;ACkgBN;AD1fE;EACE;EACA;EACA,aA1CkB;ACuiBtB;ADzfE;EAGE;EACA;EACA;EACA,aApDkB;EAwDlB;EACA;EACA;ACufJ;ADpfE;EAEE;EACA;EACA;EACA;EACA;EAEA,aApE2B;EAqE3B;EACA;EACA;EACA;ACqfJ;ADnfI;EACE;ACqfN;ADhfM;EAGE;ACgfR;AD3eE;EACE,+BAtFmC;ACokBvC;ADteI;EACE;ACyeN;ADneE;EACE;EACA,aA3GkB;EAgHlB;EAIA;EAGA;EACA;AC6dJ;ADzdE;EACE;EAKA;EAKA;ACodJ;ADrXE;EAA0C;ACyX5C;ADxXE;EAAwC;AC2X1C;ADzXE;EAEE;AC0XJ;ADvXE;EAEE;ACyXJ;ADpXE;EACE;ACuXJ;ADjXE;EAqBA;EACA;EApBE;EACA;ACqXJ;AD5WE;EASA;EACA;EARE;ACgXJ;ADw2CE;EACE;ACr2CJ;AD6yME;EACE;AC1yMJ;AA1fA;EACE;EACA;EACA;EACA;EACA;EACA;AA6fF;AA/eA;EACE;EACA;EACA;EACA;EACA;EACA;AAkfF;AApeA;EACE;EACA;EACA;EACA;EACA;EACA;AAueF;ADwqCE;EAII;ACxqCN;AD45CE;EACE;ACz5CJ;AD25CI;EAEE;AC15CN;AD85CI;EACE;AC55CN;AD+5CI;EACE;EACA;AC75CN;ADg6CI;EACE;AC95CN;ADk6CE;EACE;AC/5CJ;ADk6CE;EACE;AC/5CJ;ADk6CE;EACE;AC/5CJ;AD08CE;EACE;ACv8CJ;AD08CE;EACE;ACv8CJ;ADy/CE;EACE;ACt/CJ;ADw/CI;EACE;ACt/CN;AD0/CE;EACE,cAZe;AC3+CnB;AD0/CE;;EAEE;ACv/CJ;AD+/CE;;;;EAIE;AC5/CJ;AD+/CE;;EAEE;AC5/CJ;ADigDI;;EACE,mBAxCa;ACr9CnB;AD+oME;EAIE;EACA;AC/oMJ;ADspMI;EAx4MF;ACsPF;ADkpMI;EAx4MF;AC0PF;AD8oMI;EAx4MF;AC8PF;AD0oMI;EAx4MF;ACkQF;ADsoMI;EAx4MF;ACsQF;ADkoMI;EAx4MF;AC0QF;AD8nMI;EAx4MF;AC8QF;AD0nMI;EAx4MF;ACkRF;ADsnMI;EAx4MF;ACsRF;ADknMI;EAx4MF;AC0RF;AD8mMI;EAx4MF;AC8RF;AD0mMI;EAx4MF;ACkSF;ADsmMI;EAx4MF;ACsSF;ADkmMI;EAx4MF;AC0SF;AD8lMI;EAx4MF;AC8SF;AD0lMI;EAx4MF;ACkTF;ADslMI;EAx4MF;ACsTF;ADklMI;EAx4MF;AC0TF;AD8kMI;EAx4MF;AC8TF;AD0kMI;EAx4MF;ACkUF;ADskMI;EAx4MF;ACsUF;ADkkMI;EAx4MF;AC0UF;AD8jMI;EAx4MF;AC8UF;AD0jMI;EAx4MF;ACkVF;ADsjMI;EAx4MF;ACsVF;ADyjMI;EACE;ACtjMN;AD4oDE;EAEE;EACA;AC1oDJ;ADpVE;EAXA;ACkWF;AD8oDI;EACE;AC5oDN;AD8oDM;EACE;AC5oDR;AD0wDE;EACE;EACA;ACvwDJ;AD5rBI;EAs8EE;EACA;ACvwDN;AD4wDI;EACE;EACA;ACzwDN;AD8wDI;EACE;EACA;AC3wDN;AD+wDE;EACE;AC5wDJ;ADgxDI;EACE;AC7wDN;ADkxDI;EAWI;EAMF;AC9xDN;ADkyDE;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AC/xDJ;ADkyDE;;EAEE;AC/xDJ;ADoyDE;EAEE;AClyDJ;ADmoDE;EACE,WANmB;EAOnB,YAPmB;EAQnB,iBARmB;ACxnDvB;ADooDI;EACE;ACloDN;ADuoDI;EACE;ACroDN;AD0oDI;EACE;ACxoDN;AD6oDI;EACE;EACA;AC3oDN;ADgpDI;EACE;AC9oDN;ADmpDI;EACE;EACA;ACjpDN;ADupDM;EACE;ACrpDR;AD0pDM;EACE;EACA;ACxpDR;AD6pDM;EACE;AC3pDR;ADgqDM;EACE;EACA;AC9pDR;AD2lDE;EACE,WAPqB;EAQrB,YARqB;EASrB,iBATqB;AC/kDzB;AD4lDI;EACE;AC1lDN;AD+lDI;EACE;AC7lDN;ADkmDI;EACE;AChmDN;ADqmDI;EACE;EACA;ACnmDN;ADwmDI;EACE;ACtmDN;AD2mDI;EACE;EACA;ACzmDN;AD+mDM;EACE;AC7mDR;ADknDM;EACE;EACA;AChnDR;ADqnDM;EACE;ACnnDR;ADwnDM;EACE;EACA;ACtnDR;ADmjDE;EACE,WALmB;EAMnB,YANmB;EAOnB,iBAPmB;ACziDvB;ADojDI;EACE;ACljDN;ADujDI;EACE;ACrjDN;AD0jDI;EACE;ACxjDN;AD6jDI;EACE;EACA;AC3jDN;ADgkDI;EACE;AC9jDN;ADmkDI;EACE;EACA;ACjkDN;ADukDM;EACE;ACrkDR;AD0kDM;EACE;EACA;ACxkDR;AD6kDM;EACE;AC3kDR;ADglDM;EACE;EACA;AC9kDR;ADyuDE;EA/vEA;EAiwEE;EACA;ACtuDJ;ADm2DE;EAKE;EACA;ACp2DJ;ADo0DE;EACE;ACl0DJ;ADo0DE;EACE;ACl0DJ;ADo0DE;EACE;ACl0DJ;ADs0DI;EAEE;ACr0DN;ADkwDE;EACE;AChwDJ;ADmwDE;EACE;ACjwDJ;ADowDE;EACE;AClwDJ;ADqwDE;EACE;ACnwDJ;ADo1DI;EACE,YAxGuB;EAyGvB;ACl1DN;ADs1DE;EACE;ACn1DJ;ADw1DE;EACE;ACr1DJ;ADw1DE;EAEE;EACA;ACt1DJ;AD2xDE;EACE;ACzxDJ;AD2xDE;EACE;ACzxDJ;AD2xDE;EACE;ACzxDJ;AD6xDI;EAEE;AC5xDN;AD+wDE;EACE;AC7wDJ;AD+wDE;EACE;AC7wDJ;AD+wDE;EACE;AC7wDJ;ADixDI;EAEE;AChxDN;AD8uDE;EAXA,oCADmB;AC/tDrB;AD+uDE;EAfA,oCADmB;AC5tDrB;ADgvDE;EAnBA,0CADmB;ACztDrB;ADhmBE;EAXA;AC+mBF;ADpmBE;EAXA;ACmnBF;ADxmBE;EAXA;ACsnBF;AD3mBE;EAXA;ACynBF;AD9mBE;EAXA;AC6nBF;ADlnBE;EAXA;ACgoBF;ADrnBE;EAXA;ACmoBF;AD83DE;;EAjgFA;ACwoBF;AD83DE;;EAEE;AC33DJ;AD83DE;EACE;AC33DJ;AD63DI;EACE;AC33DN;AD+3DE;EACE;EACA;AC53DJ;AD83DI;EACE;AC53DN;ADg4DE;EACE;AC73DJ;ADg4DE;EACE;EACA;AC73DJ;ADi4DI;EACE;EACA;EACA;AC93DN;ADk4DE;EACE;EACA;AC/3DJ;ADi4DI;EACE;AC/3DN;ADm4DE;EACE;EACA;ACh4DJ;ADk4DI;EACE;ACh4DN;ADm4DI;EACE;ACj4DN;ADq4DE;;EAEE;ACl4DJ;ADm5DI;EACE,iBALc;AC34DpB;ADm7DE;EAEE;EACA;ACj7DJ;ADjsBE;EAXA;AC+sBF;ADpsBE;EAXA;ACktBF;ADm7DE;EACE;ACh7DJ;ADw/DE;EACE;ACr/DJ;ADw/DE;EACE,aAdoB;ACv+DxB;ADw/DE;EAGE;ACv/DJ;AD0/DE;EACE,yBAxBoB;AC/9DxB;AD2/DI;EACE;ACx/DN;AD2/DI;EACE;ACz/DN;AD4/DI;EACE;AC1/DN;ADigEM;EACE,yBAtCW;ACx9DnB;ADmgEM;EACE,qBA5CW;ACr9DnB;ADqgEI;EACE;ACngEN;ADygEE;EACE;ACtgEJ;AD2gEI;;EACE;ACvgEN;AD0gEI;;EACE;ACvgEN;AD0gEI;;EACE;ACvgEN;ADgmEE;EA3CA,yBAwCwB;EAvCxB,0BAwCwB;ACzlE1B;ADmjEE;EACE,0BAqCsB;EApCtB;ACjjEJ;AD2lEM;EA/2FJ;ACuxBF;AD4lEM;EACE;AC1lER;AD8lEI;EACE;AC5lEN;AD+lEI;EACE;AC7lEN;ADkmEI;EAlEF,yBAwBwE;EAvBxE,0BAuBiC;ACnjEnC;AD8hEE;EACE,0BAoB+B;EAnB/B;AC5hEJ;ADijEE;EATA,oCADmB;ACpiErB;AD0lEI;EAtEF,yBAwBwE;EAvBxE,YAuBiC;ACxiEnC;ADmhEE;EACE,YAoB+B;EAnB/B;ACjhEJ;ADsiEE;EATA,0CADmB;ACzhErB;ADmlEI;EA1EF,yBAwBwE;EAvBxE,0BAuBiC;AC7hEnC;ADwgEE;EACE,0BAoB+B;EAnB/B;ACtgEJ;AD2hEE;EATA,oCADmB;AC9gErB;ADkqEE;EACE;AC/pEJ;ADkqEE;;;;EAIE;AC/pEJ;ADkqEE;;EAEE;AC/pEJ;ADkqEE;EACE;AC/pEJ;ADkqEE;EACE;AC/pEJ;ADwwEE;EACE;ACrwEJ;AD0wEE;;;EAGE;ACvwEJ;AD0wEE;EACE;ACvwEJ;AD0wEE;EACE;ACvwEJ;AD0wEE;EACE;ACvwEJ;AD0wEE;;EAEE;EACA;ACvwEJ;ADiuEE;EA2CI,0BAlCa;ACtuEnB;AD4wEE;EACE,0BAvCe;ACluEnB;AD4wEE;EAOI;AC/wEN;ADqtEE;EAqEI;ACtxEN;ADitEE;EA8EM;AC3xER;AD42EE;EACE,oCAtMA;ACnqEJ;AD42EE;;EAEE,kCAViB;AC/1ErB;AD42EE;;EAEE;ACz2EJ;AD42EE;;EAEE;ACz2EJ;AD42EE;;EAEE,mBAxBc;ACj1ElB;AD42EE;;EAEE,mBA5BuB;AC70E3B;AD4oEE;EACE;EACA;ACzoEJ;AD4oEE;EAII;AC5oEN;ADqpEE;EACE;AClpEJ;ADmqEE;;;EARM;ACrpER;ADyvEE;EAnrGA;EAqrGE;EACA;ACtvEJ;ADszEE;EACE,kCAtMA;AC9mEJ;ADuzEE;;EAEE,kCAViB;AC3yErB;ADwzEE;;EAEE;ACtzEJ;ADyzEE;;EAEE;ACvzEJ;AD0zEE;;EAEE,mBAxBc;AChyElB;AD2zEE;;EAEE,mBA5BuB;AC7xE3B;AD4lEE;EACE;EACA;AC1lEJ;AD6lEE;EAII;AC9lEN;ADumEE;EACE;ACrmEJ;ADsnEE;;;EARM;ACzmER;ADgxEE;EACE,iCAtMA;ACxkEJ;ADixEE;;EAEE,kCAViB;ACrwErB;ADkxEE;;EAEE;AChxEJ;ADmxEE;;EAEE;ACjxEJ;ADoxEE;;EAEE,mBAxBc;AC1vElB;ADqxEE;;EAEE,mBA5BuB;ACvvE3B;ADsjEE;EACE;EACA;ACpjEJ;ADujEE;EAII;ACxjEN;ADikEE;EACE;AC/jEJ;ADglEE;;;EARM;ACnkER;ADqrEE;EAjsGA;ACghCF;ADqrEE;EACE;AClrEJ;ADorEI;EACE;AClrEN;ADqrEI;EACE;ACnrEN;ADurEE;EACE;ACprEJ;ADsxEE;EApzGA;EAszGE;EACA;ACnxEJ;ADu5DE;EACE;ACp5DJ;ADu5DE;EACE;ACp5DJ;ADi2EE;EAEE;EACA;AC/1EJ;ADtiCE;EAXA;ACojCF;AD+1EE;EACE;AC51EJ;ADw0EM;EAwBF;AC51EJ;ADi2EE;EACE;IAEE;EC/1EJ;AACF;ADk2EE;EACE;ACh2EJ;ADm2EE;;EAEE;ACh2EJ;ADm2EE;EACE;ACh2EJ;ADk2EI;;EAEE;ACh2EN;AD43EI;EACE,YALe;ACp3ErB;AD23EM;EACE,YAVY;AC/2EpB;AD85JE;EACE,yBAXY;ACh5JhB;AD85JE;EACE,yBAfY;AC54JhB;AD85JE;EACE,cAlBoB;ACz4JxB;AD65JI;EACE,cAhBqB;AC34J3B;AD85JI;EACE,cAnBmB;ACz4JzB;ADg6JE;EACE,cA7BqB;ACh4JzB;ADg6JE;EACE,qCA9BqB;AC/3JzB;ADi6JI;EACE,yBAhCsB;AC93J5B;ADg6JM;EACE,yBArCmB;ACz3J3B;ADi6JM;EACE,yBAxCiB;ACv3JzB;ADq6JI;EACE,cA9CsB;ACp3J5B;ADq6JI;EACE,cApDqB;AC/2J3B;ADs6JI;EACE,cAvDmB;AC72JzB;AD46JI;EACE,cAhEmB;ACz2JzB;AD26JM;;EAEE,cApEiB;ACr2JzB;AD66JI;;EAEE,yBA1EmB;ACj2JzB;AD+6JE;EACE,cA/EqB;AC71JzB;AD08II;EACE,0BALU;ACl8IhB;AD08II;EACE,0BATU;AC/7IhB;AD28II;EACE,qCAZc;AC77IpB;AD48II;EAj/DF;EACA;EACA;ACx9EF;AD0xJI;EACE,qCAJc;ACnxJpB;AD0xJI;EAx0EF;EACA;EACA;AC/8EF;ADwzII;EACE,qCAPc;AC9yIpB;ADwzII;EACE,qCAVuB;AC5yI7B;ADyzII;EACE,qCAbc;AC1yIpB;AD2zIM;EACE,0BAjBiB;ACxyIzB;AD4zIM;EACE;AC1zIR;AD+mJI;EACE,0BATY;ACnmJlB;AD+mJI;EACE,0BAZkB;ACjmJxB;ADinJM;EACE,cAhBkB;AC/lJ1B;ADknJM;EACE,cAnBiB;AC7lJzB;ADmnJM;EACE,cAtBe;AC3lJvB;ADunJM;EACE,cA7Be;ACxlJvB;AD0nJM;EACE,0BAxCiB;AChlJzB;AD2nJM;EACE,0BAtCmB;ACnlJ3B;ADs3EI;EACE;ACn3EN;ADs3EI;EACE;ACp3EN;ADu3EI;EACE;ACr3EN;ADi+EE;EACE;AC99EJ;ADi+EE;;EAEE;AC99EJ;ADi+EE;EACE;AC99EJ;ADq6EE;EA4DI;AC99EN;ADs6EE;EAwDI;AC39EN;ADu6EE;EAoDI;ACx9EN;ADw6EE;EAgDI;ACr9EN;ADw+EE;EACE;ACr+EJ;ADw+EE;;EAEE;ACr+EJ;ADw+EE;EACE;ACr+EJ;AD0hFI;EACE;ACvhFN;AD0hFI;EACE;ACxhFN;AD2hFI;EACE;ACzhFN;AD6hFE;EACE;AC1hFJ;ADgiFI;;;;;EACE;ACzhFN;AD8hFI;EACE;AC3hFN;ADmnFE;EAEE;ACjnFJ;AD3xCE;EAXA;ACyyCF;ADinFE;EACE;EACA;AC9mFJ;ADinFM;;EAGE;AChnFR;ADqnFE;;EAEE;AClnFJ;ADynFI;;;;EACE;ACnnFN;ADirFE;EACE;AC9qFJ;ADirFE;;EAEE;AC9qFJ;ADirFE;;EAEE;EACA;AC9qFJ;ADirFE;;EAEE;AC9qFJ;ADkrFI;;;;EAIE;AC/qFN;ADosFI;EACE,gBAJK;AC7rFX;ADkuFE;EACE;AC/tFJ;ADkuFE;EACE;AC/tFJ;ADkuFE;EACE;AC/tFJ;ADmuFI;EACE;AChuFN;ADmuFI;EACE;ACjuFN;ADouFI;EACE;ACluFN;ADuuFI;EACE;ACpuFN;ADuuFI;EACE;ACruFN;ADwuFI;EACE;ACtuFN;AD6wFI;EACE;AC1wFN;AD6wFI;EACE;AC3wFN;AD8wFI;EACE;AC5wFN;ADi0FE;EACE;AC9zFJ;ADyyFE;EACE;ACtyFJ;ADyyFE;;EAIE;ACzyFJ;ADiyFE;EACE;AC/xFJ;ADkyFE;;EAIE;AClyFJ;AD0xFE;EACE;ACxxFJ;AD2xFE;;EAIE;AC3xFJ;AD4zFM;;EAEE;AC1zFR;AD6zFM;;EAEE;AC3zFR;AD8zFM;EACE;AC5zFR;ADk0FI;EACE;ACh0FN;ADg3FE;EACE;AC72FJ;ADg3FE;EACE;AC72FJ;ADg3FE;EACE;AC72FJ;ADg3FE;EACE;AC72FJ;ADg3FE;EACE;AC72FJ;ADx7CE;EAXA;ACs8CF;AD62FI;EACE;AC32FN;ADi3FM;EACE;AC92FR;ADi3FM;EACE;AC/2FR;ADk3FM;EACE;ACh3FR;ADo3FI;EACE;ACl3FN;ADq3FI;EACE;ACn3FN;AD46FE;EACE,yBALmC;EAMnC;ACz6FJ;AD46FE;EACE,uBAXwB;EAYxB;ACz6FJ;AD26FI;EACE,uBAb2B;AC55FjC;AD46FI;EAl5IF;ACy+CF;ADg7FE;EACE,2CAvBmB;ACt5FvB;AD+6FI;EACE,0CA1BiB;EA2BjB;AC76FN;ADi7FE;EACE,0CAhCmB;EAiCnB;AC96FJ;ADg7FI;EACE;EACA,2CArCiB;ACz4FvB;ADk7FE;EAQI;ACt7FN;AD+9FI;EACE;AC59FN;AD+9FI;EAGE;AC/9FN;ADk+FI;EAGE;ACl+FN;ADq9FI;EACE;ACn9FN;ADs9FI;EAGE;ACt9FN;ADy9FI;EAGE;ACz9FN;AD48FI;EACE;AC18FN;AD68FI;EAGE;AC78FN;ADg9FI;EAGE;ACh9FN;ADq/FI;EAGE,uBAhBqB;ACr+F3B;ADy/FE;EAthJA;EAwhJE;ACt/FJ;ADy/FE;EACE,qCA3BoB;AC39FxB;ADokGE;EACE,qCAVqB;ACvjGzB;ADwhGE;;;EAGE;ACrhGJ;ADwhGE;EACE;ACthGJ;ADyhGE;EAGE,0CADQ;ACxhGZ;AD4gGE;;;EAGE;ACzgGJ;AD4gGE;EACE;AC1gGJ;AD6gGE;EAGE,wCADQ;AC5gGZ;ADggGE;;;EAGE;AC7/FJ;ADggGE;EACE;AC9/FJ;ADigGE;EAGE,uCADQ;AChgGZ;AD8iGI;;EACE,qCA3B2B;AC/gGjC;AD+iGI;;;EAGE,qCAlCwB;AC1gG9B;ADgjGM;EACE,qCAvCsB;ACvgG9B;ADojGI;EAGE,qCADQ;ACljGd;AD6jGM;;EAEE,qCA3DqC;AChgG7C;AD+jGQ;;EAEE,qCAhEyC;AC7/FnD;ADmkGM;EACE,iCA3EiB;EA4EjB;ACjkGR;ADskGQ;EACE,iCAjFuB;ACn/FjC;ADukGQ;EACE,iCApFoB;ACj/F9B;AD2kGE;EACE,gCAvFsB;ACj/F1B;ADilGE;EACE;EAIA;ACjlGJ;AD2lGE;EACE;ACxlGJ;AD+qGI;EAGE;AC9qGN;ADorGI;EACE;IACE;EClrGN;AACF;ADqrGI;;EAIE;ACrrGN;ADwrGI;EAGE;EACA;ACxrGN;AD2rGI;;;EAGE;EACA;ACzrGN;AD6rGM;EACE;AC3rGR;AD8rGM;;;EAGE;EACA;AC5rGR;ADisGM;EACE;AC/rGR;ADksGM;;;EAGE;EACA;AChsGR;ADosGI;EACE;EACA;AClsGN;ADqsGI;EACE;ACnsGN;ADssGI;EACE;ACpsGN;ADwsGE;EACE;ACrsGJ;ADwsGE;EACE;ACrsGJ;ADwsGE;;;EAGE;ACrsGJ;AD4uGI;EACE,YALK;ACpuGX;AD4uGI;;EAEE;ACzuGN;AD8uGI;EACE;EACA;AC3uGN;ADgvGM;EACE;AC7uGR;ADkvGI;EACE;AC/uGN;AD8wGE;EAYI;ACtxGN;ADk0GE;;EAEE,4CAJc;AC3zGlB;ADm0GI;;EAEE,yCAVY;EAWZ;ACh0GN;ADo0GE;EACE;ACj0GJ;ADm0GI;EACE;ACj0GN;ADq0GE;EACE;ACl0GJ;ADq0GE;EACE;ACl0GJ;ADs0GE;;EAEE;EACA;ACn0GJ;ADi3GM;;;;;EACE;AC12GR;AD+1GE;EACE;AC71GJ;AD41GE;EACE;AC11GJ;ADm2GM;;;;;EACE;AC71GR;ADk1GE;EACE;ACh1GJ;AD+0GE;EACE;AC70GJ;ADs1GM;;;;;EACE;ACh1GR;ADq0GE;EACE;ACn0GJ;ADk0GE;EACE;ACh0GJ;ADy0GM;;;;;EACE;ACn0GR;AD80GE;EACE;AC50GJ;ADg1GE;EACE;AC90GJ;ADg1GI;EACE;AC90GN;ADm1GE;;;;;EAGE;AC/0GJ;ADk1GE;EACE;ACh1GJ;ADq1GE;;;EAEE;ACl1GJ;AD0yGM;;;;;EACE;ACpyGR;AD+yGE;EACE;AC7yGJ;ADizGE;EACE;AC/yGJ;ADizGI;EACE;AC/yGN;ADozGE;;;;;EAGE;AChzGJ;ADmzGE;EACE;ACjzGJ;ADszGE;;;EAEE;ACnzGJ;AD2wGM;;;;;EACE;ACrwGR;ADgxGE;EACE;AC9wGJ;ADkxGE;EACE;AChxGJ;ADkxGI;EACE;AChxGN;ADqxGE;;;;;EAGE;ACjxGJ;ADoxGE;EACE;AClxGJ;ADuxGE;;;EAEE;ACpxGJ;ADy4GE;EACE;EACA;ACt4GJ;ADw4GI;EApCF;EACA;ACj2GF;ADw4GI;EAxCF;EACA;AC71GF;ADw4GI;EA5CF;EACA;ACz1GF;AD61GE;;;EAGE;AC31GJ;AD81GE;;;;;EAKE;AC51GJ;AD+1GE;EACE;AC71GJ;ADg0GE;EACE,gBA4Ee;ACz4GnB;AD+zGE;EACE,YAyEe;ACr4GnB;ADi5GI;EAzFF;IACE,gBA8Ec;ECl4GhB;;EDszGA;IACE,YA2Ec;EC93GhB;AACF;ADi7GE;EACE;AC/6GJ;ADu0IE;EACE;ACp0IJ;ADu0IE;;EAEE;ACp0IJ;AD01II;EACE,gBAJK;ACn1IX;ADs9GE;EAGE;EACA;EA35KF;ACu8DF;ADy9GE;EACE;ACt9GJ;ADhoBE;EAII;ACgoBN;AD5YE;EACE;AC8YJ;AD5YI;EAEE;AC6YN;ADzYI;EACE;AC2YN;ADxYI;EACE;EACA;AC0YN;ADvYI;EACE;ACyYN;ADrYE;EACE;ACuYJ;ADpYE;EACE;ACsYJ;ADnYE;EACE;ACqYJ;AD1VE;EACE;AC4VJ;ADzVE;EACE;AC2VJ;ADzSE;EACE;AC2SJ;ADzSI;EACE;AC2SN;ADvSE;EACE,cAZe;ACqTnB;ADtSE;;EAEE;ACwSJ;ADhSE;;;;EAIE;ACkSJ;AD/RE;;EAEE;ACiSJ;AD5RI;;EACE,mBAxCa;ACuUnB;ADm3IE;EAIE;EACA;ACp3IJ;AD23II;EAx4MF;ACghEF;ADw3II;EAx4MF;ACmhEF;ADq3II;EAx4MF;ACshEF;ADk3II;EAx4MF;ACyhEF;AD+2II;EAx4MF;AC4hEF;AD42II;EAx4MF;AC+hEF;ADy2II;EAx4MF;ACkiEF;ADs2II;EAx4MF;ACqiEF;ADm2II;EAx4MF;ACwiEF;ADg2II;EAx4MF;AC2iEF;AD61II;EAx4MF;AC8iEF;AD01II;EAx4MF;ACijEF;ADu1II;EAx4MF;ACojEF;ADo1II;EAx4MF;ACujEF;ADi1II;EAx4MF;AC0jEF;AD80II;EAx4MF;AC6jEF;AD20II;EAx4MF;ACgkEF;ADw0II;EAx4MF;ACmkEF;ADq0II;EAx4MF;ACskEF;ADk0II;EAx4MF;ACykEF;AD+zII;EAx4MF;AC4kEF;AD4zII;EAx4MF;AC+kEF;ADyzII;EAx4MF;ACklEF;ADszII;EAx4MF;ACqlEF;ADmzII;EAx4MF;ACwlEF;ADuzII;EACE;ACrzIN;ADrHE;EAEE;EACA;ACuHJ;ADrlEE;EAXA;ACmmEF;ADnHI;EACE;ACqHN;ADnHM;EACE;ACqHR;ADSE;EACE;EACA;ACPJ;AD57EI;EAs8EE;EACA;ACPN;ADYI;EACE;EACA;ACTN;ADcI;EACE;EACA;ACZN;ADgBE;EACE;ACdJ;ADkBI;EACE;AChBN;ADqBI;EAWI;EAMF;AClCN;ADsCE;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;ACpCJ;ADuCE;;EAEE;ACrCJ;AD0CE;EAEE;ACzCJ;ADtHE;EACE,WANmB;EAOnB,YAPmB;EAQnB,iBARmB;ACgIvB;ADpHI;EACE;ACsHN;ADjHI;EACE;ACmHN;AD9GI;EACE;ACgHN;AD3GI;EACE;EACA;AC6GN;ADxGI;EACE;AC0GN;ADrGI;EACE;EACA;ACuGN;ADjGM;EACE;ACmGR;AD9FM;EACE;EACA;ACgGR;AD3FM;EACE;AC6FR;ADxFM;EACE;EACA;AC0FR;AD7JE;EACE,WAPqB;EAQrB,YARqB;EASrB,iBATqB;ACwKzB;AD3JI;EACE;AC6JN;ADxJI;EACE;AC0JN;ADrJI;EACE;ACuJN;ADlJI;EACE;EACA;ACoJN;AD/II;EACE;ACiJN;AD5II;EACE;EACA;AC8IN;ADxIM;EACE;AC0IR;ADrIM;EACE;EACA;ACuIR;ADlIM;EACE;ACoIR;AD/HM;EACE;EACA;ACiIR;ADpME;EACE,WALmB;EAMnB,YANmB;EAOnB,iBAPmB;AC6MvB;ADlMI;EACE;ACoMN;AD/LI;EACE;ACiMN;AD5LI;EACE;AC8LN;ADzLI;EACE;EACA;AC2LN;ADtLI;EACE;ACwLN;ADnLI;EACE;EACA;ACqLN;AD/KM;EACE;ACiLR;AD5KM;EACE;EACA;AC8KR;ADzKM;EACE;AC2KR;ADtKM;EACE;EACA;ACwKR;ADbE;EA/vEA;EAiwEE;EACA;ACeJ;AD8GE;EAKE;EACA;AChHJ;ADgFE;EACE;AC9EJ;ADgFE;EACE;AC9EJ;ADgFE;EACE;AC9EJ;ADkFI;EAEE;ACjFN;ADcE;EACE;ACZJ;ADeE;EACE;ACbJ;ADgBE;EACE;ACdJ;ADiBE;EACE;ACfJ;ADgGI;EACE,YAxGuB;EAyGvB;AC9FN;ADkGE;EACE;AChGJ;ADqGE;EACE;ACnGJ;ADsGE;EAEE;EACA;ACrGJ;AD0CE;EACE;ACxCJ;AD0CE;EACE;ACxCJ;AD0CE;EACE;ACxCJ;AD4CI;EAEE;AC3CN;AD8BE;EACE;AC5BJ;AD8BE;EACE;AC5BJ;AD8BE;EACE;AC5BJ;ADgCI;EAEE;AC/BN;ADHE;EAXA,oCADmB;ACkBrB;ADFE;EAfA,oCADmB;ACqBrB;ADDE;EAnBA,0CADmB;ACwBrB;ADj1EE;EAXA;AC+1EF;ADp1EE;EAXA;ACk2EF;ADv1EE;EAXA;ACq2EF;AD11EE;EAXA;ACw2EF;AD71EE;EAXA;AC22EF;ADh2EE;EAXA;AC82EF;ADn2EE;EAXA;ACi3EF;ADgJE;;EAjgFA;ACq3EF;ADiJE;;EAEE;AC/IJ;ADkJE;EACE;AChJJ;ADkJI;EACE;AChJN;ADoJE;EACE;EACA;AClJJ;ADoJI;EACE;AClJN;ADsJE;EACE;ACpJJ;ADuJE;EACE;EACA;ACrJJ;ADyJI;EACE;EACA;EACA;ACvJN;AD2JE;EACE;EACA;ACzJJ;AD2JI;EACE;ACzJN;AD6JE;EACE;EACA;AC3JJ;AD6JI;EACE;AC3JN;AD8JI;EACE;AC5JN;ADgKE;;EAEE;AC9JJ;ADmNE;EAEE;EACA;AClNJ;ADh6EE;EAXA;AC86EF;ADn6EE;EAXA;ACi7EF;ADoNE;EACE;AClNJ;AD0RE;EACE;ACxRJ;AD2RE;EACE,aAdoB;AC3QxB;AD4RE;EAGE;AC5RJ;AD+RE;EACE,yBAxBoB;ACrQxB;ADiSI;EACE;AC/RN;ADkSI;EACE;AChSN;ADmSI;EACE;ACjSN;ADwSM;EACE,yBAtCW;AChQnB;AD2SM;EACE,qBA5CW;AC7PnB;AD6SI;EACE;AC3SN;ADiTE;EACE;AC/SJ;ADoTI;;EACE;ACjTN;ADoTI;;EACE;ACjTN;ADoTI;;EACE;ACjTN;AD0YE;EA3CA,yBAwCwB;EAvCxB,YAwCwB;ACpY1B;AD8VE;EACE,YAqCsB;EApCtB;AC5VJ;ADsYM;EA/2FJ;AC4+EF;ADuYM;EACE;ACrYR;ADyYI;EACE;ACvYN;AD0YI;EACE;ACxYN;AD6YI;EAlEF,yBAwBwE;EAvBxE,0BAuBiC;AC/VnC;AD0UE;EACE,0BAoB+B;EAnB/B;ACxUJ;AD6VE;EATA,oCADmB;AChVrB;ADsYI;EAtEF,yBAwBwE;EAvBxE,YAuBiC;ACpVnC;AD+TE;EACE,YAoB+B;EAnB/B;AC7TJ;ADkVE;EATA,0CADmB;ACrUrB;AD+XI;EA1EF,yBAwBwE;EAvBxE,0BAuBiC;ACzUnC;ADoTE;EACE,0BAoB+B;EAnB/B;AClTJ;ADuUE;EATA,oCADmB;AC1TrB;AD8cE;EACE;AC5cJ;AD+cE;;;;EAIE;AC7cJ;ADgdE;;EAEE;AC9cJ;ADidE;EACE;AC/cJ;ADkdE;EACE;AChdJ;ADyjBE;EACE;ACvjBJ;AD4jBE;;;EAGE;AC1jBJ;AD6jBE;EACE;AC3jBJ;AD8jBE;EACE;AC5jBJ;AD+jBE;EACE;AC7jBJ;ADgkBE;;EAEE;EACA;AC9jBJ;ADwhBE;EA2CI,+BAlCa;AC9hBnB;ADokBE;EACE,+BAvCe;AC3hBnB;ADqkBE;EAOI;ACzkBN;AD+gBE;EAqEI;ACjlBN;AD4gBE;EA8EM;ACvlBR;ADwqBE;EACE,oCAtMA;ACheJ;ADyqBE;;EAEE,kCAViB;AC7pBrB;AD0qBE;;EAEE;ACxqBJ;AD2qBE;;EAEE;ACzqBJ;AD4qBE;;EAEE,mBAxBc;AClpBlB;AD6qBE;;EAEE,mBA5BuB;AC/oB3B;AD8cE;EACE;EACA;AC5cJ;AD+cE;EAII;AChdN;ADydE;EACE;ACvdJ;ADweE;;;EARM;AC3dR;AD+jBE;EAnrGA;EAqrGE;EACA;AC7jBJ;AD6nBE;EACE,kCAtMA;ACrbJ;AD8nBE;;EAEE,kCAViB;AClnBrB;AD+nBE;;EAEE;AC7nBJ;ADgoBE;;EAEE;AC9nBJ;ADioBE;;EAEE,mBAxBc;ACvmBlB;ADkoBE;;EAEE,mBA5BuB;ACpmB3B;ADmaE;EACE;EACA;ACjaJ;ADoaE;EAII;ACraN;AD8aE;EACE;AC5aJ;AD6bE;;;EARM;AChbR;ADulBE;EACE,iCAtMA;AC/YJ;ADwlBE;;EAEE,kCAViB;AC5kBrB;ADylBE;;EAEE;ACvlBJ;AD0lBE;;EAEE;ACxlBJ;AD2lBE;;EAEE,mBAxBc;ACjkBlB;AD4lBE;;EAEE,mBA5BuB;AC9jB3B;AD6XE;EACE;EACA;AC3XJ;AD8XE;EAII;AC/XN;ADwYE;EACE;ACtYJ;ADuZE;;;EARM;AC1YR;AD4fE;EAjsGA;ACwsFF;AD6fE;EACE;AC3fJ;AD6fI;EACE;AC3fN;AD8fI;EACE;AC5fN;ADggBE;EACE;AC9fJ;ADgmBE;EApzGA;EAszGE;EACA;AC9lBJ;ADkOE;EACE;AChOJ;ADmOE;EACE;ACjOJ;AD8qBE;EAEE;EACA;AC7qBJ;ADxtFE;EAXA;ACsuFF;AD6qBE;EACE;AC3qBJ;ADupBM;EAwBF;AC5qBJ;ADirBE;EACE;IAEE;EChrBJ;AACF;ADmrBE;EACE;ACjrBJ;ADorBE;;EAEE;AClrBJ;ADqrBE;EACE;ACnrBJ;ADqrBI;;EAEE;ACnrBN;ADwvGE;EACE,+BAXY;AC3uGhB;ADyvGE;EACE,+BAfY;ACxuGhB;AD0vGE;EACE,cAlBoB;ACtuGxB;AD0vGI;EACE,cAhBqB;ACxuG3B;AD2vGI;EACE,cAnBmB;ACtuGzB;AD6vGE;EACE,cA7BqB;AC9tGzB;AD8vGE;EACE,uBA9BqB;AC9tGzB;ADgwGI;EACE,yBAhCsB;AC9tG5B;ADgwGM;EACE,yBArCmB;ACztG3B;ADiwGM;EACE,yBAxCiB;ACvtGzB;ADqwGI;EACE,cA9CsB;ACrtG5B;ADswGI;EACE,cApDqB;AChtG3B;ADuwGI;EACE,cAvDmB;AC9sGzB;AD6wGI;EACE,cAhEmB;AC3sGzB;AD6wGM;;EAEE,cApEiB;ACvsGzB;AD+wGI;;EAEE,yBA1EmB;ACnsGzB;ADixGE;EACE,cA/EqB;AChsGzB;AD6yFI;EACE,+BALU;ACtyFhB;AD8yFI;EACE,+BATU;ACnyFhB;AD+yFI;EACE,0CAZc;ACjyFpB;ADgzFI;EAj/DF;EACA;EACA;AC5zBF;AD8nGI;EACE,0CAJc;ACxnGpB;AD+nGI;EAx0EF;EACA;EACA;ACpzBF;AD6pFI;EACE,0CAPc;ACppFpB;AD8pFI;EACE,2CAVuB;AClpF7B;AD+pFI;EACE,0CAbc;AChpFpB;ADiqFM;EACE,+BAjBiB;AC9oFzB;ADkqFM;EACE;AChqFR;ADq9FI;EACE,+BATY;AC18FlB;ADs9FI;EACE,YAZkB;ACx8FxB;ADw9FM;EACE,cAhBkB;ACt8F1B;ADy9FM;EACE,cAnBiB;ACp8FzB;AD09FM;EACE,cAtBe;ACl8FvB;AD89FM;EACE,cA7Be;AC/7FvB;ADi+FM;EACE,+BAxCiB;ACv7FzB;ADk+FM;EACE,gCAtCmB;AC17F3B;AD6tBI;EACE;AC3tBN;AD8tBI;EACE;AC5tBN;AD+tBI;EACE;AC7tBN;ADy0BE;EACE;ACv0BJ;AD00BE;;EAEE;ACx0BJ;AD20BE;EACE;ACz0BJ;ADgxBE;EA4DI;ACz0BN;ADixBE;EAwDI;ACt0BN;ADkxBE;EAoDI;ACn0BN;ADmxBE;EAgDI;ACh0BN;ADy0BM;EACE,0BC3rIY;AAo3GpB;AD00BM;EACE,0BC7rIa;AAq3GrB;AD60BE;EACE;AC30BJ;AD80BE;;EAEE;AC50BJ;AD+0BE;EACE;AC70BJ;ADk4BI;EACE;ACh4BN;ADm4BI;EACE;ACj4BN;ADo4BI;EACE;ACl4BN;ADs4BE;EACE;ACp4BJ;AD04BI;;;;;EACE;ACp4BN;ADy4BI;EACE;ACv4BN;AD+9BE;EAEE;AC99BJ;AD96FE;EAXA;AC47FF;AD89BE;EACE;EACA;AC59BJ;AD+9BM;;EAGE;AC99BR;ADm+BE;;EAEE;ACj+BJ;ADw+BI;;;;EACE;ACn+BN;ADiiCE;EACE;AC/hCJ;ADkiCE;;EAEE;AChiCJ;ADmiCE;;EAEE;EACA;ACjiCJ;ADoiCE;;EAEE;ACliCJ;ADsiCI;;;;EAIE;ACpiCN;AD2lCE;EACE;ACzlCJ;AD4lCE;EACE;AC1lCJ;AD6lCE;EACE;AC3lCJ;AD+lCI;EACE;AC7lCN;ADgmCI;EACE;AC9lCN;ADimCI;EACE;AC/lCN;ADomCI;EACE;AClmCN;ADqmCI;EACE;ACnmCN;ADsmCI;EACE;ACpmCN;AD2oCI;EACE;ACzoCN;AD4oCI;EACE;AC1oCN;AD6oCI;EACE;AC3oCN;ADgsCE;EACE;AC9rCJ;ADyqCE;EACE;ACvqCJ;AD0qCE;;EAIE;AC1qCJ;ADkqCE;EACE;AChqCJ;ADmqCE;;EAIE;ACnqCJ;AD2pCE;EACE;ACzpCJ;AD4pCE;;EAIE;AC5pCJ;AD6rCM;;EAEE;AC3rCR;AD8rCM;;EAEE;AC5rCR;AD+rCM;EACE;AC7rCR;ADmsCI;EACE;ACjsCN;ADivCE;EACE;AC/uCJ;ADkvCE;EACE;AChvCJ;ADmvCE;EACE;ACjvCJ;ADovCE;EACE;AClvCJ;ADqvCE;EACE;ACnvCJ;ADljGE;EAXA;ACgkGF;ADmvCI;EACE;ACjvCN;ADuvCM;EACE;ACrvCR;ADwvCM;EACE;ACtvCR;ADyvCM;EACE;ACvvCR;AD2vCI;EACE;ACzvCN;AD4vCI;EACE;AC1vCN;ADmzCE;EACE,yBALmC;EAMnC;ACjzCJ;ADozCE;EACE,yBAXwB;EAYxB;AClzCJ;ADozCI;EACE,yBAb2B;ACryCjC;ADqzCI;EAl5IF;ACgmGF;ADyzCE;EACE,iDAvBmB;AChyCvB;ADyzCI;EACE,gDA1BiB;EA2BjB;ACvzCN;AD2zCE;EACE,gDAhCmB;EAiCnB;ACzzCJ;AD2zCI;EACE;EACA,iDArCiB;ACpxCvB;AD6zCE;EAQI;ACl0CN;AD22CI;EACE;ACz2CN;AD42CI;EAGE;AC52CN;AD+2CI;EAGE;AC/2CN;ADk2CI;EACE;ACh2CN;ADm2CI;EAGE;ACn2CN;ADs2CI;EAGE;ACt2CN;ADy1CI;EACE;ACv1CN;AD01CI;EAGE;AC11CN;AD61CI;EAGE;AC71CN;ADk4CI;EAGE,uBAhBqB;ACl3C3B;ADs4CE;EAthJA;EAwhJE;ACp4CJ;ADu4CE;EACE,0CA3BoB;AC12CxB;ADm9CE;EACE,0CAVqB;ACv8CzB;ADw6CE;;;EAGE;ACt6CJ;ADy6CE;EACE;ACv6CJ;AD06CE;EAGE,0CADQ;ACz6CZ;AD65CE;;;EAGE;AC35CJ;AD85CE;EACE;AC55CJ;AD+5CE;EAGE,wCADQ;AC95CZ;ADk5CE;;;EAGE;ACh5CJ;ADm5CE;EACE;ACj5CJ;ADo5CE;EAGE,uCADQ;ACn5CZ;ADi8CI;;EACE,0CA3B2B;ACn6CjC;ADm8CI;;;EAGE,0CAlCwB;AC/5C9B;ADq8CM;EACE,0CAvCsB;AC55C9B;ADy8CI;EAGE,2CADQ;ACx8Cd;ADm9CM;;EAEE,uBA3DqC;ACt5C7C;ADq9CQ;;EAEE,0CAhEyC;ACn5CnD;ADy9CM;EACE,sCA3EiB;EA4EjB;ACv9CR;AD49CQ;EACE,sCAjFuB;ACz4CjC;AD69CQ;EACE,sCApFoB;ACv4C9B;ADi+CE;EACE,sCAvFsB;ACx4C1B;ADw+CE;EACE;EAIA;ACz+CJ;ADm/CE;EACE;ACj/CJ;ADwkDI;EAGE;ACxkDN;AD8kDI;EACE;IACE;EC5kDN;AACF;AD+kDI;;EAIE;AC/kDN;ADklDI;EAGE;EACA;ACllDN;ADqlDI;;;EAGE;EACA;ACnlDN;ADulDM;EACE;ACrlDR;ADwlDM;;;EAGE;EACA;ACtlDR;AD2lDM;EACE;ACzlDR;AD4lDM;;;EAGE;EACA;AC1lDR;AD8lDI;EACE;EACA;AC5lDN;AD+lDI;EACE;AC7lDN;ADgmDI;EACE;AC9lDN;ADkmDE;EACE;AChmDJ;ADmmDE;EACE;ACjmDJ;ADomDE;;;EAGE;AClmDJ;ADisDE;EAYI;AC1sDN;ADsvDE;;EAEE,kDAJc;AChvDlB;ADwvDI;;EAEE,+CAVY;EAWZ;ACtvDN;AD0vDE;EACE;ACxvDJ;AD0vDI;EACE;ACxvDN;AD4vDE;EACE;AC1vDJ;AD6vDE;EACE;AC3vDJ;AD+vDE;;EAEE;EACA;AC7vDJ;AD2yDM;;;;;EACE;ACryDR;AD0xDE;EACE;ACxxDJ;ADuxDE;EACE;ACrxDJ;AD8xDM;;;;;EACE;ACxxDR;AD6wDE;EACE;AC3wDJ;AD0wDE;EACE;ACxwDJ;ADixDM;;;;;EACE;AC3wDR;ADgwDE;EACE;AC9vDJ;AD6vDE;EACE;AC3vDJ;ADowDM;;;;;EACE;AC9vDR;ADywDE;EACE;ACvwDJ;AD2wDE;EACE;ACzwDJ;AD2wDI;EACE;ACzwDN;AD8wDE;;;;;EAGE;AC1wDJ;AD6wDE;EACE;AC3wDJ;ADgxDE;;;EAEE;AC7wDJ;ADquDM;;;;;EACE;AC/tDR;AD0uDE;EACE;ACxuDJ;AD4uDE;EACE;AC1uDJ;AD4uDI;EACE;AC1uDN;AD+uDE;;;;;EAGE;AC3uDJ;AD8uDE;EACE;AC5uDJ;ADivDE;;;EAEE;AC9uDJ;ADssDM;;;;;EACE;AChsDR;AD2sDE;EACE;ACzsDJ;AD6sDE;EACE;AC3sDJ;AD6sDI;EACE;AC3sDN;ADgtDE;;;;;EAGE;AC5sDJ;AD+sDE;EACE;AC7sDJ;ADktDE;;;EAEE;AC/sDJ;ADo0DE;EACE;EACA;ACl0DJ;ADo0DI;EApCF;EACA;AC7xDF;ADo0DI;EAxCF;EACA;ACzxDF;ADo0DI;EA5CF;EACA;ACrxDF;ADyxDE;;;EAGE;ACvxDJ;AD0xDE;;;;;EAKE;ACxxDJ;AD2xDE;EACE;ACzxDJ;AD+3DE;EACE;AC73DJ;ADqxFE;EACE;ACnxFJ;ADsxFE;;EAEE;ACpxFJ;AD06DE;EAGE;EACA;EA35KF;ACk/GF;AD86DE;EACE;AC56DJ;AA9xHA;;;EAGE;EACA;EACA;EACA;AAiyHF;AA9xHA;EACE;EACA;AAiyHF;AA9xHA;EACE;EACA;AAiyHF;AA/xHE;EACE;AAiyHJ,C","file":"styles.css","sourcesContent":["/* You can add global styles to this file, and also import other style files */\r\n\r\n* {\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n  font-size: medium;\r\n}\r\n\r\nhtml,\r\nbody {\r\n  height: 100%;\r\n}\r\n\r\nbody {\r\n  margin: 0;\r\n  font-family: Roboto, \"Helvetica Neue\", sans-serif;\r\n}\r\n\r\n.hidden {\r\n  display: none;\r\n}\r\n\r\n.white {\r\n  color: #ffffff !important;\r\n  background-color: #ffffff !important;\r\n}\r\n\r\n.fill-space {\r\n  flex: 1 1 auto;\r\n}\r\n\r\n.button-text-wrapper {\r\n  margin-left: 3px;\r\n  display: inline-block !important;\r\n  vertical-align: baseline !important;\r\n}\r\n\r\n.mat-card {\r\n  border-radius: 0px !important;\r\n  height: calc(100% - (2 * 74px));\r\n  overflow-y: auto;\r\n}\r\n\r\n.margin-5 {\r\n  margin: 5px;\r\n}\r\n\r\n.margin-10 {\r\n  margin: 10px;\r\n}\r\n\r\nion-icon {\r\n  width: 24px;\r\n  height: 24px;\r\n  display: inline-block !important;\r\n  vertical-align: middle !important;\r\n}\r\n\r\n.margin-left-1 {\r\n  margin-left: 1% !important;\r\n}\r\n\r\n.margin-left-3 {\r\n  margin-left: 3% !important;\r\n}\r\n\r\n.margin-right-1 {\r\n  margin-right: 1% !important;\r\n}\r\n\r\n.margin-right-3 {\r\n  margin-right: 3% !important;\r\n}\r\n\r\n.margin-1 {\r\n  margin: 1% !important;\r\n}\r\n\r\n.margin-3 {\r\n  margin: 3% !important;\r\n}\r\n\r\n.padding-1 {\r\n  padding: 1% !important;\r\n}\r\n\r\n.padding-3 {\r\n  padding: 3% !important;\r\n}\r\n\r\na,\r\na:visited,\r\na:hover,\r\na:active {\r\n  color: inherit !important;\r\n}\r\n\r\n.underline-red {\r\n  text-decoration: underline;\r\n  text-decoration-color: #c22325;\r\n  text-underline-offset: 2px;\r\n}\r\n\r\n.underline-yellow {\r\n  text-decoration: underline;\r\n  text-decoration-color: #ffe803;\r\n  text-underline-offset: 2px;\r\n}\r\n\r\n.underline-white {\r\n  text-decoration: underline;\r\n  text-decoration-color: #ffffff;\r\n  text-underline-offset: 2px;\r\n}\r\n\r\n.mat-expansion-panel-body {\r\n  padding: 0 !important;\r\n}\r\n","/**\r\n* Generated theme by Material Theme Generator\r\n* https://materialtheme.arcsine.dev\r\n* Fork at: https://materialtheme.arcsine.dev/?c=YHBhbGV0dGU$YHByaW1hcnk$YF48IzliOWI5YiIsIj9lcjwjZTFlMWUxIiwiO2VyPCM3ZjdmN2Z$LCIlPmBePCNmZmU4MDMiLCI~ZXI8I2ZmZjhiMyIsIjtlcjwjZmZkZTAyfiwid2Fybj5gXjwjZTcwNDEyIiwiP2VyPCNmOGI0YjgiLCI7ZXI8I2RkMDIwYX4sIj9UZXh0PCMwMDAwMDAiLCI~PTwjZmFmYWZhIiwiO1RleHQ8I2ZmZmZmZiIsIjs9PCMyYzJjMmN$LCJmb250cz5bYEA8KC00fixgQDwoLTN$LGBAPCgtMn4sYEA8KC0xfixgQDxoZWFkbGluZX4sYEA8dGl0bGV$LGBAPHN1YiktMn4sYEA8c3ViKS0xfixgQDxib2R5LTJ$LGBAPGJvZHktMX4sYEA8YnV0dG9ufixgQDxjYXB0aW9ufixgQDxpbnB1dCIsInNpemU$bnVsbH1dLCJpY29uczxGaWxsZWQiLCI~bmVzcz5mYWxzZSwidmVyc2lvbj4xMX0=\r\n*/\r\n\r\n@import '~@angular/material/theming';\r\n\r\n// Include the common styles for Angular Material. We include this here so that you only\r\n// have to load a single css file for Angular Material in your app.\r\n\r\n// Fonts\r\n@import 'https://fonts.googleapis.com/icon?family=Material+Icons';\r\n@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500&display=swap');\r\n\r\n$fontConfig: (display-4: mat-typography-level(112px, 112px, 300, 'Roboto', -0.0134em),\r\n  display-3: mat-typography-level(56px, 56px, 400, 'Roboto', -0.0089em),\r\n  display-2: mat-typography-level(45px, 48px, 400, 'Roboto', 0.0000em),\r\n  display-1: mat-typography-level(34px, 40px, 400, 'Roboto', 0.0074em),\r\n  headline: mat-typography-level(24px, 32px, 400, 'Roboto', 0.0000em),\r\n  title: mat-typography-level(20px, 32px, 500, 'Roboto', 0.0075em),\r\n  subheading-2: mat-typography-level(16px, 28px, 400, 'Roboto', 0.0094em),\r\n  subheading-1: mat-typography-level(15px, 24px, 500, 'Roboto', 0.0067em),\r\n  body-2: mat-typography-level(14px, 24px, 500, 'Roboto', 0.0179em),\r\n  body-1: mat-typography-level(14px, 20px, 400, 'Roboto', 0.0179em),\r\n  button: mat-typography-level(14px, 14px, 500, 'Roboto', 0.0893em),\r\n  caption: mat-typography-level(12px, 20px, 400, 'Roboto', 0.0333em),\r\n  input: mat-typography-level(inherit, 1.125, 400, 'Roboto', 1.5px));\r\n\r\n// Foreground Elements\r\n\r\n// Light Theme Text\r\n$dark-text: #000000;\r\n$dark-primary-text: rgba($dark-text, 0.87);\r\n$dark-accent-text: rgba($dark-primary-text, 0.54);\r\n$dark-disabled-text: rgba($dark-primary-text, 0.38);\r\n$dark-dividers: rgba($dark-primary-text, 0.12);\r\n$dark-focused: rgba($dark-primary-text, 0.12);\r\n\r\n$mat-light-theme-foreground: (base: black,\r\n  divider: $dark-dividers,\r\n  dividers: $dark-dividers,\r\n  disabled: $dark-disabled-text,\r\n  disabled-button: rgba($dark-text, 0.26),\r\n  disabled-text: $dark-disabled-text,\r\n  elevation: black,\r\n  secondary-text: $dark-accent-text,\r\n  hint-text: $dark-disabled-text,\r\n  accent-text: $dark-accent-text,\r\n  icon: $dark-accent-text,\r\n  icons: $dark-accent-text,\r\n  text: $dark-primary-text,\r\n  slider-min: $dark-primary-text,\r\n  slider-off: rgba($dark-text, 0.26),\r\n  slider-off-active: $dark-disabled-text,\r\n);\r\n\r\n// Dark Theme text\r\n$light-text: #ffffff;\r\n$light-primary-text: $light-text;\r\n$light-accent-text: rgba($light-primary-text, 0.7);\r\n$light-disabled-text: rgba($light-primary-text, 0.5);\r\n$light-dividers: rgba($light-primary-text, 0.12);\r\n$light-focused: rgba($light-primary-text, 0.12);\r\n\r\n$mat-dark-theme-foreground: (base: $light-text,\r\n  divider: $light-dividers,\r\n  dividers: $light-dividers,\r\n  disabled: $light-disabled-text,\r\n  disabled-button: rgba($light-text, 0.3),\r\n  disabled-text: $light-disabled-text,\r\n  elevation: black,\r\n  hint-text: $light-disabled-text,\r\n  secondary-text: $light-accent-text,\r\n  accent-text: $light-accent-text,\r\n  icon: $light-text,\r\n  icons: $light-text,\r\n  text: $light-text,\r\n  slider-min: $light-text,\r\n  slider-off: rgba($light-text, 0.3),\r\n  slider-off-active: rgba($light-text, 0.3),\r\n);\r\n\r\n// Background config\r\n// Light bg\r\n$light-background: #fafafa;\r\n$light-bg-darker-5: darken($light-background, 5%);\r\n$light-bg-darker-10: darken($light-background, 10%);\r\n$light-bg-darker-20: darken($light-background, 20%);\r\n$light-bg-darker-30: darken($light-background, 30%);\r\n$light-bg-lighter-5: lighten($light-background, 5%);\r\n$dark-bg-tooltip: lighten(#2c2c2c, 20%);\r\n$dark-bg-alpha-4: rgba(#2c2c2c, 0.04);\r\n$dark-bg-alpha-12: rgba(#2c2c2c, 0.12);\r\n\r\n$mat-light-theme-background: (background: $light-background,\r\n  status-bar: $light-bg-darker-20,\r\n  app-bar: $light-bg-darker-5,\r\n  hover: $dark-bg-alpha-4,\r\n  card: $light-bg-lighter-5,\r\n  dialog: $light-bg-lighter-5,\r\n  tooltip: $dark-bg-tooltip,\r\n  disabled-button: $dark-bg-alpha-12,\r\n  raised-button: $light-bg-lighter-5,\r\n  focused-button: $dark-focused,\r\n  selected-button: $light-bg-darker-20,\r\n  selected-disabled-button: $light-bg-darker-30,\r\n  disabled-button-toggle: $light-bg-darker-10,\r\n  unselected-chip: $light-bg-darker-10,\r\n  disabled-list-option: $light-bg-darker-10,\r\n);\r\n\r\n// Dark bg\r\n$dark-background: #2c2c2c;\r\n$dark-bg-lighter-5: lighten($dark-background, 5%);\r\n$dark-bg-lighter-10: lighten($dark-background, 10%);\r\n$dark-bg-lighter-20: lighten($dark-background, 20%);\r\n$dark-bg-lighter-30: lighten($dark-background, 30%);\r\n$light-bg-alpha-4: rgba(#fafafa, 0.04);\r\n$light-bg-alpha-12: rgba(#fafafa, 0.12);\r\n\r\n// Background palette for dark themes.\r\n$mat-dark-theme-background: (background: $dark-background,\r\n  status-bar: $dark-bg-lighter-20,\r\n  app-bar: $dark-bg-lighter-5,\r\n  hover: $light-bg-alpha-4,\r\n  card: $dark-bg-lighter-5,\r\n  dialog: $dark-bg-lighter-5,\r\n  tooltip: $dark-bg-lighter-20,\r\n  disabled-button: $light-bg-alpha-12,\r\n  raised-button: $dark-bg-lighter-5,\r\n  focused-button: $light-focused,\r\n  selected-button: $dark-bg-lighter-20,\r\n  selected-disabled-button: $dark-bg-lighter-30,\r\n  disabled-button-toggle: $dark-bg-lighter-10,\r\n  unselected-chip: $dark-bg-lighter-20,\r\n  disabled-list-option: $dark-bg-lighter-10,\r\n);\r\n\r\n// Compute font config\r\n@include mat-core($fontConfig);\r\n\r\n// Theme Config\r\n\r\nbody {\r\n  --primary-color: #9b9b9b;\r\n  --primary-lighter-color: #e1e1e1;\r\n  --primary-darker-color: #7f7f7f;\r\n  --text-primary-color: #{$dark-primary-text};\r\n  --text-primary-lighter-color: #{$dark-primary-text};\r\n  --text-primary-darker-color: #{$light-primary-text};\r\n}\r\n\r\n$mat-primary: (main: #9b9b9b,\r\n  lighter: #e1e1e1,\r\n  darker: #7f7f7f,\r\n  200: #9b9b9b, // For slide toggle,\r\n  contrast : (main: $dark-primary-text,\r\n    lighter: $dark-primary-text,\r\n    darker: $light-primary-text,\r\n  ));\r\n$theme-primary: mat-palette($mat-primary, main, lighter, darker);\r\n\r\n\r\nbody {\r\n  --accent-color: #ffe803;\r\n  --accent-lighter-color: #fff8b3;\r\n  --accent-darker-color: #ffde02;\r\n  --text-accent-color: #{$dark-primary-text};\r\n  --text-accent-lighter-color: #{$dark-primary-text};\r\n  --text-accent-darker-color: #{$dark-primary-text};\r\n}\r\n\r\n$mat-accent: (main: #ffe803,\r\n  lighter: #fff8b3,\r\n  darker: #ffde02,\r\n  200: #ffe803, // For slide toggle,\r\n  contrast : (main: $dark-primary-text,\r\n    lighter: $dark-primary-text,\r\n    darker: $dark-primary-text,\r\n  ));\r\n$theme-accent: mat-palette($mat-accent, main, lighter, darker);\r\n\r\n\r\nbody {\r\n  --warn-color: #e70412;\r\n  --warn-lighter-color: #f8b4b8;\r\n  --warn-darker-color: #dd020a;\r\n  --text-warn-color: #{$light-primary-text};\r\n  --text-warn-lighter-color: #{$dark-primary-text};\r\n  --text-warn-darker-color: #{$light-primary-text};\r\n}\r\n\r\n$mat-warn: (main: #e70412,\r\n  lighter: #f8b4b8,\r\n  darker: #dd020a,\r\n  200: #e70412, // For slide toggle,\r\n  contrast : (main: $light-primary-text,\r\n    lighter: $dark-primary-text,\r\n    darker: $light-primary-text,\r\n  ));\r\n$theme-warn: mat-palette($mat-warn, main, lighter, darker);\r\n;\r\n\r\n$theme: mat-dark-theme($theme-primary, $theme-accent, $theme-warn);\r\n$altTheme: mat-light-theme($theme-primary, $theme-accent, $theme-warn);\r\n\r\n// Theme Init\r\n.dark-theme {\r\n  @include angular-material-theme($theme);\r\n}\r\n\r\n.theme-alternate {\r\n  @include angular-material-theme($altTheme);\r\n}\r\n\r\n// Specific component overrides, pieces that are not in line with the general theming\r\n\r\n// Handle buttons appropriately, with respect to line-height\r\n.mat-raised-button,\r\n.mat-stroked-button,\r\n.mat-flat-button {\r\n  padding: 0 1.15em;\r\n  margin: 0 .65em;\r\n  min-width: 3em;\r\n  line-height: 36.4px\r\n}\r\n\r\n.mat-standard-chip {\r\n  padding: .5em .85em;\r\n  min-height: 2.5em;\r\n}\r\n\r\n.material-icons {\r\n  font-size: 24px;\r\n  font-family: 'Material Icons', 'Material Icons';\r\n\r\n  .mat-badge-content {\r\n    font-family: 'Roboto';\r\n  }\r\n}\r\n","// File for which all imports are resolved and bundled. This is the entry-point for\n// the `@angular/material` theming Sass bundle. See `//src/material:theming_bundle`.\n\n// Import all the theming functionality.\n// We want overlays to always appear over user content, so set a baseline\n// very high z-index for the overlay container, which is where we create the new\n// stacking context for all overlays.\n$cdk-z-index-overlay-container: 1000 !default;\n$cdk-z-index-overlay: 1000 !default;\n$cdk-z-index-overlay-backdrop: 1000 !default;\n\n// Background color for all of the backdrops\n$cdk-overlay-dark-backdrop-background: rgba(0, 0, 0, 0.32) !default;\n\n// Default backdrop animation is based on the Material Design swift-ease-out.\n$backdrop-animation-duration: 400ms !default;\n$backdrop-animation-timing-function: cubic-bezier(0.25, 0.8, 0.25, 1) !default;\n\n\n@mixin cdk-overlay() {\n  .cdk-overlay-container, .cdk-global-overlay-wrapper {\n    // Disable events from being captured on the overlay container.\n    pointer-events: none;\n\n    // The container should be the size of the viewport.\n    top: 0;\n    left: 0;\n    height: 100%;\n    width: 100%;\n  }\n\n  // The overlay-container is an invisible element which contains all individual overlays.\n  .cdk-overlay-container {\n    position: fixed;\n    z-index: $cdk-z-index-overlay-container;\n\n    &:empty {\n      // Hide the element when it doesn't have any child nodes. This doesn't\n      // include overlays that have been detached, rather than disposed.\n      display: none;\n    }\n  }\n\n  // We use an extra wrapper element in order to use make the overlay itself a flex item.\n  // This makes centering the overlay easy without running into the subpixel rendering\n  // problems tied to using `transform` and without interfering with the other position\n  // strategies.\n  .cdk-global-overlay-wrapper {\n    display: flex;\n    position: absolute;\n    z-index: $cdk-z-index-overlay;\n  }\n\n  // A single overlay pane.\n  .cdk-overlay-pane {\n    // Note: it's important for this one to start off `absolute`,\n    // in order for us to be able to measure it correctly.\n    position: absolute;\n    pointer-events: auto;\n    box-sizing: border-box;\n    z-index: $cdk-z-index-overlay;\n\n    // For connected-position overlays, we set `display: flex` in\n    // order to force `max-width` and `max-height` to take effect.\n    display: flex;\n    max-width: 100%;\n    max-height: 100%;\n  }\n\n  .cdk-overlay-backdrop {\n    // TODO(jelbourn): reuse sidenav fullscreen mixin.\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n\n    z-index: $cdk-z-index-overlay-backdrop;\n    pointer-events: auto;\n    -webkit-tap-highlight-color: transparent;\n    transition: opacity $backdrop-animation-duration $backdrop-animation-timing-function;\n    opacity: 0;\n\n    &.cdk-overlay-backdrop-showing {\n      opacity: 1;\n\n      // Note that we can't import and use the `high-contrast` mixin from `_a11y.scss`, because\n      // this file will be copied to the top-level `cdk` package when putting together the files\n      // for npm. Any relative import paths we use here will become invalid once the file is copied.\n      .cdk-high-contrast-active & {\n        // In high contrast mode the rgba background will become solid\n        // so we need to fall back to making it opaque using `opacity`.\n        opacity: 0.6;\n      }\n    }\n  }\n\n  .cdk-overlay-dark-backdrop {\n    background: $cdk-overlay-dark-backdrop-background;\n  }\n\n  .cdk-overlay-transparent-backdrop {\n    // Note: as of Firefox 57, having the backdrop be `background: none` will prevent it from\n    // capturing the user's mouse scroll events. Since we also can't use something like\n    // `rgba(0, 0, 0, 0)`, we work around the inconsistency by not setting the background at\n    // all and using `opacity` to make the element transparent.\n    &, &.cdk-overlay-backdrop-showing {\n      opacity: 0;\n    }\n  }\n\n  // Overlay parent element used with the connected position strategy. Used to constrain the\n  // overlay element's size to fit within the viewport.\n  .cdk-overlay-connected-position-bounding-box {\n    position: absolute;\n    z-index: $cdk-z-index-overlay;\n\n    // We use `display: flex` on this element exclusively for centering connected overlays.\n    // When *not* centering, a top/left/bottom/right will be set which overrides the normal\n    // flex layout.\n    display: flex;\n\n    // We use the `column` direction here to avoid some flexbox issues in Edge\n    // when using the \"grow after open\" options.\n    flex-direction: column;\n\n    // Add some dimensions so the element has an `innerText` which some people depend on in tests.\n    min-width: 1px;\n    min-height: 1px;\n  }\n\n  // Used when disabling global scrolling.\n  .cdk-global-scrollblock {\n    position: fixed;\n\n    // Necessary for the content not to lose its width. Note that we're using 100%, instead of\n    // 100vw, because 100vw includes the width plus the scrollbar, whereas 100% is the width\n    // that the element had before we made it `fixed`.\n    width: 100%;\n\n    // Note: this will always add a scrollbar to whatever element it is on, which can\n    // potentially result in double scrollbars. It shouldn't be an issue, because we won't\n    // block scrolling on a page that doesn't have a scrollbar in the first place.\n    overflow-y: scroll;\n  }\n}\n\n@mixin cdk-a11y {\n  .cdk-visually-hidden {\n    border: 0;\n    clip: rect(0 0 0 0);\n    height: 1px;\n    margin: -1px;\n    overflow: hidden;\n    padding: 0;\n    position: absolute;\n    width: 1px;\n\n    // This works around a Chrome bug that can cause the tab to crash when large amounts of\n    // non-English text get wrapped: https://bugs.chromium.org/p/chromium/issues/detail?id=1201444\n    white-space: nowrap;\n\n    // Avoid browsers rendering the focus ring in some cases.\n    outline: 0;\n\n    // Avoid some cases where the browser will still render the native controls (see #9049).\n    -webkit-appearance: none;\n    -moz-appearance: none;\n  }\n}\n\n/// Emits the mixin's content nested under `$selector-context` if `$selector-context`\n/// is non-empty.\n/// @param selector-context The selector under which to nest the mixin's content.\n@mixin _cdk-optionally-nest-content($selector-context) {\n  @if ($selector-context == '') {\n    @content;\n  }\n  @else {\n    #{$selector-context} {\n      @content;\n    }\n  }\n}\n\n/// Applies styles for users in high contrast mode. Note that this only applies\n/// to Microsoft browsers. Chrome can be included by checking for the `html[hc]`\n/// attribute, however Chrome handles high contrast differently.\n///\n/// @param target Which kind of high contrast setting to target. Defaults to `active`, can be\n///    `white-on-black` or `black-on-white`.\n/// @param encapsulation Whether to emit styles for view encapsulation. Values are:\n///     * `on` - works for `Emulated`, `Native`, and `ShadowDom`\n///     * `off` - works for `None`\n///     * `any` - works for all encapsulation modes by emitting the CSS twice (default).\n@mixin cdk-high-contrast($target: active, $encapsulation: 'any') {\n  @if ($target != 'active' and $target != 'black-on-white' and $target != 'white-on-black') {\n    @error 'Unknown cdk-high-contrast value \"#{$target}\" provided. ' +\n           'Allowed values are \"active\", \"black-on-white\", and \"white-on-black\"';\n  }\n\n  @if ($encapsulation != 'on' and $encapsulation != 'off' and $encapsulation != 'any') {\n    @error 'Unknown cdk-high-contrast encapsulation \"#{$encapsulation}\" provided. ' +\n           'Allowed values are \"on\", \"off\", and \"any\"';\n  }\n\n  // If the selector context has multiple parts, such as `.section, .region`, just doing\n  // `.cdk-high-contrast-xxx #{&}` will only apply the parent selector to the first part of the\n  // context. We address this by nesting the selector context under .cdk-high-contrast.\n  @at-root {\n    $selector-context: #{&};\n\n    @if ($encapsulation != 'on') {\n      // Note that if this selector is updated, the same change has to be made inside\n      // `_overlay.scss` which can't depend on this mixin due to some infrastructure limitations.\n      .cdk-high-contrast-#{$target} {\n        @include _cdk-optionally-nest-content($selector-context) {\n          @content;\n        }\n      }\n    }\n\n    @if ($encapsulation != 'off') {\n      .cdk-high-contrast-#{$target} :host {\n        @include _cdk-optionally-nest-content($selector-context) {\n          @content;\n        }\n      }\n    }\n  }\n}\n\n// Core styles that enable monitoring autofill state of text fields.\n@mixin cdk-text-field {\n  // Keyframes that apply no styles, but allow us to monitor when an text field becomes autofilled\n  // by watching for the animation events that are fired when they start. Note: the /*!*/ comment is\n  // needed to prevent LibSass from stripping the keyframes out.\n  // Based on: https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n  @keyframes cdk-text-field-autofill-start {/*!*/}\n  @keyframes cdk-text-field-autofill-end {/*!*/}\n\n  .cdk-text-field-autofill-monitored:-webkit-autofill {\n    // Since Chrome 80 we need a 1ms delay, or the animationstart event won't fire.\n    animation: cdk-text-field-autofill-start 0s 1ms;\n  }\n\n  .cdk-text-field-autofill-monitored:not(:-webkit-autofill) {\n    // Since Chrome 80 we need a 1ms delay, or the animationstart event won't fire.\n    animation: cdk-text-field-autofill-end 0s 1ms;\n  }\n\n  // Remove the resize handle on autosizing textareas, because whatever height\n  // the user resized to will be overwritten once they start typing again.\n  textarea.cdk-textarea-autosize {\n    resize: none;\n  }\n\n  // This class is temporarily applied to the textarea when it is being measured. It is immediately\n  // removed when measuring is complete. We use `!important` rules here to make sure user-specified\n  // rules do not interfere with the measurement.\n  textarea.cdk-textarea-autosize-measuring {\n    @include _cdk-textarea-autosize-measuring-base;\n    height: auto !important;\n    overflow: hidden !important;\n  }\n\n  // Similar to the `cdk-textarea-autosize-measuring` class, but only applied on Firefox. We need\n  // to use this class, because Firefox has a bug where changing the `overflow` breaks the user's\n  // ability to undo/redo what they were typing (see #16629). This class is only scoped to Firefox,\n  // because the measurements there don't seem to be affected by the `height: 0`, whereas on other\n  // browsers they are, e.g. Chrome detects longer text and IE does't resize back to normal.\n  // Identical issue report: https://bugzilla.mozilla.org/show_bug.cgi?id=448784\n  textarea.cdk-textarea-autosize-measuring-firefox {\n    @include _cdk-textarea-autosize-measuring-base;\n    height: 0 !important;\n  }\n}\n\n@mixin _cdk-textarea-autosize-measuring-base {\n  // Having 2px top and bottom padding seems to fix a bug where Chrome gets an incorrect\n  // measurement. We just have to account for it later and subtract it off the final result.\n  padding: 2px 0 !important;\n  box-sizing: content-box !important;\n}\n\n// Used to generate UIDs for keyframes used to change the text field autofill styles.\n$cdk-text-field-autofill-color-frame-count: 0;\n\n// Mixin used to apply custom background and foreground colors to an autofilled text field.\n// Based on: https://stackoverflow.com/questions/2781549/\n// removing-input-background-colour-for-chrome-autocomplete#answer-37432260\n@mixin cdk-text-field-autofill-color($background, $foreground:'') {\n  @keyframes cdk-text-field-autofill-color-#{$cdk-text-field-autofill-color-frame-count} {\n    to {\n      background: $background;\n      @if $foreground != '' { color: $foreground; }\n    }\n  }\n\n  &:-webkit-autofill {\n    animation: cdk-text-field-autofill-color-#{$cdk-text-field-autofill-color-frame-count} both;\n  }\n\n  &.cdk-text-field-autofill-monitored:-webkit-autofill {\n    // Since Chrome 80 we need a 1ms delay for cdk-text-field-autofill-start, or the animationstart\n    // event won't fire.\n    animation: cdk-text-field-autofill-start 0s 1ms,\n               cdk-text-field-autofill-color-#{$cdk-text-field-autofill-color-frame-count} both;\n  }\n\n  $cdk-text-field-autofill-color-frame-count:\n      $cdk-text-field-autofill-color-frame-count + 1 !global;\n}\n\n\n// Core styles that can be used to apply material design treatments to any element.\n// Media queries\n// TODO(josephperrott): Change $mat-xsmall and $mat-small usages to rely on BreakpointObserver,\n$mat-xsmall: 'max-width: 599px';\n$mat-small: 'max-width: 959px';\n\n// TODO: Revisit all z-indices before beta\n// z-index master list\n\n$z-index-fab: 20 !default;\n$z-index-drawer: 100 !default;\n\n// Global constants\n$pi: 3.14159265;\n\n// Padding between input toggles and their labels\n$mat-toggle-padding: 8px !default;\n// Width and height of input toggles\n$mat-toggle-size: 20px !default;\n\n// Easing Curves\n// TODO(jelbourn): all of these need to be revisited\n\n// The default animation curves used by material design.\n$mat-linear-out-slow-in-timing-function: cubic-bezier(0, 0, 0.2, 0.1) !default;\n$mat-fast-out-slow-in-timing-function: cubic-bezier(0.4, 0, 0.2, 1) !default;\n$mat-fast-out-linear-in-timing-function: cubic-bezier(0.4, 0, 1, 1) !default;\n\n$ease-in-out-curve-function: cubic-bezier(0.35, 0, 0.25, 1) !default;\n\n$swift-ease-out-duration: 400ms !default;\n$swift-ease-out-timing-function: cubic-bezier(0.25, 0.8, 0.25, 1) !default;\n$swift-ease-out: all $swift-ease-out-duration $swift-ease-out-timing-function !default;\n\n$swift-ease-in-duration: 300ms !default;\n$swift-ease-in-timing-function: cubic-bezier(0.55, 0, 0.55, 0.2) !default;\n$swift-ease-in: all $swift-ease-in-duration $swift-ease-in-timing-function !default;\n\n$swift-ease-in-out-duration: 500ms !default;\n$swift-ease-in-out-timing-function: $ease-in-out-curve-function !default;\n$swift-ease-in-out: all $swift-ease-in-out-duration $swift-ease-in-out-timing-function !default;\n\n$swift-linear-duration: 80ms !default;\n$swift-linear-timing-function: linear !default;\n$swift-linear: all $swift-linear-duration $swift-linear-timing-function !default;\n\n\n\n// A collection of mixins and CSS classes that can be used to apply elevation to a material\n// element.\n// See: https://material.io/design/environment/elevation.html\n// Examples:\n//\n//\n// .mat-foo {\n//   @include $mat-elevation(2);\n//\n//   &:active {\n//     @include $mat-elevation(8);\n//   }\n// }\n//\n// <div id=\"external-card\" class=\"mat-elevation-z2\"><p>Some content</p></div>\n//\n// For an explanation of the design behind how elevation is implemented, see the design doc at\n// https://goo.gl/Kq0k9Z.\n\n// Colors for umbra, penumbra, and ambient shadows. As described in the design doc, each elevation\n// level is created using a set of 3 shadow values, one for umbra (the shadow representing the\n// space completely obscured by an object relative to its light source), one for penumbra (the\n// space partially obscured by an object), and one for ambient (the space which contains the object\n// itself). For a further explanation of these terms and their meanings, see\n// https://en.wikipedia.org/wiki/Umbra,_penumbra_and_antumbra.\n\n// Maps for the different shadow sets and their values within each z-space. These values were\n// created by taking a few reference shadow sets created by Google's Designers and interpolating\n// all of the values between them.\n\n@function _get-umbra-map($color, $opacity) {\n  $shadow-color: if(type-of($color) == color, rgba($color, $opacity * 0.2), $color);\n\n  @return (\n    0: '0px 0px 0px 0px #{$shadow-color}',\n    1: '0px 2px 1px -1px #{$shadow-color}',\n    2: '0px 3px 1px -2px #{$shadow-color}',\n    3: '0px 3px 3px -2px #{$shadow-color}',\n    4: '0px 2px 4px -1px #{$shadow-color}',\n    5: '0px 3px 5px -1px #{$shadow-color}',\n    6: '0px 3px 5px -1px #{$shadow-color}',\n    7: '0px 4px 5px -2px #{$shadow-color}',\n    8: '0px 5px 5px -3px #{$shadow-color}',\n    9: '0px 5px 6px -3px #{$shadow-color}',\n    10: '0px 6px 6px -3px #{$shadow-color}',\n    11: '0px 6px 7px -4px #{$shadow-color}',\n    12: '0px 7px 8px -4px #{$shadow-color}',\n    13: '0px 7px 8px -4px #{$shadow-color}',\n    14: '0px 7px 9px -4px #{$shadow-color}',\n    15: '0px 8px 9px -5px #{$shadow-color}',\n    16: '0px 8px 10px -5px #{$shadow-color}',\n    17: '0px 8px 11px -5px #{$shadow-color}',\n    18: '0px 9px 11px -5px #{$shadow-color}',\n    19: '0px 9px 12px -6px #{$shadow-color}',\n    20: '0px 10px 13px -6px #{$shadow-color}',\n    21: '0px 10px 13px -6px #{$shadow-color}',\n    22: '0px 10px 14px -6px #{$shadow-color}',\n    23: '0px 11px 14px -7px #{$shadow-color}',\n    24: '0px 11px 15px -7px #{$shadow-color}'\n  );\n}\n\n@function _get-penumbra-map($color, $opacity) {\n  $shadow-color: if(type-of($color) == color, rgba($color, $opacity * 0.14), $color);\n\n  @return (\n    0: '0px 0px 0px 0px #{$shadow-color}',\n    1: '0px 1px 1px 0px #{$shadow-color}',\n    2: '0px 2px 2px 0px #{$shadow-color}',\n    3: '0px 3px 4px 0px #{$shadow-color}',\n    4: '0px 4px 5px 0px #{$shadow-color}',\n    5: '0px 5px 8px 0px #{$shadow-color}',\n    6: '0px 6px 10px 0px #{$shadow-color}',\n    7: '0px 7px 10px 1px #{$shadow-color}',\n    8: '0px 8px 10px 1px #{$shadow-color}',\n    9: '0px 9px 12px 1px #{$shadow-color}',\n    10: '0px 10px 14px 1px #{$shadow-color}',\n    11: '0px 11px 15px 1px #{$shadow-color}',\n    12: '0px 12px 17px 2px #{$shadow-color}',\n    13: '0px 13px 19px 2px #{$shadow-color}',\n    14: '0px 14px 21px 2px #{$shadow-color}',\n    15: '0px 15px 22px 2px #{$shadow-color}',\n    16: '0px 16px 24px 2px #{$shadow-color}',\n    17: '0px 17px 26px 2px #{$shadow-color}',\n    18: '0px 18px 28px 2px #{$shadow-color}',\n    19: '0px 19px 29px 2px #{$shadow-color}',\n    20: '0px 20px 31px 3px #{$shadow-color}',\n    21: '0px 21px 33px 3px #{$shadow-color}',\n    22: '0px 22px 35px 3px #{$shadow-color}',\n    23: '0px 23px 36px 3px #{$shadow-color}',\n    24: '0px 24px 38px 3px #{$shadow-color}'\n  );\n}\n\n@function _get-ambient-map($color, $opacity) {\n  $shadow-color: if(type-of($color) == color, rgba($color, $opacity * 0.12), $color);\n\n  @return (\n    0: '0px 0px 0px 0px #{$shadow-color}',\n    1: '0px 1px 3px 0px #{$shadow-color}',\n    2: '0px 1px 5px 0px #{$shadow-color}',\n    3: '0px 1px 8px 0px #{$shadow-color}',\n    4: '0px 1px 10px 0px #{$shadow-color}',\n    5: '0px 1px 14px 0px #{$shadow-color}',\n    6: '0px 1px 18px 0px #{$shadow-color}',\n    7: '0px 2px 16px 1px #{$shadow-color}',\n    8: '0px 3px 14px 2px #{$shadow-color}',\n    9: '0px 3px 16px 2px #{$shadow-color}',\n    10: '0px 4px 18px 3px #{$shadow-color}',\n    11: '0px 4px 20px 3px #{$shadow-color}',\n    12: '0px 5px 22px 4px #{$shadow-color}',\n    13: '0px 5px 24px 4px #{$shadow-color}',\n    14: '0px 5px 26px 4px #{$shadow-color}',\n    15: '0px 6px 28px 5px #{$shadow-color}',\n    16: '0px 6px 30px 5px #{$shadow-color}',\n    17: '0px 6px 32px 5px #{$shadow-color}',\n    18: '0px 7px 34px 6px #{$shadow-color}',\n    19: '0px 7px 36px 6px #{$shadow-color}',\n    20: '0px 8px 38px 7px #{$shadow-color}',\n    21: '0px 8px 40px 7px #{$shadow-color}',\n    22: '0px 8px 42px 7px #{$shadow-color}',\n    23: '0px 9px 44px 8px #{$shadow-color}',\n    24: '0px 9px 46px 8px #{$shadow-color}'\n  );\n}\n\n// The default duration value for elevation transitions.\n$mat-elevation-transition-duration: 280ms !default;\n\n// The default easing value for elevation transitions.\n$mat-elevation-transition-timing-function: $mat-fast-out-slow-in-timing-function;\n\n// The default color for elevation shadows.\n$mat-elevation-color: black !default;\n\n// The default opacity scaling value for elevation shadows.\n$mat-elevation-opacity: 1 !default;\n\n// Prefix for elevation-related selectors.\n$mat-elevation-prefix: 'mat-elevation-z';\n\n// Applies the correct css rules to an element to give it the elevation specified by $zValue.\n// The $zValue must be between 0 and 24.\n@mixin mat-elevation($zValue, $color: $mat-elevation-color, $opacity: $mat-elevation-opacity) {\n  @if type-of($zValue) != number or not unitless($zValue) {\n    @error '$zValue must be a unitless number';\n  }\n  @if $zValue < 0 or $zValue > 24 {\n    @error '$zValue must be between 0 and 24';\n  }\n\n  box-shadow: #{map-get(_get-umbra-map($color, $opacity), $zValue)},\n              #{map-get(_get-penumbra-map($color, $opacity), $zValue)},\n              #{map-get(_get-ambient-map($color, $opacity), $zValue)};\n}\n\n// Applies the elevation to an element in a manner that allows\n// consumers to override it via the Material elevation classes.\n@mixin mat-overridable-elevation(\n    $zValue,\n    $color: $mat-elevation-color,\n    $opacity: $mat-elevation-opacity) {\n  &:not([class*='#{$mat-elevation-prefix}']) {\n    @include mat-elevation($zValue, $color, $opacity);\n  }\n}\n\n// Returns a string that can be used as the value for a transition property for elevation.\n// Calling this function directly is useful in situations where a component needs to transition\n// more than one property.\n//\n// .foo {\n//   transition: mat-elevation-transition-property-value(), opacity 100ms ease;\n// }\n@function mat-elevation-transition-property-value(\n    $duration: $mat-elevation-transition-duration,\n    $easing: $mat-elevation-transition-timing-function) {\n  @return box-shadow #{$duration} #{$easing};\n}\n\n// Applies the correct css rules needed to have an element transition between elevations.\n// This mixin should be applied to elements whose elevation values will change depending on their\n// context (e.g. when active or disabled).\n//\n// NOTE(traviskaufman): Both this mixin and the above function use default parameters so they can\n// be used in the same way by clients.\n@mixin mat-elevation-transition(\n    $duration: $mat-elevation-transition-duration,\n    $easing: $mat-elevation-transition-timing-function) {\n  transition: mat-elevation-transition-property-value($duration, $easing);\n}\n\n\n@mixin mat-private-theme-elevation($zValue, $config, $opacity: $mat-elevation-opacity) {\n  $foreground: map-get($config, foreground);\n  $elevation-color: map-get($foreground, elevation);\n  $elevation-color-or-default: if($elevation-color == null, $mat-elevation-color, $elevation-color);\n\n  @include mat-elevation($zValue, $elevation-color-or-default, $opacity);\n}\n\n@mixin mat-private-theme-overridable-elevation($zValue, $config, $opacity: $mat-elevation-opacity) {\n  $foreground: map-get($config, foreground);\n  $elevation-color: map-get($foreground, elevation);\n  $elevation-color-or-default: if($elevation-color == null, $mat-elevation-color, $elevation-color);\n\n  @include mat-overridable-elevation($zValue, $elevation-color-or-default, $opacity);\n}\n\n// If the mat-animation-noop class is present on the components root element,\n// prevent non css animations from running.\n// NOTE: Currently this mixin should only be used with components that do not\n// have any projected content.\n@mixin mat-private-animation-noop() {\n  // @at-root is used to steps outside of the hierarchy of the scss rules. This is\n  // done to allow a class to be added to be added to base of the scss nesting\n  // context.\n  // For example:\n  // .my-root {\n  //   .my-subclass {\n  //      @include mat-private-animation-noop();\n  //    }\n  // }\n  // results in:\n  // ._mat-animation-noopable.my-root .my-subclass { ... }\n  @at-root ._mat-animation-noopable#{&} {\n    transition: none;\n    animation: none;\n    @content;\n  }\n}\n\n// Color palettes from the Material Design spec.\n// See https://material.io/design/color/\n//\n// Contrast colors are hard-coded because it is too difficult (probably impossible) to\n// calculate them. These contrast colors are pulled from the public Material Design spec swatches.\n// While the contrast colors in the spec are not prescriptive, we use them for convenience.\n\n\n// @deprecated renamed to $dark-primary-text.\n// @breaking-change 8.0.0\n$black-87-opacity: rgba(black, 0.87);\n// @deprecated renamed to $light-primary-text.\n// @breaking-change 8.0.0\n$white-87-opacity: rgba(white, 0.87);\n// @deprecated use $dark-[secondary-text,disabled-text,dividers,focused] instead.\n// @breaking-change 8.0.0\n$black-12-opacity: rgba(black, 0.12);\n// @deprecated use $light-[secondary-text,disabled-text,dividers,focused] instead.\n// @breaking-change 8.0.0\n$white-12-opacity: rgba(white, 0.12);\n// @deprecated use $dark-[secondary-text,disabled-text,dividers,focused] instead.\n// @breaking-change 8.0.0\n$black-6-opacity: rgba(black, 0.06);\n// @deprecated use $light-[secondary-text,disabled-text,dividers,focused] instead.\n// @breaking-change 8.0.0\n$white-6-opacity: rgba(white, 0.06);\n\n$dark-primary-text: rgba(black, 0.87);\n$dark-secondary-text: rgba(black, 0.54);\n$dark-disabled-text: rgba(black, 0.38);\n$dark-dividers: rgba(black, 0.12);\n$dark-focused: rgba(black, 0.12);\n$light-primary-text: white;\n$light-secondary-text: rgba(white, 0.7);\n$light-disabled-text: rgba(white, 0.5);\n$light-dividers: rgba(white, 0.12);\n$light-focused: rgba(white, 0.12);\n\n$mat-red: (\n  50: #ffebee,\n  100: #ffcdd2,\n  200: #ef9a9a,\n  300: #e57373,\n  400: #ef5350,\n  500: #f44336,\n  600: #e53935,\n  700: #d32f2f,\n  800: #c62828,\n  900: #b71c1c,\n  A100: #ff8a80,\n  A200: #ff5252,\n  A400: #ff1744,\n  A700: #d50000,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $light-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$mat-pink: (\n  50: #fce4ec,\n  100: #f8bbd0,\n  200: #f48fb1,\n  300: #f06292,\n  400: #ec407a,\n  500: #e91e63,\n  600: #d81b60,\n  700: #c2185b,\n  800: #ad1457,\n  900: #880e4f,\n  A100: #ff80ab,\n  A200: #ff4081,\n  A400: #f50057,\n  A700: #c51162,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $light-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$mat-purple: (\n  50: #f3e5f5,\n  100: #e1bee7,\n  200: #ce93d8,\n  300: #ba68c8,\n  400: #ab47bc,\n  500: #9c27b0,\n  600: #8e24aa,\n  700: #7b1fa2,\n  800: #6a1b9a,\n  900: #4a148c,\n  A100: #ea80fc,\n  A200: #e040fb,\n  A400: #d500f9,\n  A700: #aa00ff,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $light-primary-text,\n    400: $light-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $light-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$mat-deep-purple: (\n  50: #ede7f6,\n  100: #d1c4e9,\n  200: #b39ddb,\n  300: #9575cd,\n  400: #7e57c2,\n  500: #673ab7,\n  600: #5e35b1,\n  700: #512da8,\n  800: #4527a0,\n  900: #311b92,\n  A100: #b388ff,\n  A200: #7c4dff,\n  A400: #651fff,\n  A700: #6200ea,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $light-primary-text,\n    400: $light-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $light-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$mat-indigo: (\n  50: #e8eaf6,\n  100: #c5cae9,\n  200: #9fa8da,\n  300: #7986cb,\n  400: #5c6bc0,\n  500: #3f51b5,\n  600: #3949ab,\n  700: #303f9f,\n  800: #283593,\n  900: #1a237e,\n  A100: #8c9eff,\n  A200: #536dfe,\n  A400: #3d5afe,\n  A700: #304ffe,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $light-primary-text,\n    400: $light-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $light-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$mat-blue: (\n  50: #e3f2fd,\n  100: #bbdefb,\n  200: #90caf9,\n  300: #64b5f6,\n  400: #42a5f5,\n  500: #2196f3,\n  600: #1e88e5,\n  700: #1976d2,\n  800: #1565c0,\n  900: #0d47a1,\n  A100: #82b1ff,\n  A200: #448aff,\n  A400: #2979ff,\n  A700: #2962ff,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $light-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$mat-light-blue: (\n  50: #e1f5fe,\n  100: #b3e5fc,\n  200: #81d4fa,\n  300: #4fc3f7,\n  400: #29b6f6,\n  500: #03a9f4,\n  600: #039be5,\n  700: #0288d1,\n  800: #0277bd,\n  900: #01579b,\n  A100: #80d8ff,\n  A200: #40c4ff,\n  A400: #00b0ff,\n  A700: #0091ea,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$mat-cyan: (\n  50: #e0f7fa,\n  100: #b2ebf2,\n  200: #80deea,\n  300: #4dd0e1,\n  400: #26c6da,\n  500: #00bcd4,\n  600: #00acc1,\n  700: #0097a7,\n  800: #00838f,\n  900: #006064,\n  A100: #84ffff,\n  A200: #18ffff,\n  A400: #00e5ff,\n  A700: #00b8d4,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$mat-teal: (\n  50: #e0f2f1,\n  100: #b2dfdb,\n  200: #80cbc4,\n  300: #4db6ac,\n  400: #26a69a,\n  500: #009688,\n  600: #00897b,\n  700: #00796b,\n  800: #00695c,\n  900: #004d40,\n  A100: #a7ffeb,\n  A200: #64ffda,\n  A400: #1de9b6,\n  A700: #00bfa5,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$mat-green: (\n  50: #e8f5e9,\n  100: #c8e6c9,\n  200: #a5d6a7,\n  300: #81c784,\n  400: #66bb6a,\n  500: #4caf50,\n  600: #43a047,\n  700: #388e3c,\n  800: #2e7d32,\n  900: #1b5e20,\n  A100: #b9f6ca,\n  A200: #69f0ae,\n  A400: #00e676,\n  A700: #00c853,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$mat-light-green: (\n  50: #f1f8e9,\n  100: #dcedc8,\n  200: #c5e1a5,\n  300: #aed581,\n  400: #9ccc65,\n  500: #8bc34a,\n  600: #7cb342,\n  700: #689f38,\n  800: #558b2f,\n  900: #33691e,\n  A100: #ccff90,\n  A200: #b2ff59,\n  A400: #76ff03,\n  A700: #64dd17,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $dark-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$mat-lime: (\n  50: #f9fbe7,\n  100: #f0f4c3,\n  200: #e6ee9c,\n  300: #dce775,\n  400: #d4e157,\n  500: #cddc39,\n  600: #c0ca33,\n  700: #afb42b,\n  800: #9e9d24,\n  900: #827717,\n  A100: #f4ff81,\n  A200: #eeff41,\n  A400: #c6ff00,\n  A700: #aeea00,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $dark-primary-text,\n    700: $dark-primary-text,\n    800: $dark-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$mat-yellow: (\n  50: #fffde7,\n  100: #fff9c4,\n  200: #fff59d,\n  300: #fff176,\n  400: #ffee58,\n  500: #ffeb3b,\n  600: #fdd835,\n  700: #fbc02d,\n  800: #f9a825,\n  900: #f57f17,\n  A100: #ffff8d,\n  A200: #ffff00,\n  A400: #ffea00,\n  A700: #ffd600,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $dark-primary-text,\n    700: $dark-primary-text,\n    800: $dark-primary-text,\n    900: $dark-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$mat-amber: (\n  50: #fff8e1,\n  100: #ffecb3,\n  200: #ffe082,\n  300: #ffd54f,\n  400: #ffca28,\n  500: #ffc107,\n  600: #ffb300,\n  700: #ffa000,\n  800: #ff8f00,\n  900: #ff6f00,\n  A100: #ffe57f,\n  A200: #ffd740,\n  A400: #ffc400,\n  A700: #ffab00,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $dark-primary-text,\n    700: $dark-primary-text,\n    800: $dark-primary-text,\n    900: $dark-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$mat-orange: (\n  50: #fff3e0,\n  100: #ffe0b2,\n  200: #ffcc80,\n  300: #ffb74d,\n  400: #ffa726,\n  500: #ff9800,\n  600: #fb8c00,\n  700: #f57c00,\n  800: #ef6c00,\n  900: #e65100,\n  A100: #ffd180,\n  A200: #ffab40,\n  A400: #ff9100,\n  A700: #ff6d00,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $dark-primary-text,\n    700: $dark-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: black,\n  )\n);\n\n$mat-deep-orange: (\n  50: #fbe9e7,\n  100: #ffccbc,\n  200: #ffab91,\n  300: #ff8a65,\n  400: #ff7043,\n  500: #ff5722,\n  600: #f4511e,\n  700: #e64a19,\n  800: #d84315,\n  900: #bf360c,\n  A100: #ff9e80,\n  A200: #ff6e40,\n  A400: #ff3d00,\n  A700: #dd2c00,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$mat-brown: (\n  50: #efebe9,\n  100: #d7ccc8,\n  200: #bcaaa4,\n  300: #a1887f,\n  400: #8d6e63,\n  500: #795548,\n  600: #6d4c41,\n  700: #5d4037,\n  800: #4e342e,\n  900: #3e2723,\n  A100: #d7ccc8,\n  A200: #bcaaa4,\n  A400: #8d6e63,\n  A700: #5d4037,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $light-primary-text,\n    400: $light-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$mat-grey: (\n  50: #fafafa,\n  100: #f5f5f5,\n  200: #eeeeee,\n  300: #e0e0e0,\n  400: #bdbdbd,\n  500: #9e9e9e,\n  600: #757575,\n  700: #616161,\n  800: #424242,\n  900: #212121,\n  A100: #ffffff,\n  A200: #eeeeee,\n  A400: #bdbdbd,\n  A700: #616161,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n// Alias for alternate spelling.\n$mat-gray: $mat-grey;\n\n$mat-blue-grey: (\n  50: #eceff1,\n  100: #cfd8dc,\n  200: #b0bec5,\n  300: #90a4ae,\n  400: #78909c,\n  500: #607d8b,\n  600: #546e7a,\n  700: #455a64,\n  800: #37474f,\n  900: #263238,\n  A100: #cfd8dc,\n  A200: #b0bec5,\n  A400: #78909c,\n  A700: #455a64,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $light-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n// Alias for alternate spelling.\n$mat-blue-gray: $mat-blue-grey;\n\n\n// Background palette for light themes.\n$mat-light-theme-background: (\n  status-bar: map-get($mat-grey, 300),\n  app-bar:    map-get($mat-grey, 100),\n  background: map-get($mat-grey, 50),\n  hover:      rgba(black, 0.04), // TODO(kara): check style with Material Design UX\n  card:       white,\n  dialog:     white,\n  disabled-button: rgba(black, 0.12),\n  raised-button: white,\n  focused-button: $dark-focused,\n  selected-button: map-get($mat-grey, 300),\n  selected-disabled-button: map-get($mat-grey, 400),\n  disabled-button-toggle: map-get($mat-grey, 200),\n  unselected-chip: map-get($mat-grey, 300),\n  disabled-list-option: map-get($mat-grey, 200),\n  tooltip: map-get($mat-grey, 700),\n);\n\n// Background palette for dark themes.\n$mat-dark-theme-background: (\n  status-bar: black,\n  app-bar:    map-get($mat-grey, 900),\n  background: #303030,\n  hover:      rgba(white, 0.04), // TODO(kara): check style with Material Design UX\n  card:       map-get($mat-grey, 800),\n  dialog:     map-get($mat-grey, 800),\n  disabled-button: rgba(white, 0.12),\n  raised-button: map-get($mat-grey, 800),\n  focused-button: $light-focused,\n  selected-button: map-get($mat-grey, 900),\n  selected-disabled-button: map-get($mat-grey, 800),\n  disabled-button-toggle: black,\n  unselected-chip: map-get($mat-grey, 700),\n  disabled-list-option: black,\n  tooltip: map-get($mat-grey, 700),\n);\n\n// Foreground palette for light themes.\n$mat-light-theme-foreground: (\n  base:              black,\n  divider:           $dark-dividers,\n  dividers:          $dark-dividers,\n  disabled:          $dark-disabled-text,\n  disabled-button:   rgba(black, 0.26),\n  disabled-text:     $dark-disabled-text,\n  elevation:         black,\n  hint-text:         $dark-disabled-text,\n  secondary-text:    $dark-secondary-text,\n  icon:              rgba(black, 0.54),\n  icons:             rgba(black, 0.54),\n  text:              rgba(black, 0.87),\n  slider-min:        rgba(black, 0.87),\n  slider-off:        rgba(black, 0.26),\n  slider-off-active: rgba(black, 0.38),\n);\n\n// Foreground palette for dark themes.\n$mat-dark-theme-foreground: (\n  base:              white,\n  divider:           $light-dividers,\n  dividers:          $light-dividers,\n  disabled:          $light-disabled-text,\n  disabled-button:   rgba(white, 0.3),\n  disabled-text:     $light-disabled-text,\n  elevation:         black,\n  hint-text:         $light-disabled-text,\n  secondary-text:    $light-secondary-text,\n  icon:              white,\n  icons:             white,\n  text:              white,\n  slider-min:        white,\n  slider-off:        rgba(white, 0.3),\n  slider-off-active: rgba(white, 0.3),\n);\n\n// Note that this file is called `private`, because the APIs in it aren't public yet.\n// Once they're made available, the code should be moved out into an `index.scss`.\n\n// Taken from mat-density with small modifications to not rely on the new Sass module\n// system, and to support arbitrary properties in a density configuration.\n// https://github.com/material-components/material-components-web/blob/master/packages/mdc-density\n\n$_mat-density-interval: 4px !default;\n$_mat-density-minimum-scale: minimum !default;\n$_mat-density-maximum-scale: maximum !default;\n$_mat-density-supported-scales: (default, minimum, maximum) !default;\n$_mat-density-default-scale: 0 !default;\n\n// Whether density should be generated at root. This will be temporarily set to `true`\n// whenever density styles for legacy themes are generated.\n$mat-private-density-generate-at-root: false;\n// Whether density styles should be generated. This will be temporarily set to `false` if\n// duplicate density styles for a legacy theme would be generated. For legacy themes,\n// we always generate the default density **only once** at root.\n$mat-private-density-generate-styles: true;\n\n// Mixin that can be used to wrap density styles of given components. The mixin will\n// move the density styles to root if the `$mat-private-density-generate-at-root` global variable\n// is set. If `$mat-private-density-generate-styles` is set to `false`, generation of density\n// styles wrapped in this mixin is skipped. This mixin exists to improve backwards compatibility\n// of the new theming API where density styles are included as part of themes. Previously,\n// density styles of components were part of their base styles. With the new API, they are\n// part of the theming system. The `<..>-theme` mixins generate density by default unless\n// the density configuration is explicitly specified as per new API. This means, that projects\n// using `<..>-theme` mixins for separate themes (like `.dark-theme`) will cause duplicate\n// density styles. This is breaking as it increases specificity of density styles. This mixin\n// provides an API to control generation of density styles so that we can ensure they are only\n// created *once* and at root.\n@mixin mat-private-density-legacy-compatibility() {\n  @if $mat-private-density-generate-styles and $mat-private-density-generate-at-root {\n    @at-root {\n      @content;\n    }\n  }\n  @else if $mat-private-density-generate-styles {\n    @content;\n  }\n}\n\n@function mat-private-density-prop-value($density-config, $density-scale, $property-name) {\n  @if (type-of($density-scale) == 'string' and\n      index($list: $_mat-density-supported-scales, $value: $density-scale) == null) {\n    @error 'mat-density: Supported density scales #{$_mat-density-supported-scales}, '  +\n      'but received #{$density-scale}.';\n  }\n\n  $value: null;\n  $property-scale-map: map-get($density-config, $property-name);\n\n  @if map-has-key($property-scale-map, $density-scale) {\n    $value: map-get($property-scale-map, $density-scale);\n  }\n  @else {\n    $value: map-get($property-scale-map, default) + $density-scale * $_mat-density-interval;\n  }\n\n  $min-value: map-get($property-scale-map, $_mat-density-minimum-scale);\n  $max-value: map-get($property-scale-map, $_mat-density-maximum-scale);\n\n  @if ($value < $min-value or $value > $max-value) {\n    @error 'mat-density: #{$property-name} must be between #{$min-value} and ' +\n      '#{$max-value} (inclusive), but received #{$value}.';\n  }\n\n  @return $value;\n}\n\n\n// Whether duplication warnings should be disabled. Warnings enabled by default.\n$mat-theme-ignore-duplication-warnings: false !default;\n\n// Whether density should be generated by default.\n$_mat-theme-generate-default-density: true !default;\n\n// Warning that will be printed if duplicated styles are generated by a theme.\n$_mat-theme-duplicate-warning: 'Read more about how style duplication can be avoided in a ' +\n  'dedicated guide. https://github.com/angular/components/blob/master/guides/duplicate-theming-styles.md';\n\n// These variable are not intended to be overridden externally. They use `!default` to\n// avoid being reset every time this file is imported.\n$_mat-theme-emitted-color: () !default;\n$_mat-theme-emitted-typography: () !default;\n$_mat-theme-emitted-density: () !default;\n\n// For a given hue in a palette, return the contrast color from the map of contrast palettes.\n// @param $palette\n// @param $hue\n@function mat-contrast($palette, $hue) {\n  @return map-get(map-get($palette, contrast), $hue);\n}\n\n\n// Creates a map of hues to colors for a theme. This is used to define a theme palette in terms\n// of the Material Design hues.\n// @param $base-palette\n// @param $default\n// @param $lighter\n// @param $darker\n// @param $text\n@function mat-palette($base-palette, $default: 500, $lighter: 100, $darker: 700, $text: $default) {\n  $result: map-merge($base-palette, (\n    default: map-get($base-palette, $default),\n    lighter: map-get($base-palette, $lighter),\n    darker: map-get($base-palette, $darker),\n    text: map-get($base-palette, $text),\n\n    default-contrast: mat-contrast($base-palette, $default),\n    lighter-contrast: mat-contrast($base-palette, $lighter),\n    darker-contrast: mat-contrast($base-palette, $darker)\n  ));\n\n  // For each hue in the palette, add a \"-contrast\" color to the map.\n  @each $hue, $color in $base-palette {\n    $result: map-merge($result, (\n      '#{$hue}-contrast': mat-contrast($base-palette, $hue)\n    ));\n  }\n\n  @return $result;\n}\n\n\n// Gets a color from a theme palette (the output of mat-palette).\n// The hue can be one of the standard values (500, A400, etc.), one of the three preconfigured\n// hues (default, lighter, darker), or any of the aforementioned prefixed with \"-contrast\".\n//\n// @param $palette The theme palette (output of mat-palette).\n// @param $hue The hue from the palette to use. If this is a value between 0 and 1, it will\n//     be treated as opacity.\n// @param $opacity The alpha channel value for the color.\n@function mat-color($palette, $hue: default, $opacity: null) {\n  // If hueKey is a number between zero and one, then it actually contains an\n  // opacity value, so recall this function with the default hue and that given opacity.\n  @if type-of($hue) == number and $hue >= 0 and $hue <= 1 {\n    @return mat-color($palette, default, $hue);\n  }\n\n  $color: map-get($palette, $hue);\n\n  @if (type-of($color) != color) {\n    // If the $color resolved to something different from a color (e.g. a CSS variable),\n    // we can't apply the opacity anyway so we return the value as is, otherwise Sass can\n    // throw an error or output something invalid.\n    @return $color;\n  }\n\n  @return rgba($color, if($opacity == null, opacity($color), $opacity));\n}\n\n// Validates the specified theme by ensuring that the optional color config defines\n// a primary, accent and warn palette. Returns the theme if no failures were found.\n@function _mat-validate-theme($theme) {\n  @if map-get($theme, color) {\n    $color: map-get($theme, color);\n    @if not map-get($color, primary) {\n      @error 'Theme does not define a valid \"primary\" palette.';\n    }\n    @else if not map-get($color, accent) {\n      @error 'Theme does not define a valid \"accent\" palette.';\n    }\n    @else if not map-get($color, warn) {\n      @error 'Theme does not define a valid \"warn\" palette.';\n    }\n  }\n  @return $theme;\n}\n\n// Creates a light-themed color configuration from the specified\n// primary, accent and warn palettes.\n@function _mat-create-light-color-config($primary, $accent, $warn: null) {\n  @return (\n    primary: $primary,\n    accent: $accent,\n    warn: if($warn != null, $warn, mat-palette($mat-red)),\n    is-dark: false,\n    foreground: $mat-light-theme-foreground,\n    background: $mat-light-theme-background,\n  );\n}\n\n// Creates a dark-themed color configuration from the specified\n// primary, accent and warn palettes.\n@function _mat-create-dark-color-config($primary, $accent, $warn: null) {\n  @return (\n    primary: $primary,\n    accent: $accent,\n    warn: if($warn != null, $warn, mat-palette($mat-red)),\n    is-dark: true,\n    foreground: $mat-dark-theme-foreground,\n    background: $mat-dark-theme-background,\n  );\n}\n\n// Creates a container object for a light theme to be given to individual component theme mixins.\n// TODO: Remove legacy API and rename `$primary` to `$config`. Currently it cannot be renamed\n// as it would break existing apps that set the parameter by name.\n@function mat-light-theme($primary, $accent: null, $warn: mat-palette($mat-red)) {\n  // This function creates a container object for the individual component theme mixins. Consumers\n  // can construct such an object by calling this function, or by building the object manually.\n  // There are two possible ways to invoke this function in order to create such an object:\n  //\n  //    (1) Passing in a map that holds optional configurations for individual parts of the\n  //        theming system. For `color` configurations, the function only expects the palettes\n  //        for `primary` and `accent` (and optionally `warn`). The function will expand the\n  //        shorthand into an actual configuration that can be consumed in `-color` mixins.\n  //    (2) Legacy pattern: Passing in the palettes as parameters. This is not as flexible\n  //        as passing in a configuration map because only the `color` system can be configured.\n  //\n  // If the legacy pattern is used, we generate a container object only with a light-themed\n  // configuration for the `color` theming part.\n  @if $accent != null {\n    @return mat-private-create-backwards-compatibility-theme(_mat-validate-theme((\n      _is-legacy-theme: true,\n      color: _mat-create-light-color-config($primary, $accent, $warn),\n    )));\n  }\n  // If the map pattern is used (1), we just pass-through the configurations for individual\n  // parts of the theming system, but update the `color` configuration if set. As explained\n  // above, the color shorthand will be expanded to an actual light-themed color configuration.\n  $result: $primary;\n  @if map-get($primary, color) {\n    $color-settings: map-get($primary, color);\n    $primary: map-get($color-settings, primary);\n    $accent: map-get($color-settings, accent);\n    $warn: map-get($color-settings, warn);\n    $result: map-merge($result, (color: _mat-create-light-color-config($primary, $accent, $warn)));\n  }\n  @return mat-private-create-backwards-compatibility-theme(_mat-validate-theme($result));\n}\n\n// Creates a container object for a dark theme to be given to individual component theme mixins.\n// TODO: Remove legacy API and rename `$primary` to `$config`. Currently it cannot be renamed\n// as it would break existing apps that set the parameter by name.\n@function mat-dark-theme($primary, $accent: null, $warn: mat-palette($mat-red)) {\n  // This function creates a container object for the individual component theme mixins. Consumers\n  // can construct such an object by calling this function, or by building the object manually.\n  // There are two possible ways to invoke this function in order to create such an object:\n  //\n  //    (1) Passing in a map that holds optional configurations for individual parts of the\n  //        theming system. For `color` configurations, the function only expects the palettes\n  //        for `primary` and `accent` (and optionally `warn`). The function will expand the\n  //        shorthand into an actual configuration that can be consumed in `-color` mixins.\n  //    (2) Legacy pattern: Passing in the palettes as parameters. This is not as flexible\n  //        as passing in a configuration map because only the `color` system can be configured.\n  //\n  // If the legacy pattern is used, we generate a container object only with a dark-themed\n  // configuration for the `color` theming part.\n  @if $accent != null {\n    @return mat-private-create-backwards-compatibility-theme(_mat-validate-theme((\n      _is-legacy-theme: true,\n      color: _mat-create-dark-color-config($primary, $accent, $warn),\n    )));\n  }\n  // If the map pattern is used (1), we just pass-through the configurations for individual\n  // parts of the theming system, but update the `color` configuration if set. As explained\n  // above, the color shorthand will be expanded to an actual dark-themed color configuration.\n  $result: $primary;\n  @if map-get($primary, color) {\n    $color-settings: map-get($primary, color);\n    $primary: map-get($color-settings, primary);\n    $accent: map-get($color-settings, accent);\n    $warn: map-get($color-settings, warn);\n    $result: map-merge($result, (color: _mat-create-dark-color-config($primary, $accent, $warn)));\n  }\n  @return mat-private-create-backwards-compatibility-theme(_mat-validate-theme($result));\n}\n\n/// Gets the color configuration from the given theme or configuration.\n@function mat-get-color-config($theme, $default: null) {\n  // If a configuration has been passed, return the config directly.\n  @if not mat-private-is-theme-object($theme) {\n    @return $theme;\n  }\n  // If the theme has been constructed through the legacy theming API, we use the theme object\n  // as color configuration instead of the dedicated `color` property. We do this because for\n  // backwards compatibility, we copied the color configuration from `$theme.color` to `$theme`.\n  // Hence developers could customize the colors at top-level and want to respect these changes\n  // TODO: Remove when legacy theming API is removed.\n  @if mat-private-is-legacy-constructed-theme($theme) {\n    @return $theme;\n  }\n  @if map-has-key($theme, color) {\n    @return map-get($theme, color);\n  }\n  @return $default;\n}\n\n/// Gets the density configuration from the given theme or configuration.\n@function mat-get-density-config($theme-or-config, $default: 0) {\n  // If a configuration has been passed, return the config directly.\n  @if not mat-private-is-theme-object($theme-or-config) {\n    @return $theme-or-config;\n  }\n  // In case a theme has been passed, extract the configuration if present,\n  // or fall back to the default density config.\n  @if map-has-key($theme-or-config, density) {\n    @return map-get($theme-or-config, density);\n  }\n  @return $default;\n}\n\n/// Gets the typography configuration from the given theme or configuration.\n/// For backwards compatibility, typography is not included by default.\n@function mat-get-typography-config($theme-or-config, $default: null) {\n  // If a configuration has been passed, return the config directly.\n  @if not mat-private-is-theme-object($theme-or-config) {\n    @return $theme-or-config;\n  }\n  // In case a theme has been passed, extract the configuration if present,\n  // or fall back to the default typography config.\n  @if (map-has-key($theme-or-config, typography)) {\n    @return map-get($theme-or-config, typography);\n  }\n  @return $default;\n}\n\n\n//\n// Private APIs\n//\n\n// Checks if configurations that have been declared in the given theme have been generated\n// before. If so, warnings will be reported. This should notify developers in case duplicate\n// styles are accidentally generated due to wrong usage of the all-theme mixins.\n//\n// Additionally, this mixin controls the default value for the density configuration. By\n// default, density styles are generated at scale zero. If the same density styles would be\n// generated a second time though, the default value will change to avoid duplicate styles.\n//\n// The mixin keeps track of all configurations in a list that is scoped to the specified\n// id. This is necessary because a given theme can be passed to multiple disjoint theme mixins\n// (e.g. `angular-material-theme` and `angular-material-mdc-theme`) without causing any\n// style duplication.\n@mixin mat-private-check-duplicate-theme-styles($theme-or-color-config, $id) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  $color-config: mat-get-color-config($theme);\n  $density-config: mat-get-density-config($theme);\n  $typography-config: mat-get-typography-config($theme);\n  // Lists of previous `color`, `density` and `typography` configurations.\n  $previous-color: map-get($_mat-theme-emitted-color, $id) or ();\n  $previous-typography: map-get($_mat-theme-emitted-typography, $id) or ();\n  $previous-density: map-get($_mat-theme-emitted-density, $id) or ();\n  // Whether duplicate legacy density styles would be generated.\n  $duplicate-legacy-density: false;\n\n  // Check if the color configuration has been generated before.\n  @if $color-config != null {\n    @if index($previous-color, $color-config) != null and\n        not $mat-theme-ignore-duplication-warnings {\n      @warn 'The same color styles are generated multiple times. ' +\n          $_mat-theme-duplicate-warning;\n    }\n    $previous-color: append($previous-color, $color-config);\n  }\n\n  // Check if the typography configuration has been generated before.\n  @if $typography-config != null {\n    @if index($previous-typography, $typography-config) != null and\n        not $mat-theme-ignore-duplication-warnings {\n      @warn 'The same typography styles are generated multiple times. ' +\n          $_mat-theme-duplicate-warning;\n    }\n    $previous-typography: append($previous-typography, $typography-config);\n  }\n\n  // Check if the density configuration has been generated before.\n  @if $density-config != null {\n    @if index($previous-density, $density-config) != null {\n      // Only report a warning if density styles would be duplicated for non-legacy theme\n      // definitions. For legacy themes, we have compatibility logic that avoids duplication\n      // of default density styles. We don't want to report a warning in those cases.\n      @if mat-private-is-legacy-constructed-theme($theme) {\n        $duplicate-legacy-density: true;\n      }\n      @else if not $mat-theme-ignore-duplication-warnings {\n        @warn 'The same density styles are generated multiple times. ' +\n           $_mat-theme-duplicate-warning;\n      }\n    }\n    $previous-density: append($previous-density, $density-config);\n  }\n\n  $_mat-theme-emitted-color: map-merge(\n      $_mat-theme-emitted-color, ($id: $previous-color)) !global;\n  $_mat-theme-emitted-density: map-merge(\n      $_mat-theme-emitted-density, ($id: $previous-density)) !global;\n  $_mat-theme-emitted-typography: map-merge(\n      $_mat-theme-emitted-typography, ($id: $previous-typography)) !global;\n\n  // Optionally, consumers of this mixin can wrap contents inside so that nested\n  // duplicate style checks do not report another warning. e.g. if developers include\n  // the `angular-material-theme` mixin twice, only the top-level duplicate styles check\n  // should report a warning. Not all individual components should report a warning too.\n  $orig-mat-theme-ignore-duplication-warnings: $mat-theme-ignore-duplication-warnings;\n  $mat-theme-ignore-duplication-warnings: true !global;\n\n  // If duplicate default density styles would be generated for a legacy constructed theme,\n  // we adjust the density generation so that no density styles are generated by default.\n  // If no default density styles have been generated yet, we ensure that the styles\n  // are generated at root. For legacy themes our goal is to generate default density\n  // styles **once** and at root. This matches the old behavior where density styles were\n  // part of the base component styles (that did not use view encapsulation).\n  // TODO: Remove this compatibility logic when the legacy theming API is removed.\n  $mat-private-density-generate-at-root: mat-private-is-legacy-constructed-theme($theme) !global;\n  $mat-private-density-generate-styles: not $duplicate-legacy-density !global;\n\n  @content;\n  $mat-theme-ignore-duplication-warnings: $orig-mat-theme-ignore-duplication-warnings !global;\n\n  $mat-private-density-generate-at-root: false !global;\n  $mat-private-density-generate-styles: true !global;\n}\n\n// Checks whether the given value resolves to a theme object. Theme objects are always\n// of type `map` and can optionally only specify `color`, `density` or `typography`.\n@function mat-private-is-theme-object($value) {\n  @return type-of($value) == 'map' and (\n    map-has-key($value, color) or\n    map-has-key($value, density) or\n    map-has-key($value, typography) or\n    length($value) == 0\n  );\n}\n\n// Checks whether a given value corresponds to a legacy constructed theme.\n@function mat-private-is-legacy-constructed-theme($value) {\n  @return type-of($value) == 'map' and map-get($value, '_is-legacy-theme');\n}\n\n// Creates a backwards compatible theme. Previously in Angular Material, theme objects\n// contained the color configuration directly. With the recent refactoring of the theming\n// system to allow for density and typography configurations, this is no longer the case.\n// To ensure that constructed themes which will be passed to custom theme mixins do not break,\n// we copy the color configuration and put its properties at the top-level of the theme object.\n// Here is an example of a pattern that should still work until it's officially marked as a\n// breaking change:\n//\n//    @mixin my-custom-component-theme($theme) {\n//      .my-comp {\n//        background-color: mat-color(map-get($theme, primary));\n//      }\n//    }\n//\n// Note that the `$theme.primary` key does usually not exist since the color configuration\n// is stored in `$theme.color` which contains a property for `primary`. This method copies\n// the map from `$theme.color` to `$theme` for backwards compatibility.\n@function mat-private-create-backwards-compatibility-theme($theme) {\n  @if not map-get($theme, color) {\n    @return $theme;\n  }\n  $color: map-get($theme, color);\n  @return map-merge($theme, $color);\n}\n\n// Gets the theme from the given value that is either already a theme, or a color configuration.\n// This handles the legacy case where developers pass a color configuration directly to the\n// theme mixin. Before we introduced the new pattern for constructing a theme, developers passed\n// the color configuration directly to the theme mixins. This can be still the case if developers\n// construct a theme manually and pass it to a theme. We support this for backwards compatibility.\n// TODO(devversion): remove this in the future. Constructing themes manually is rare,\n// and the code can be easily updated to the new API.\n@function mat-private-legacy-get-theme($theme-or-color-config) {\n  @if mat-private-is-theme-object($theme-or-color-config) {\n    @return $theme-or-color-config;\n  }\n  @return mat-private-create-backwards-compatibility-theme((\n    _is-legacy-theme: true,\n    color: $theme-or-color-config\n  ));\n}\n\n\n\n$mat-ripple-color-opacity: 0.1;\n\n@mixin mat-ripple() {\n\n  // The host element of an mat-ripple directive should always have a position of \"absolute\" or\n  // \"relative\" so that the ripples inside are correctly positioned relatively to the container.\n  .mat-ripple {\n    overflow: hidden;\n\n    // By default, every ripple container should have position: relative in favor of creating an\n    // easy API for developers using the MatRipple directive.\n    position: relative;\n\n    // Promote containers that have ripples to a new layer. We want to target `:not(:empty)`,\n    // because we don't want all ripple containers to have their own layer since they're used in a\n    // lot of places and the layer is only relevant while animating. Note that ideally we'd use\n    // the `contain` property here (see #13175), because `:empty` can be broken by having extra\n    // text inside the element, but it isn't very well supported yet.\n    &:not(:empty) {\n      transform: translateZ(0);\n    }\n  }\n\n  .mat-ripple.mat-ripple-unbounded {\n    overflow: visible;\n  }\n\n  .mat-ripple-element {\n    position: absolute;\n    border-radius: 50%;\n    pointer-events: none;\n\n    transition: opacity, transform 0ms cubic-bezier(0, 0, 0.2, 1);\n    transform: scale(0);\n\n    // In high contrast mode the ripple is opaque, causing it to obstruct the content.\n    @include cdk-high-contrast(active, off) {\n      display: none;\n    }\n  }\n}\n\n/* Colors for the ripple elements.*/\n@mixin mat-ripple-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $foreground: map-get($config, foreground);\n  $foreground-base: map-get($foreground, base);\n\n  .mat-ripple-element {\n    // If the ripple color is resolves to a color *type*, we can use it directly, otherwise\n    // (e.g. it resolves to a CSS variable) we fall back to using the color and setting an opacity.\n    @if (type-of($foreground-base) == color) {\n      background-color: rgba($foreground-base, $mat-ripple-color-opacity);\n    }\n    @else {\n      background-color: $foreground-base;\n      opacity: $mat-ripple-color-opacity;\n    }\n  }\n}\n\n@mixin mat-ripple-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-ripple') {\n    $color: mat-get-color-config($theme);\n    @if $color != null {\n      @include mat-ripple-color($color);\n    }\n  }\n}\n\n\n// This mixin ensures an element spans to fill the nearest ancestor with defined positioning.\n@mixin mat-fill {\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  position: absolute;\n}\n\n\n/// Mixin that turns on strong focus indicators.\n///\n/// @example\n///   .my-app {\n///     @include mat-strong-focus-indicators($config);\n///   }\n@mixin mat-strong-focus-indicators($config: ()) {\n  // Default focus indicator config.\n  $default-config: (\n    border-style: solid,\n    border-width: 3px,\n    border-radius: 4px,\n  );\n\n  // Merge default config with user config.\n  $config: map-merge($default-config, $config);\n  $border-style: map-get($config, border-style);\n  $border-width: map-get($config, border-width);\n  $border-radius: map-get($config, border-radius);\n\n  // Base styles for focus indicators.\n  .mat-focus-indicator::before {\n    @include mat-fill();\n    box-sizing: border-box;\n    pointer-events: none;\n    border: $border-width $border-style transparent;\n    border-radius: $border-radius;\n  }\n\n  // By default, all focus indicators are flush with the bounding box of their\n  // host element. For particular elements (listed below), default inset/offset\n  // values are necessary to ensure that the focus indicator is sufficiently\n  // contrastive and renders appropriately.\n\n  .mat-focus-indicator.mat-flat-button::before,\n  .mat-focus-indicator.mat-raised-button::before,\n  .mat-focus-indicator.mat-fab::before,\n  .mat-focus-indicator.mat-mini-fab::before,\n  .mat-focus-indicator.mat-chip::before,\n  .mat-focus-indicator.mat-sort-header-container::before {\n    margin: -($border-width + 2px);\n  }\n\n  .mat-focus-indicator.mat-stroked-button::before,\n  .mat-focus-indicator.mat-calendar-body-cell-content::before {\n    margin: -($border-width + 3px);\n  }\n\n  .mat-focus-indicator.mat-tab-link::before,\n  .mat-focus-indicator.mat-tab-label::before {\n    margin: 5px;\n  }\n\n  // Render the focus indicator on focus. Defining a pseudo element's\n  // content will cause it to render.\n\n  // Checkboxes, radios, and slide toggles render focus indicators when the\n  // associated visually-hidden input is focused.\n  .mat-checkbox-input:focus ~ .mat-focus-indicator::before,\n  .mat-radio-input:focus ~ .mat-focus-indicator::before,\n  .mat-slide-toggle-input:focus ~ .mat-slide-toggle-thumb-container .mat-focus-indicator::before,\n\n  // For options, render the focus indicator when the class .mat-active\n  // is present.\n  .mat-focus-indicator.mat-option.mat-active::before,\n\n  // For calendar cells, render the focus indicator when the parent cell is\n  // focused.\n  .mat-calendar-body-cell:focus .mat-focus-indicator::before,\n\n  // For all other components, render the focus indicator on focus.\n  .mat-focus-indicator:focus::before {\n    content: '';\n  }\n}\n\n// Mixin that applies the border color for the focus indicators.\n@mixin _mat-strong-focus-indicators-border-color($color) {\n  .mat-focus-indicator::before {\n    border-color: $color;\n  }\n}\n\n@mixin mat-strong-focus-indicators-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  @include _mat-strong-focus-indicators-border-color(mat-color(map-get($config, primary)));\n}\n\n/// Mixin that sets the color of the focus indicators.\n///\n/// @param {color|map} $theme-or-color\n///   If theme, focus indicators are set to the primary color of the theme. If\n///   color, focus indicators are set to that color.\n///\n/// @example\n///   .demo-dark-theme {\n///     @include mat-strong-focus-indicators-theme($dark-theme-map);\n///   }\n///\n/// @example\n///   .demo-red-theme {\n///     @include mat-strong-focus-indicators-theme(#f00);\n///   }\n/* stylelint-disable-next-line material/theme-mixin-api */\n@mixin mat-strong-focus-indicators-theme($theme-or-color) {\n  @if type-of($theme-or-color) != 'map' {\n    @include _mat-strong-focus-indicators-border-color($theme-or-color);\n  }\n  @else {\n    $theme: mat-private-legacy-get-theme($theme-or-color);\n    @include mat-private-check-duplicate-theme-styles($theme, 'mat-strong-focus-indicators') {\n      $color: mat-get-color-config($theme);\n      @if $color != null {\n        @include mat-strong-focus-indicators-color($color);\n      }\n    }\n  }\n}\n\n// Mixin that ensures focus indicator host elements are positioned so that the focus indicator\n// pseudo element within is positioned relative to the host. Private mixin included within\n// `mat-core`.\n@mixin mat-private-strong-focus-indicators-positioning() {\n  .mat-focus-indicator {\n    position: relative;\n  }\n}\n\n\n\n// Utility for fetching a nested value from a typography config.\n@function _mat-get-type-value($config, $level, $name) {\n  @return map-get(map-get($config, $level), $name);\n}\n\n// Gets the font size for a level inside a typography config.\n@function mat-font-size($config, $level) {\n  @return _mat-get-type-value($config, $level, font-size);\n}\n\n// Gets the line height for a level inside a typography config.\n@function mat-line-height($config, $level) {\n  @return _mat-get-type-value($config, $level, line-height);\n}\n\n// Gets the font weight for a level inside a typography config.\n@function mat-font-weight($config, $level) {\n  @return _mat-get-type-value($config, $level, font-weight);\n}\n\n// Gets the letter spacing for a level inside a typography config.\n@function mat-letter-spacing($config, $level) {\n  @return _mat-get-type-value($config, $level, letter-spacing);\n}\n\n// Gets the font-family from a typography config and removes the quotes around it.\n@function mat-font-family($config, $level: null) {\n  $font-family: map-get($config, font-family);\n\n  @if $level != null {\n    $font-family: _mat-get-type-value($config, $level, font-family);\n  }\n\n  // Guard against unquoting non-string values, because it's deprecated.\n  @return if(type-of($font-family) == string, unquote($font-family), $font-family);\n}\n\n// Outputs the shorthand `font` CSS property, based on a set of typography values. Falls back to\n// the individual properties if a value that isn't allowed in the shorthand is passed in.\n@mixin mat-typography-font-shorthand($font-size, $font-weight, $line-height, $font-family) {\n  // If any of the values are set to `inherit`, we can't use the shorthand\n  // so we fall back to passing in the individual properties.\n  @if ($font-size == inherit or\n       $font-weight == inherit or\n       $line-height == inherit or\n       $font-family == inherit or\n       $font-size == null or\n       $font-weight == null or\n       $line-height == null or\n       $font-family == null) {\n\n    font-size: $font-size;\n    font-weight: $font-weight;\n    line-height: $line-height;\n    font-family: $font-family;\n  }\n  @else {\n    // Otherwise use the shorthand `font`, because it's the least amount of bytes. Note\n    // that we need to use interpolation for `font-size/line-height` in order to prevent\n    // Sass from dividing the two values.\n    font: $font-weight #{$font-size}/#{$line-height} $font-family;\n  }\n}\n\n// Converts a typography level into CSS styles.\n@mixin mat-typography-level-to-styles($config, $level) {\n  $font-size: mat-font-size($config, $level);\n  $font-weight: mat-font-weight($config, $level);\n  $line-height: mat-line-height($config, $level);\n  $font-family: mat-font-family($config, $level);\n\n  @include mat-typography-font-shorthand($font-size, $font-weight, $line-height, $font-family);\n  letter-spacing: mat-letter-spacing($config, $level);\n}\n\n\n@mixin mat-option-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $foreground: map-get($config, foreground);\n  $background: map-get($config, background);\n  $primary: map-get($config, primary);\n  $accent: map-get($config, accent);\n  $warn: map-get($config, warn);\n\n  .mat-option {\n    color: mat-color($foreground, text);\n\n    &:hover:not(.mat-option-disabled),\n    &:focus:not(.mat-option-disabled) {\n      background: mat-color($background, hover);\n    }\n\n    // In multiple mode there is a checkbox to show that the option is selected.\n    &.mat-selected:not(.mat-option-multiple):not(.mat-option-disabled) {\n      background: mat-color($background, hover);\n    }\n\n    &.mat-active {\n      background: mat-color($background, hover);\n      color: mat-color($foreground, text);\n    }\n\n    &.mat-option-disabled {\n      color: mat-color($foreground, hint-text);\n    }\n  }\n\n  .mat-primary .mat-option.mat-selected:not(.mat-option-disabled) {\n    color: mat-color($primary, text);\n  }\n\n  .mat-accent .mat-option.mat-selected:not(.mat-option-disabled) {\n    color: mat-color($accent, text);\n  }\n\n  .mat-warn .mat-option.mat-selected:not(.mat-option-disabled) {\n    color: mat-color($warn, text);\n  }\n}\n\n@mixin mat-option-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-option {\n    font: {\n      family: mat-font-family($config);\n      size: mat-font-size($config, subheading-2);\n    }\n  }\n}\n\n@mixin _mat-option-density($config-or-theme) {}\n\n@mixin mat-option-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-option') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-option-color($color);\n    }\n    @if $density != null {\n      @include _mat-option-density($density);\n    }\n    @if $typography != null {\n      @include mat-option-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n@mixin mat-optgroup-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $foreground: map-get($config, foreground);\n\n  .mat-optgroup-label {\n    color: mat-color($foreground, secondary-text);\n  }\n\n  .mat-optgroup-disabled .mat-optgroup-label {\n    color: mat-color($foreground, hint-text);\n  }\n}\n\n@mixin mat-optgroup-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-optgroup-label {\n    @include mat-typography-level-to-styles($config, body-2);\n  }\n}\n\n@mixin _mat-optgroup-density($config-or-theme) {}\n\n@mixin mat-optgroup-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-optgroup') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-optgroup-color($color);\n    }\n    @if $density != null {\n      @include _mat-optgroup-density($density);\n    }\n    @if $typography != null {\n      @include mat-optgroup-typography($typography);\n    }\n  }\n}\n\n\n\n@mixin mat-pseudo-checkbox-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $is-dark-theme: map-get($config, is-dark);\n  $primary: map-get($config, primary);\n  $accent: map-get($config, accent);\n  $warn: map-get($config, warn);\n  $background: map-get($config, background);\n\n  // NOTE(traviskaufman): While the spec calls for translucent blacks/whites for disabled colors,\n  // this does not work well with elements layered on top of one another. To get around this we\n  // blend the colors together based on the base color and the theme background.\n  $white-30pct-opacity-on-dark: #686868;\n  $black-26pct-opacity-on-light: #b0b0b0;\n  $disabled-color: if($is-dark-theme, $white-30pct-opacity-on-dark, $black-26pct-opacity-on-light);\n  $colored-box-selector: '.mat-pseudo-checkbox-checked, .mat-pseudo-checkbox-indeterminate';\n\n  .mat-pseudo-checkbox {\n    color: mat-color(map-get($config, foreground), secondary-text);\n\n    &::after {\n      color: mat-color($background, background);\n    }\n  }\n\n  .mat-pseudo-checkbox-disabled {\n    color: $disabled-color;\n  }\n\n  .mat-primary .mat-pseudo-checkbox-checked,\n  .mat-primary .mat-pseudo-checkbox-indeterminate {\n    background: mat-color(map-get($config, primary));\n  }\n\n  // Default to the accent color. Note that the pseudo checkboxes are meant to inherit the\n  // theme from their parent, rather than implementing their own theming, which is why we\n  // don't attach to the `mat-*` classes. Also note that this needs to be below `.mat-primary`\n  // in order to allow for the color to be overwritten if the checkbox is inside a parent that\n  // has `mat-accent` and is placed inside another parent that has `mat-primary`.\n  .mat-pseudo-checkbox-checked,\n  .mat-pseudo-checkbox-indeterminate,\n  .mat-accent .mat-pseudo-checkbox-checked,\n  .mat-accent .mat-pseudo-checkbox-indeterminate {\n    background: mat-color(map-get($config, accent));\n  }\n\n  .mat-warn .mat-pseudo-checkbox-checked,\n  .mat-warn .mat-pseudo-checkbox-indeterminate {\n    background: mat-color(map-get($config, warn));\n  }\n\n  .mat-pseudo-checkbox-checked,\n  .mat-pseudo-checkbox-indeterminate {\n    &.mat-pseudo-checkbox-disabled {\n      background: $disabled-color;\n    }\n  }\n}\n\n@mixin mat-pseudo-checkbox-typography($config-or-theme) {}\n\n@mixin _mat-pseudo-checkbox-density($config-or-theme) {}\n\n@mixin mat-pseudo-checkbox-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-pseudo-checkbox') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-pseudo-checkbox-color($color);\n    }\n    @if $density != null {\n      @include _mat-pseudo-checkbox-density($density);\n    }\n    @if $typography != null {\n      @include mat-pseudo-checkbox-typography($typography);\n    }\n  }\n}\n\n\n\n// Represents a typography level from the Material design spec.\n@function mat-typography-level(\n  $font-size,\n  $line-height: $font-size,\n  $font-weight: 400,\n  $font-family: null,\n  $letter-spacing: normal) {\n\n  @return (\n    font-size: $font-size,\n    line-height: $line-height,\n    font-weight: $font-weight,\n    font-family: $font-family,\n    letter-spacing: $letter-spacing\n  );\n}\n\n// Represents a collection of typography levels.\n// Defaults come from https://material.io/guidelines/style/typography.html\n// Note: The spec doesn't mention letter spacing. The values here come from\n// eyeballing it until it looked exactly like the spec examples.\n@function mat-typography-config(\n  $font-family:   'Roboto, \"Helvetica Neue\", sans-serif',\n  $display-4:     mat-typography-level(112px, 112px, 300, $letter-spacing: -0.05em),\n  $display-3:     mat-typography-level(56px, 56px, 400, $letter-spacing: -0.02em),\n  $display-2:     mat-typography-level(45px, 48px, 400, $letter-spacing: -0.005em),\n  $display-1:     mat-typography-level(34px, 40px, 400),\n  $headline:      mat-typography-level(24px, 32px, 400),\n  $title:         mat-typography-level(20px, 32px, 500),\n  $subheading-2:  mat-typography-level(16px, 28px, 400),\n  $subheading-1:  mat-typography-level(15px, 24px, 400),\n  $body-2:        mat-typography-level(14px, 24px, 500),\n  $body-1:        mat-typography-level(14px, 20px, 400),\n  $caption:       mat-typography-level(12px, 20px, 400),\n  $button:        mat-typography-level(14px, 14px, 500),\n  // Line-height must be unit-less fraction of the font-size.\n  $input:         mat-typography-level(inherit, 1.125, 400)\n) {\n\n  // Declare an initial map with all of the levels.\n  $config: (\n    display-4:      $display-4,\n    display-3:      $display-3,\n    display-2:      $display-2,\n    display-1:      $display-1,\n    headline:       $headline,\n    title:          $title,\n    subheading-2:   $subheading-2,\n    subheading-1:   $subheading-1,\n    body-2:         $body-2,\n    body-1:         $body-1,\n    caption:        $caption,\n    button:         $button,\n    input:          $input,\n  );\n\n  // Loop through the levels and set the `font-family` of the ones that don't have one to the base.\n  // Note that Sass can't modify maps in place, which means that we need to merge and re-assign.\n  @each $key, $level in $config {\n    @if map-get($level, font-family) == null {\n      $new-level: map-merge($level, (font-family: $font-family));\n      $config: map-merge($config, ($key: $new-level));\n    }\n  }\n\n  // Add the base font family to the config.\n  @return map-merge($config, (font-family: $font-family));\n}\n\n// Whether a config is for the Material Design 2018 typography system.\n@function mat-private-typography-is-2018-config($config) {\n  @return map-get($config, headline-1) != null;\n}\n\n// Whether a config is for the Material Design 2014 typography system.\n@function mat-private-typography-is-2014-config($config) {\n  @return map-get($config, headline) != null;\n}\n\n// Given a config for either the 2014 or 2018 Material Design typography system,\n// produces a normalized typography config for the 2014 Material Design typography system.\n// 2014 - https://material.io/archive/guidelines/style/typography.html#typography-styles\n// 2018 - https://material.io/design/typography/the-type-system.html#type-scale\n@function mat-private-typography-to-2014-config($config) {\n  @if mat-private-typography-is-2018-config($config) {\n    @return mat-typography-config(\n        $display-4: map-get($config, headline-1),\n        $display-3: map-get($config, headline-2),\n        $display-2: map-get($config, headline-3),\n        $display-1: map-get($config, headline-4),\n        $headline: map-get($config, headline-5),\n        $title: map-get($config, headline-6),\n        $subheading-2: map-get($config, subtitle-1),\n        $subheading-1: map-get($config, subtitle-2),\n        $body-2: map-get($config, body-1),\n        $body-1: map-get($config, body-2),\n        $button: map-get($config, button),\n        $caption: map-get($config, caption),\n    );\n  }\n  @return $config;\n}\n\n// Given a config for either the 2014 or 2018 Material Design typography system,\n// produces a normalized typography config for the 2018 Material Design typography system.\n// 2014 - https://material.io/archive/guidelines/style/typography.html#typography-styles\n// 2018 - https://material.io/design/typography/the-type-system.html#type-scale\n@function mat-private-typography-to-2018-config($config) {\n  @if mat-private-typography-is-2014-config($config) {\n    @return (\n        headline-1: map-get($config, display-4),\n        headline-2: map-get($config, display-3),\n        headline-3: map-get($config, display-2),\n        headline-4: map-get($config, display-1),\n        headline-5: map-get($config, headline),\n        headline-6: map-get($config, title),\n        subtitle-1: map-get($config, subheading-2),\n        subtitle-2: map-get($config, subheading-1),\n        body-1: map-get($config, body-2),\n        body-2: map-get($config, body-1),\n        button: map-get($config, button),\n        caption: map-get($config, caption),\n    );\n  }\n  @return $config;\n}\n\n// Adds the base typography styles, based on a config.\n/* stylelint-disable-next-line material/theme-mixin-api */\n@mixin mat-base-typography($config, $selector: '.mat-typography') {\n  .mat-h1, .mat-headline, #{$selector} h1 {\n    @include mat-typography-level-to-styles($config, headline);\n    margin: 0 0 16px;\n  }\n\n  .mat-h2, .mat-title, #{$selector} h2 {\n    @include mat-typography-level-to-styles($config, title);\n    margin: 0 0 16px;\n  }\n\n  .mat-h3, .mat-subheading-2, #{$selector} h3 {\n    @include mat-typography-level-to-styles($config, subheading-2);\n    margin: 0 0 16px;\n  }\n\n  .mat-h4, .mat-subheading-1, #{$selector} h4 {\n    @include mat-typography-level-to-styles($config, subheading-1);\n    margin: 0 0 16px;\n  }\n\n  // Note: the spec doesn't have anything that would correspond to h5 and h6, but we add these for\n  // consistency. The font sizes come from the Chrome user agent styles which have h5 at 0.83em\n  // and h6 at 0.67em.\n  .mat-h5, #{$selector} h5 {\n    @include mat-typography-font-shorthand(\n       // calc is used here to support css variables\n      calc(#{mat-font-size($config, body-1)} * 0.83),\n      mat-font-weight($config, body-1),\n      mat-line-height($config, body-1),\n      mat-font-family($config, body-1)\n    );\n\n    margin: 0 0 12px;\n  }\n\n  .mat-h6, #{$selector} h6 {\n    @include mat-typography-font-shorthand(\n       // calc is used here to support css variables\n      calc(#{mat-font-size($config, body-1)} * 0.67),\n      mat-font-weight($config, body-1),\n      mat-line-height($config, body-1),\n      mat-font-family($config, body-1)\n    );\n\n    margin: 0 0 12px;\n  }\n\n  .mat-body-strong, .mat-body-2 {\n    @include mat-typography-level-to-styles($config, body-2);\n  }\n\n  .mat-body, .mat-body-1, #{$selector} {\n    @include mat-typography-level-to-styles($config, body-1);\n\n    p {\n      margin: 0 0 12px;\n    }\n  }\n\n  .mat-small, .mat-caption {\n    @include mat-typography-level-to-styles($config, caption);\n  }\n\n  .mat-display-4, #{$selector} .mat-display-4 {\n    @include mat-typography-level-to-styles($config, display-4);\n    margin: 0 0 56px;\n  }\n\n  .mat-display-3, #{$selector} .mat-display-3 {\n    @include mat-typography-level-to-styles($config, display-3);\n    margin: 0 0 64px;\n  }\n\n  .mat-display-2, #{$selector} .mat-display-2 {\n    @include mat-typography-level-to-styles($config, display-2);\n    margin: 0 0 64px;\n  }\n\n  .mat-display-1, #{$selector} .mat-display-1 {\n    @include mat-typography-level-to-styles($config, display-1);\n    margin: 0 0 64px;\n  }\n}\n\n\n\n\n@mixin mat-autocomplete-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $foreground: map-get($config, foreground);\n  $background: map-get($config, background);\n\n  .mat-autocomplete-panel {\n    @include mat-private-theme-overridable-elevation(4, $config);\n    background: mat-color($background, card);\n    color: mat-color($foreground, text);\n\n    // Selected options in autocompletes should not be gray, but we\n    // only want to override the background for selected options if\n    // they are *not* in hover or focus state. This change has to be\n    // made here because base option styles are shared between the\n    // autocomplete and the select.\n    .mat-option.mat-selected:not(.mat-active):not(:hover) {\n      background: mat-color($background, card);\n\n      &:not(.mat-option-disabled) {\n        color: mat-color($foreground, text);\n      }\n    }\n  }\n}\n\n@mixin mat-autocomplete-typography($config-or-theme) {}\n\n@mixin _mat-autocomplete-density($config-or-theme) {}\n\n@mixin mat-autocomplete-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-autocomplete') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-autocomplete-color($color);\n    }\n    @if $density != null {\n      @include _mat-autocomplete-density($density);\n    }\n    @if $typography != null {\n      @include mat-autocomplete-typography($typography);\n    }\n  }\n}\n\n// This contains all of the styles for the badge\n// rather than just the color/theme because of\n// no style sheet support for directives.\n\n\n\n\n\n$mat-badge-font-size: 12px;\n$mat-badge-font-weight: 600;\n$mat-badge-default-size: 22px !default;\n$mat-badge-small-size: $mat-badge-default-size - 6;\n$mat-badge-large-size: $mat-badge-default-size + 6;\n\n// Mixin for building offset given different sizes\n@mixin _mat-badge-size($size) {\n  .mat-badge-content {\n    width: $size;\n    height: $size;\n    line-height: $size;\n  }\n\n  &.mat-badge-above {\n    .mat-badge-content {\n      top: -$size / 2;\n    }\n  }\n\n  &.mat-badge-below {\n    .mat-badge-content {\n      bottom: -$size / 2;\n    }\n  }\n\n  &.mat-badge-before {\n    .mat-badge-content {\n      left: -$size;\n    }\n  }\n\n  [dir='rtl'] &.mat-badge-before {\n    .mat-badge-content {\n      left: auto;\n      right: -$size;\n    }\n  }\n\n  &.mat-badge-after {\n    .mat-badge-content {\n      right: -$size;\n    }\n  }\n\n  [dir='rtl'] &.mat-badge-after {\n    .mat-badge-content {\n      right: auto;\n      left: -$size;\n    }\n  }\n\n  &.mat-badge-overlap {\n    &.mat-badge-before {\n      .mat-badge-content {\n        left: -$size / 2;\n      }\n    }\n\n    [dir='rtl'] &.mat-badge-before {\n      .mat-badge-content {\n        left: auto;\n        right: -$size / 2;\n      }\n    }\n\n    &.mat-badge-after {\n      .mat-badge-content {\n        right: -$size / 2;\n      }\n    }\n\n    [dir='rtl'] &.mat-badge-after {\n      .mat-badge-content {\n        right: auto;\n        left: -$size / 2;\n      }\n    }\n  }\n}\n\n@mixin mat-badge-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $accent: map-get($config, accent);\n  $warn: map-get($config, warn);\n  $primary: map-get($config, primary);\n  $background: map-get($config, background);\n  $foreground: map-get($config, foreground);\n\n  .mat-badge-content {\n    color: mat-color($primary, default-contrast);\n    background: mat-color($primary);\n\n    @include cdk-high-contrast(active, off) {\n      outline: solid 1px;\n      border-radius: 0;\n    }\n  }\n\n  .mat-badge-accent {\n    .mat-badge-content {\n      background: mat-color($accent);\n      color: mat-color($accent, default-contrast);\n    }\n  }\n\n  .mat-badge-warn {\n    .mat-badge-content {\n      color: mat-color($warn, default-contrast);\n      background: mat-color($warn);\n    }\n  }\n\n  .mat-badge {\n    position: relative;\n  }\n\n  .mat-badge-hidden {\n    .mat-badge-content {\n      display: none;\n    }\n  }\n\n  .mat-badge-disabled {\n    .mat-badge-content {\n      $app-background: mat-color($background, 'background');\n      $badge-color: mat-color($foreground, disabled-button);\n\n      // The disabled color usually has some kind of opacity, but because the badge is overlayed\n      // on top of something else, it won't look good if it's opaque. If it is a color *type*,\n      // we convert it into a solid color by taking the opacity from the rgba value and using\n      // the value to determine the percentage of the background to put into foreground when\n      // mixing the colors together.\n      @if (type-of($badge-color) == color and type-of($app-background) == color) {\n        $badge-opacity: opacity($badge-color);\n        background: mix($app-background, rgba($badge-color, 1), (1 - $badge-opacity) * 100%);\n      }\n      @else {\n        background: $badge-color;\n      }\n\n      color: mat-color($foreground, disabled-text);\n    }\n  }\n\n  .mat-badge-content {\n    position: absolute;\n    text-align: center;\n    display: inline-block;\n    border-radius: 50%;\n    transition: transform 200ms ease-in-out;\n    transform: scale(0.6);\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    pointer-events: none;\n  }\n\n  .ng-animate-disabled .mat-badge-content,\n  .mat-badge-content._mat-animation-noopable {\n    transition: none;\n  }\n\n  // The active class is added after the element is added\n  // so it can animate scale to default\n  .mat-badge-content.mat-badge-active {\n    // Scale to `none` instead of `1` to avoid blurry text in some browsers.\n    transform: none;\n  }\n\n  .mat-badge-small {\n    @include _mat-badge-size($mat-badge-small-size);\n  }\n  .mat-badge-medium {\n    @include _mat-badge-size($mat-badge-default-size);\n  }\n  .mat-badge-large {\n    @include _mat-badge-size($mat-badge-large-size);\n  }\n}\n\n@mixin mat-badge-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-badge-content {\n    font-weight: $mat-badge-font-weight;\n    font-size: $mat-badge-font-size;\n    font-family: mat-font-family($config);\n  }\n\n  .mat-badge-small .mat-badge-content {\n    // Set the font size to 75% of the original.\n    font-size: $mat-badge-font-size * 0.75;\n  }\n\n  .mat-badge-large .mat-badge-content {\n    font-size: $mat-badge-font-size * 2;\n  }\n}\n\n@mixin _mat-badge-density($config-or-theme) {}\n\n@mixin mat-badge-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-badge') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-badge-color($color);\n    }\n    @if $density != null {\n      @include _mat-badge-density($density);\n    }\n    @if $typography != null {\n      @include mat-badge-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n\n@mixin mat-bottom-sheet-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $background: map-get($config, background);\n  $foreground: map-get($config, foreground);\n\n  .mat-bottom-sheet-container {\n    @include mat-private-theme-elevation(16, $config);\n    background: mat-color($background, dialog);\n    color: mat-color($foreground, text);\n  }\n}\n\n@mixin mat-bottom-sheet-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-bottom-sheet-container {\n    @include mat-typography-level-to-styles($config, body-1);\n  }\n}\n\n@mixin _mat-bottom-sheet-density($config-or-theme) {}\n\n@mixin mat-bottom-sheet-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-bottom-sheet') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-bottom-sheet-color($color);\n    }\n    @if $density != null {\n      @include _mat-bottom-sheet-density($density);\n    }\n    @if $typography != null {\n      @include mat-bottom-sheet-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n$_mat-button-ripple-opacity: 0.1;\n\n// Applies a focus style to an mat-button element for each of the supported palettes.\n@mixin _mat-button-focus-overlay-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $primary: map-get($config, primary);\n  $accent: map-get($config, accent);\n  $warn: map-get($config, warn);\n\n  &.mat-primary .mat-button-focus-overlay {\n    background-color: mat-color($primary);\n  }\n\n  &.mat-accent .mat-button-focus-overlay {\n    background-color: mat-color($accent);\n  }\n\n  &.mat-warn .mat-button-focus-overlay {\n    background-color: mat-color($warn);\n  }\n\n  &.mat-button-disabled .mat-button-focus-overlay {\n    background-color: transparent;\n  }\n}\n\n// Applies the background color for a ripple. If the value provided is not a Sass color,\n// we assume that we've been given a CSS variable. Since we can't perform alpha-blending\n// on a CSS variable, we instead add the opacity directly to the ripple element.\n@mixin _mat-button-ripple-background($palette, $hue, $opacity) {\n  $background-color: mat-color($palette, $hue, $opacity);\n  background-color: $background-color;\n  @if (type-of($background-color) != color) {\n    opacity: $opacity;\n  }\n}\n\n@mixin _mat-button-ripple-color($theme, $hue, $opacity: $_mat-button-ripple-opacity) {\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n\n  &.mat-primary .mat-ripple-element {\n    @include _mat-button-ripple-background($primary, $hue, $opacity);\n  }\n\n  &.mat-accent .mat-ripple-element {\n    @include _mat-button-ripple-background($accent, $hue, $opacity);\n  }\n\n  &.mat-warn .mat-ripple-element {\n    @include _mat-button-ripple-background($warn, $hue, $opacity);\n  }\n}\n\n// Applies a property to an mat-button element for each of the supported palettes.\n@mixin _mat-button-theme-property($theme, $property, $hue) {\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n  $background: map-get($theme, background);\n  $foreground: map-get($theme, foreground);\n\n  &.mat-primary {\n    #{$property}: mat-color($primary, $hue);\n  }\n  &.mat-accent {\n    #{$property}: mat-color($accent, $hue);\n  }\n  &.mat-warn {\n    #{$property}: mat-color($warn, $hue);\n  }\n\n  &.mat-primary, &.mat-accent, &.mat-warn, &.mat-button-disabled {\n    &.mat-button-disabled {\n      $palette: if($property == 'color', $foreground, $background);\n      #{$property}: mat-color($palette, disabled-button);\n    }\n  }\n}\n\n@mixin mat-button-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $primary: map-get($config, primary);\n  $accent: map-get($config, accent);\n  $warn: map-get($config, warn);\n  $background: map-get($config, background);\n  $foreground: map-get($config, foreground);\n\n  .mat-button, .mat-icon-button, .mat-stroked-button {\n    // Buttons without a background color should inherit the font color. This is necessary to\n    // ensure that the button is readable on custom background colors. It's wrong to always assume\n    // that those buttons are always placed inside of containers with the default background\n    // color of the theme (e.g. themed toolbars).\n    color: inherit;\n    background: transparent;\n\n    @include _mat-button-theme-property($config, 'color', text);\n    @include _mat-button-focus-overlay-color($config);\n\n    // Setup the ripple color to be based on the text color. This ensures that the ripples\n    // are matching with the current theme palette and are in contrast to the background color\n    // (e.g in themed toolbars).\n    .mat-ripple-element {\n      opacity: $_mat-button-ripple-opacity;\n      background-color: currentColor;\n    }\n  }\n\n  .mat-button-focus-overlay {\n    background: map-get($foreground, base);\n  }\n\n  // Note: this needs a bit extra specificity, because we're not guaranteed the inclusion\n  // order of the theme styles and the button reset may end up resetting this as well.\n  .mat-stroked-button:not(.mat-button-disabled) {\n    border-color: mat-color($foreground, divider);\n  }\n\n  .mat-flat-button, .mat-raised-button, .mat-fab, .mat-mini-fab {\n    // Default font and background color when not using any color palette.\n    color: mat-color($foreground, text);\n    background-color: mat-color($background, raised-button);\n\n    @include _mat-button-theme-property($config, 'color', default-contrast);\n    @include _mat-button-theme-property($config, 'background-color', default);\n    @include _mat-button-ripple-color($config, default-contrast);\n  }\n\n  .mat-stroked-button, .mat-flat-button {\n    @include mat-private-theme-overridable-elevation(0, $config);\n  }\n\n  .mat-raised-button {\n    @include mat-private-theme-overridable-elevation(2, $config);\n\n    &:not(.mat-button-disabled):active {\n      @include mat-private-theme-overridable-elevation(8, $config);\n    }\n\n    &.mat-button-disabled {\n      @include mat-private-theme-overridable-elevation(0, $config);\n    }\n  }\n\n  .mat-fab, .mat-mini-fab {\n    @include mat-private-theme-overridable-elevation(6, $config);\n\n    &:not(.mat-button-disabled):active {\n      @include mat-private-theme-overridable-elevation(12, $config);\n    }\n\n    &.mat-button-disabled {\n      @include mat-private-theme-overridable-elevation(0, $config);\n    }\n  }\n}\n\n@mixin mat-button-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-button, .mat-raised-button, .mat-icon-button, .mat-stroked-button,\n  .mat-flat-button, .mat-fab, .mat-mini-fab {\n    font: {\n      family: mat-font-family($config, button);\n      size: mat-font-size($config, button);\n      weight: mat-font-weight($config, button);\n    }\n  }\n}\n\n@mixin _mat-button-density($config-or-theme) {}\n\n@mixin mat-button-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-button') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-button-color($color);\n    }\n    @if $density != null {\n      @include _mat-button-density($density);\n    }\n    @if $typography != null {\n      @include mat-button-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n\n\n$mat-button-toggle-standard-height: 48px !default;\n// Minimum height for highest density can vary based on the content that developers\n// project into button-toggle's. We use a minimum of `24px` though because commonly\n// icons or text are displayed. Icons by default have a size of `24px`.\n$mat-button-toggle-standard-minimum-height: 24px !default;\n$mat-button-toggle-standard-maximum-height: $mat-button-toggle-standard-height !default;\n\n$mat-button-toggle-standard-density-config: (\n  height: (\n    default: $mat-button-toggle-standard-height,\n    maximum: $mat-button-toggle-standard-maximum-height,\n    minimum: $mat-button-toggle-standard-minimum-height,\n  )\n) !default;\n\n\n@mixin mat-button-toggle-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $foreground: map-get($config, foreground);\n  $background: map-get($config, background);\n  $divider-color: mat-color($foreground, divider);\n\n  .mat-button-toggle-standalone,\n  .mat-button-toggle-group {\n    @include mat-private-theme-elevation(2, $config);\n  }\n\n  .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,\n  .mat-button-toggle-group-appearance-standard {\n    box-shadow: none;\n  }\n\n  .mat-button-toggle {\n    color: mat-color($foreground, hint-text);\n\n    .mat-button-toggle-focus-overlay {\n      background-color: mat-color($background, focused-button);\n    }\n  }\n\n  .mat-button-toggle-appearance-standard {\n    color: mat-color($foreground, text);\n    background: mat-color($background, card);\n\n    .mat-button-toggle-focus-overlay {\n      background-color: mat-color($background, focused-button, 1);\n    }\n  }\n\n  .mat-button-toggle-group-appearance-standard .mat-button-toggle + .mat-button-toggle {\n    border-left: solid 1px $divider-color;\n  }\n\n  [dir='rtl'] .mat-button-toggle-group-appearance-standard .mat-button-toggle + .mat-button-toggle {\n    border-left: none;\n    border-right: solid 1px $divider-color;\n  }\n\n  .mat-button-toggle-group-appearance-standard.mat-button-toggle-vertical {\n    .mat-button-toggle + .mat-button-toggle {\n      border-left: none;\n      border-right: none;\n      border-top: solid 1px $divider-color;\n    }\n  }\n\n  .mat-button-toggle-checked {\n    background-color: mat-color($background, selected-button);\n    color: mat-color($foreground, secondary-text);\n\n    &.mat-button-toggle-appearance-standard {\n      color: mat-color($foreground, text);\n    }\n  }\n\n  .mat-button-toggle-disabled {\n    color: mat-color($foreground, disabled-button);\n    background-color: mat-color($background, disabled-button-toggle);\n\n    &.mat-button-toggle-appearance-standard {\n      background: mat-color($background, card);\n    }\n\n    &.mat-button-toggle-checked {\n      background-color: mat-color($background, selected-disabled-button);\n    }\n  }\n\n  .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,\n  .mat-button-toggle-group-appearance-standard {\n    border: solid 1px $divider-color;\n  }\n}\n\n@mixin mat-button-toggle-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-button-toggle {\n    font-family: mat-font-family($config);\n  }\n}\n\n@mixin mat-button-toggle-density($config-or-theme) {\n  $density-scale: mat-get-density-config($config-or-theme);\n  $standard-height: mat-private-density-prop-value(\n      $mat-button-toggle-standard-density-config, $density-scale, height);\n\n  @include mat-private-density-legacy-compatibility() {\n    .mat-button-toggle-appearance-standard .mat-button-toggle-label-content {\n      line-height: $standard-height;\n    }\n  }\n}\n\n@mixin mat-button-toggle-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-button-toggle') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-button-toggle-color($color);\n    }\n    @if $density != null {\n      @include mat-button-toggle-density($density);\n    }\n    @if $typography != null {\n      @include mat-button-toggle-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n\n\n@mixin mat-card-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $background: map-get($config, background);\n  $foreground: map-get($config, foreground);\n\n  .mat-card {\n    @include mat-private-theme-overridable-elevation(1, $config);\n    background: mat-color($background, card);\n    color: mat-color($foreground, text);\n\n    // Needs extra specificity to be able to override the elevation selectors.\n    &.mat-card-flat {\n      @include mat-private-theme-overridable-elevation(0, $config);\n    }\n  }\n\n  .mat-card-subtitle {\n    color: mat-color($foreground, secondary-text);\n  }\n}\n\n@mixin mat-card-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-card {\n    font-family: mat-font-family($config);\n  }\n\n  .mat-card-title {\n    font: {\n      size: mat-font-size($config, headline);\n      weight: mat-font-weight($config, title);\n    }\n  }\n\n  .mat-card-header .mat-card-title {\n    font-size: mat-font-size($config, title);\n  }\n\n  .mat-card-subtitle,\n  .mat-card-content {\n    font-size: mat-font-size($config, body-1);\n  }\n}\n\n@mixin _mat-card-density($config-or-theme) {}\n\n@mixin mat-card-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-card') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-card-color($color);\n    }\n    @if $density != null {\n      @include _mat-card-density($density);\n    }\n    @if $typography != null {\n      @include mat-card-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n@mixin mat-checkbox-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $is-dark-theme: map-get($config, is-dark);\n  $primary: map-get($config, primary);\n  $accent: map-get($config, accent);\n  $warn: map-get($config, warn);\n  $background: map-get($config, background);\n  $foreground: map-get($config, foreground);\n\n\n  // The color of the checkbox's checkmark / mixedmark.\n  $checkbox-mark-color: mat-color($background, background);\n\n  // NOTE(traviskaufman): While the spec calls for translucent blacks/whites for disabled colors,\n  // this does not work well with elements layered on top of one another. To get around this we\n  // blend the colors together based on the base color and the theme background.\n  $white-30pct-opacity-on-dark: #686868;\n  $black-26pct-opacity-on-light: #b0b0b0;\n  $disabled-color: if($is-dark-theme, $white-30pct-opacity-on-dark, $black-26pct-opacity-on-light);\n\n  .mat-checkbox-frame {\n    border-color: mat-color($foreground, secondary-text);\n  }\n\n  .mat-checkbox-checkmark {\n    fill: $checkbox-mark-color;\n  }\n\n  .mat-checkbox-checkmark-path {\n    // !important is needed here because a stroke must be set as an\n    // attribute on the SVG in order for line animation to work properly.\n    stroke: $checkbox-mark-color !important;\n  }\n\n  .mat-checkbox-mixedmark {\n    background-color: $checkbox-mark-color;\n  }\n\n  .mat-checkbox-indeterminate, .mat-checkbox-checked {\n    &.mat-primary .mat-checkbox-background {\n      background-color: mat-color($primary);\n    }\n\n    &.mat-accent .mat-checkbox-background {\n      background-color: mat-color($accent);\n    }\n\n    &.mat-warn .mat-checkbox-background {\n      background-color: mat-color($warn);\n    }\n  }\n\n  .mat-checkbox-disabled {\n    &.mat-checkbox-checked,\n    &.mat-checkbox-indeterminate {\n      .mat-checkbox-background {\n        background-color: $disabled-color;\n      }\n    }\n\n    &:not(.mat-checkbox-checked) {\n      .mat-checkbox-frame {\n        border-color: $disabled-color;\n      }\n    }\n\n    .mat-checkbox-label {\n      color: mat-color($foreground, secondary-text);\n    }\n  }\n\n  // Switch this to a solid color since we're using `opacity`\n  // to control how opaque the ripple should be.\n  .mat-checkbox .mat-ripple-element {\n    background-color: map-get(map-get($config, foreground), base);\n  }\n\n  .mat-checkbox-checked:not(.mat-checkbox-disabled),\n  .mat-checkbox:active:not(.mat-checkbox-disabled) {\n    &.mat-primary .mat-ripple-element {\n      background: mat-color($primary);\n    }\n\n    &.mat-accent .mat-ripple-element {\n      background: mat-color($accent);\n    }\n\n    &.mat-warn .mat-ripple-element {\n      background: mat-color($warn);\n    }\n  }\n}\n\n@mixin mat-checkbox-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-checkbox {\n    font-family: mat-font-family($config);\n  }\n\n  // TODO(kara): Remove this style when fixing vertical baseline\n  .mat-checkbox-layout .mat-checkbox-label {\n    line-height: mat-line-height($config, body-2);\n  }\n}\n\n@mixin _mat-checkbox-density($config-or-theme) {}\n\n@mixin mat-checkbox-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-checkbox') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-checkbox-color($color);\n    }\n    @if $density != null {\n      @include _mat-checkbox-density($density);\n    }\n    @if $typography != null {\n      @include mat-checkbox-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n\n$mat-chip-remove-font-size: 18px;\n\n@mixin _mat-chip-element-color($foreground, $background) {\n  background-color: $background;\n  color: $foreground;\n\n  .mat-chip-remove {\n    color: $foreground;\n    opacity: 0.4;\n  }\n}\n\n\n// Applies the background color for a ripple element.\n// If the color value provided is not a Sass color,\n// we assume that we've been given a CSS variable.\n// Since we can't perform alpha-blending on a CSS variable,\n// we instead add the opacity directly to the ripple element.\n@mixin _mat-chips-ripple-background($palette, $default-contrast, $opacity) {\n  $background-color: mat-color($palette, $default-contrast, $opacity);\n  background-color: $background-color;\n  @if (type-of($background-color) != color) {\n    opacity: $opacity;\n  }\n}\n\n@mixin _mat-chip-theme-color($palette) {\n  @include _mat-chip-element-color(mat-color($palette, default-contrast), mat-color($palette));\n\n  .mat-ripple-element {\n    @include _mat-chips-ripple-background($palette, default-contrast, 0.1);\n  }\n}\n\n@mixin mat-chips-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $is-dark-theme: map-get($config, is-dark);\n  $primary: map-get($config, primary);\n  $accent: map-get($config, accent);\n  $warn: map-get($config, warn);\n  $background: map-get($config, background);\n  $foreground: map-get($config, foreground);\n\n  $unselected-background: mat-color($background, unselected-chip);\n  $unselected-foreground: mat-color($foreground, text);\n\n  .mat-chip.mat-standard-chip {\n    @include _mat-chip-element-color($unselected-foreground, $unselected-background);\n\n    &:not(.mat-chip-disabled) {\n      &:active {\n        @include mat-private-theme-elevation(3, $config);\n      }\n\n      .mat-chip-remove:hover {\n        opacity: 0.54;\n      }\n    }\n\n    &.mat-chip-disabled {\n      opacity: 0.4;\n    }\n\n    &::after {\n      background: map-get($foreground, base);\n    }\n  }\n\n  .mat-chip.mat-standard-chip.mat-chip-selected {\n    &.mat-primary {\n      @include _mat-chip-theme-color($primary);\n    }\n\n    &.mat-warn {\n      @include _mat-chip-theme-color($warn);\n    }\n\n    &.mat-accent {\n      @include _mat-chip-theme-color($accent);\n    }\n  }\n}\n\n@mixin mat-chips-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-chip {\n    font-size: mat-font-size($config, body-2);\n    font-weight: mat-font-weight($config, body-2);\n\n    .mat-chip-trailing-icon.mat-icon,\n    .mat-chip-remove.mat-icon {\n      font-size: $mat-chip-remove-font-size;\n    }\n  }\n}\n\n@mixin _mat-chips-density($config-or-theme) {}\n\n@mixin mat-chips-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-chips') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-chips-color($color);\n    }\n    @if $density != null {\n      @include _mat-chips-density($density);\n    }\n    @if $typography != null {\n      @include mat-chips-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n\n@mixin mat-divider-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $foreground: map-get($config, foreground);\n\n  .mat-divider {\n    border-top-color: mat-color($foreground, divider);\n  }\n\n  .mat-divider-vertical {\n    border-right-color: mat-color($foreground, divider);\n  }\n}\n\n@mixin mat-divider-typography($config-or-theme) {}\n\n@mixin _mat-divider-density($config-or-theme) {}\n\n@mixin mat-divider-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-divider') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-divider-color($color);\n    }\n    @if $density != null {\n      @include _mat-divider-density($density);\n    }\n    @if $typography != null {\n      @include mat-divider-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n@mixin mat-table-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $background: map-get($config, background);\n  $foreground: map-get($config, foreground);\n\n  .mat-table {\n    background: mat-color($background, 'card');\n  }\n\n  .mat-table thead, .mat-table tbody, .mat-table tfoot,\n  mat-header-row, mat-row, mat-footer-row,\n  [mat-header-row], [mat-row], [mat-footer-row],\n  .mat-table-sticky {\n    background: inherit;\n  }\n\n  mat-row, mat-header-row, mat-footer-row,\n  th.mat-header-cell, td.mat-cell, td.mat-footer-cell {\n    border-bottom-color: mat-color($foreground, divider);\n  }\n\n  .mat-header-cell {\n    color: mat-color($foreground, secondary-text);\n  }\n\n  .mat-cell, .mat-footer-cell {\n    color: mat-color($foreground, text);\n  }\n}\n\n@mixin mat-table-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-table {\n    font-family: mat-font-family($config);\n  }\n\n  .mat-header-cell {\n    font-size: mat-font-size($config, caption);\n    font-weight: mat-font-weight($config, body-2);\n  }\n\n  .mat-cell, .mat-footer-cell {\n    font-size: mat-font-size($config, body-1);\n  }\n}\n\n@mixin _mat-table-density($config-or-theme) {}\n\n@mixin mat-table-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-table') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-table-color($color);\n    }\n    @if $density != null {\n      @include _mat-table-density($density);\n    }\n    @if $typography != null {\n      @include mat-table-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n\n\n$mat-datepicker-selected-today-box-shadow-width: 1px;\n$mat-datepicker-selected-fade-amount: 0.6;\n$mat-datepicker-range-fade-amount: 0.2;\n$mat-datepicker-today-fade-amount: 0.2;\n$mat-calendar-body-font-size: 13px !default;\n$mat-calendar-weekday-table-font-size: 11px !default;\n\n@mixin _mat-datepicker-color($palette) {\n  @include mat-date-range-colors(\n    mat-color($palette, default, $mat-datepicker-range-fade-amount));\n\n  .mat-calendar-body-selected {\n    background-color: mat-color($palette);\n    color: mat-color($palette, default-contrast);\n  }\n\n  .mat-calendar-body-disabled > .mat-calendar-body-selected {\n    $background: mat-color($palette);\n\n    @if (type-of($background) == color) {\n      background-color: fade-out($background, $mat-datepicker-selected-fade-amount);\n    }\n    @else {\n      // If we couldn't resolve to background to a color (e.g. it's a CSS variable),\n      // fall back to fading the content out via `opacity`.\n      opacity: $mat-datepicker-today-fade-amount;\n    }\n  }\n\n  .mat-calendar-body-today.mat-calendar-body-selected {\n    box-shadow: inset 0 0 0 $mat-datepicker-selected-today-box-shadow-width\n                mat-color($palette, default-contrast);\n  }\n\n  .mat-calendar-body-cell:not(.mat-calendar-body-disabled):hover,\n  .cdk-keyboard-focused .mat-calendar-body-active,\n  .cdk-program-focused .mat-calendar-body-active {\n    & > .mat-calendar-body-cell-content {\n      @include _mat-datepicker-unselected-cell {\n        background-color: mat-color($palette, 0.3);\n      }\n    }\n  }\n}\n\n// Utility mixin to target cells that aren't selected. Used to make selector easier to follow.\n@mixin _mat-datepicker-unselected-cell {\n  &:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical) {\n    @content;\n  }\n}\n\n@mixin mat-datepicker-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $foreground: map-get($config, foreground);\n  $background: map-get($config, background);\n  $disabled-color: mat-color($foreground, disabled-text);\n\n  .mat-calendar-arrow {\n    border-top-color: mat-color($foreground, icon);\n  }\n\n  // The prev/next buttons need a bit more specificity to\n  // avoid being overwritten by the .mat-icon-button.\n  .mat-datepicker-toggle,\n  .mat-datepicker-content .mat-calendar-next-button,\n  .mat-datepicker-content .mat-calendar-previous-button {\n    color: mat-color($foreground, icon);\n  }\n\n  .mat-calendar-table-header {\n    color: mat-color($foreground, hint-text);\n  }\n\n  .mat-calendar-table-header-divider::after {\n    background: mat-color($foreground, divider);\n  }\n\n  .mat-calendar-body-label {\n    color: mat-color($foreground, secondary-text);\n  }\n\n  .mat-calendar-body-cell-content,\n  .mat-date-range-input-separator {\n    color: mat-color($foreground, text);\n    border-color: transparent;\n  }\n\n  .mat-calendar-body-disabled > .mat-calendar-body-cell-content {\n    @include _mat-datepicker-unselected-cell {\n      color: $disabled-color;\n    }\n  }\n\n  .mat-form-field-disabled .mat-date-range-input-separator {\n    color: $disabled-color;\n  }\n\n  .mat-calendar-body-in-preview {\n    $divider-color: mat-color($foreground, divider);\n\n    @if type-of($divider-color) == color {\n      // The divider color is set under the assumption that it'll be used\n      // for a solid border, but because we're using a dashed border for the\n      // preview range, we need to bump its opacity to ensure that it's visible.\n      color: rgba($divider-color, min(opacity($divider-color) * 2, 1));\n    }\n    @else {\n      color: $divider-color;\n    }\n  }\n\n  .mat-calendar-body-today {\n    @include _mat-datepicker-unselected-cell {\n      // Note: though it's not text, the border is a hint about the fact that this is today's date,\n      // so we use the hint color.\n      border-color: mat-color($foreground, hint-text);\n    }\n  }\n\n  .mat-calendar-body-disabled > .mat-calendar-body-today {\n    @include _mat-datepicker-unselected-cell {\n      $color: mat-color($foreground, hint-text);\n\n      @if (type-of($color) == color) {\n        border-color: fade-out($color, $mat-datepicker-today-fade-amount);\n      }\n      @else {\n        // If the color didn't resolve to a color value, but something like a CSS variable, we can't\n        // fade it out so we fall back to reducing the element opacity. Note that we don't use the\n        // $mat-datepicker-today-fade-amount, because hint text usually has some opacity applied\n        // to it already and we don't want them to stack on top of each other.\n        opacity: 0.5;\n      }\n    }\n  }\n\n  @include _mat-datepicker-color(map-get($config, primary));\n\n  .mat-datepicker-content {\n    @include mat-private-theme-elevation(4, $config);\n    background-color: mat-color($background, card);\n    color: mat-color($foreground, text);\n\n    &.mat-accent {\n      @include _mat-datepicker-color(map-get($config, accent));\n    }\n\n    &.mat-warn {\n      @include _mat-datepicker-color(map-get($config, warn));\n    }\n  }\n\n  .mat-datepicker-content-touch {\n    @include mat-private-theme-elevation(0, $config);\n  }\n\n  .mat-datepicker-toggle-active {\n    color: mat-color(map-get($config, primary), text);\n\n    &.mat-accent {\n      color: mat-color(map-get($config, accent), text);\n    }\n\n    &.mat-warn {\n      color: mat-color(map-get($config, warn), text);\n    }\n  }\n\n  .mat-date-range-input-inner[disabled] {\n    color: mat-color($foreground, disabled-text);\n  }\n}\n\n@mixin mat-datepicker-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-calendar {\n    font-family: mat-font-family($config);\n  }\n\n  .mat-calendar-body {\n    font-size: $mat-calendar-body-font-size;\n  }\n\n  .mat-calendar-body-label,\n  .mat-calendar-period-button {\n    font: {\n      size: mat-font-size($config, button);\n      weight: mat-font-weight($config, button);\n    }\n  }\n\n  .mat-calendar-table-header th {\n    font: {\n      size: $mat-calendar-weekday-table-font-size;\n      weight: mat-font-weight($config, body-1);\n    }\n  }\n}\n\n@mixin mat-date-range-colors(\n  $range-color,\n  $comparison-color: rgba(#f9ab00, $mat-datepicker-range-fade-amount),\n  $overlap-color: #a8dab5,\n  $overlap-selected-color: darken($overlap-color, 30%)) {\n\n  .mat-calendar-body-in-range::before {\n    background: $range-color;\n  }\n\n  .mat-calendar-body-comparison-identical,\n  .mat-calendar-body-in-comparison-range::before {\n    background: $comparison-color;\n  }\n\n  .mat-calendar-body-comparison-bridge-start::before,\n  [dir='rtl'] .mat-calendar-body-comparison-bridge-end::before {\n    background: linear-gradient(to right, $range-color 50%, $comparison-color 50%);\n  }\n\n  .mat-calendar-body-comparison-bridge-end::before,\n  [dir='rtl'] .mat-calendar-body-comparison-bridge-start::before {\n    background: linear-gradient(to left, $range-color 50%, $comparison-color 50%);\n  }\n\n  .mat-calendar-body-in-range > .mat-calendar-body-comparison-identical,\n  .mat-calendar-body-in-comparison-range.mat-calendar-body-in-range::after {\n    background: $overlap-color;\n  }\n\n  .mat-calendar-body-comparison-identical.mat-calendar-body-selected,\n  .mat-calendar-body-in-comparison-range > .mat-calendar-body-selected {\n    background: $overlap-selected-color;\n  }\n}\n\n@mixin _mat-datepicker-density($config-or-theme) {}\n\n@mixin mat-datepicker-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-datepicker') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-datepicker-color($color);\n    }\n    @if $density != null {\n      @include _mat-datepicker-density($density);\n    }\n    @if $typography != null {\n      @include mat-datepicker-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n\n\n@mixin mat-dialog-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $background: map-get($config, background);\n  $foreground: map-get($config, foreground);\n\n  .mat-dialog-container {\n    @include mat-private-theme-elevation(24, $config);\n    background: mat-color($background, dialog);\n    color: mat-color($foreground, text);\n  }\n}\n\n@mixin mat-dialog-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-dialog-title {\n    @include mat-typography-level-to-styles($config, title);\n  }\n}\n\n@mixin _mat-dialog-density($config-or-theme) {}\n\n@mixin mat-dialog-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-dialog') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-dialog-color($color);\n    }\n    @if $density != null {\n      @include _mat-dialog-density($density);\n    }\n    @if $typography != null {\n      @include mat-dialog-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n\n// Default minimum and maximum height for collapsed panel headers.\n$mat-expansion-panel-header-collapsed-height: 48px !default;\n$mat-expansion-panel-header-collapsed-minimum-height: 36px !default;\n$mat-expansion-panel-header-collapsed-maximum-height:\n    $mat-expansion-panel-header-collapsed-height !default;\n\n// Default minimum and maximum height for expanded panel headers.\n$mat-expansion-panel-header-expanded-height: 64px !default;\n$mat-expansion-panel-header-expanded-minimum-height: 48px !default;\n$mat-expansion-panel-header-expanded-maximum-height:\n    $mat-expansion-panel-header-expanded-height !default;\n\n// Density configuration for the expansion panel. Captures the\n// height for both expanded and collapsed panel headers.\n$mat-expansion-panel-header-density-config: (\n  collapsed-height: (\n    default: $mat-expansion-panel-header-collapsed-height,\n    maximum: $mat-expansion-panel-header-collapsed-maximum-height,\n    minimum: $mat-expansion-panel-header-collapsed-minimum-height,\n  ),\n  expanded-height: (\n    default: $mat-expansion-panel-header-expanded-height,\n    maximum: $mat-expansion-panel-header-expanded-maximum-height,\n    minimum: $mat-expansion-panel-header-expanded-minimum-height,\n  )\n) !default;\n\n// Note: Keep this in sync with the animation timing for the toggle indicator\n// and body expansion. These are animated using Angular animations.\n$mat-expansion-panel-header-transition: 225ms cubic-bezier(0.4, 0, 0.2, 1);\n\n@mixin mat-private-expansion-focus {\n  .mat-expansion-panel {\n    & .mat-expansion-panel-header.cdk-keyboard-focused,\n    & .mat-expansion-panel-header.cdk-program-focused,\n    &:not(.mat-expanded) .mat-expansion-panel-header:hover {\n      &:not([aria-disabled='true']) {\n        @content;\n      }\n    }\n  }\n}\n\n\n@mixin mat-expansion-panel-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $background: map-get($config, background);\n  $foreground: map-get($config, foreground);\n\n  .mat-expansion-panel {\n    @include mat-private-theme-overridable-elevation(2, $config);\n    background: mat-color($background, card);\n    color: mat-color($foreground, text);\n  }\n\n  .mat-action-row {\n    border-top-color: mat-color($foreground, divider);\n  }\n\n  @include mat-private-expansion-focus {\n    background: mat-color($background, hover);\n  }\n\n  // Disable the hover on touch devices since it can appear like it is stuck. We can't use\n  // `@media (hover)` above, because the desktop support browser support isn't great.\n  @media (hover: none) {\n    .mat-expansion-panel:not(.mat-expanded):not([aria-disabled='true'])\n      .mat-expansion-panel-header:hover {\n      background: mat-color($background, card);\n    }\n  }\n\n  .mat-expansion-panel-header-title {\n    color: mat-color($foreground, text);\n  }\n\n  .mat-expansion-panel-header-description,\n  .mat-expansion-indicator::after {\n    color: mat-color($foreground, secondary-text);\n  }\n\n  .mat-expansion-panel-header[aria-disabled='true'] {\n    color: mat-color($foreground, disabled-button);\n\n    .mat-expansion-panel-header-title,\n    .mat-expansion-panel-header-description {\n      color: inherit;\n    }\n  }\n}\n\n@mixin mat-expansion-panel-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-expansion-panel-header {\n    font: {\n      family: mat-font-family($config, subheading-1);\n      size: mat-font-size($config, subheading-1);\n      weight: mat-font-weight($config, subheading-1);\n    }\n  }\n\n  .mat-expansion-panel-content {\n    @include mat-typography-level-to-styles($config, body-1);\n  }\n}\n\n@mixin mat-expansion-panel-density($config-or-theme) {\n  $density-scale: mat-get-density-config($config-or-theme);\n  $expanded-height: mat-private-density-prop-value(\n        $mat-expansion-panel-header-density-config, $density-scale, expanded-height);\n  $collapsed-height: mat-private-density-prop-value(\n      $mat-expansion-panel-header-density-config, $density-scale, collapsed-height);\n\n  @include mat-private-density-legacy-compatibility() {\n    .mat-expansion-panel-header {\n      height: $collapsed-height;\n\n      &.mat-expanded {\n        height: $expanded-height;\n      }\n    }\n  }\n}\n\n@mixin mat-expansion-panel-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-expansion-panel') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-expansion-panel-color($color);\n    }\n    @if $density != null {\n      @include mat-expansion-panel-density($density);\n    }\n    @if $typography != null {\n      @include mat-expansion-panel-typography($typography);\n    }\n  }\n}\n\n\n\n\n// This mixin will ensure that lines that overflow the container will hide the overflow and\n// truncate neatly with an ellipsis.\n@mixin mat-truncate-line() {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n// Mixin to provide all mat-line styles, changing secondary font size based on whether the list\n// is in dense mode.\n@mixin mat-line-base($secondary-font-size) {\n  .mat-line {\n    @include mat-truncate-line();\n    display: block;\n    box-sizing: border-box;\n\n    // all lines but the top line should have smaller text\n    &:nth-child(n+2) {\n      font-size: $secondary-font-size;\n    }\n  }\n}\n\n// This mixin normalizes default element styles, e.g. font weight for heading text.\n@mixin mat-normalize-text() {\n  & > * {\n    margin: 0;\n    padding: 0;\n    font-weight: normal;\n    font-size: inherit;\n  }\n}\n\n// This mixin provides base styles for the wrapper around mat-line elements in a list.\n@mixin mat-line-wrapper-base() {\n  @include mat-normalize-text();\n\n  display: flex;\n  flex-direction: column;\n  flex: auto;\n  box-sizing: border-box;\n  overflow: hidden;\n\n  // Must remove wrapper when lines are empty or it takes up horizontal\n  // space and pushes other elements to the right.\n  &:empty {\n    display: none;\n  }\n}\n\n\n\n// Include this empty mixin for consistency with the other components.\n@mixin mat-grid-list-color($config-or-theme) {}\n\n@mixin mat-grid-list-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-grid-tile-header,\n  .mat-grid-tile-footer {\n    @include mat-line-base(mat-font-size($config, caption));\n    font-size: mat-font-size($config, body-1);\n  }\n}\n\n@mixin _mat-grid-list-density($config-or-theme) {}\n\n@mixin mat-grid-list-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-grid-list') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-grid-list-color($color);\n    }\n    @if $density != null {\n      @include _mat-grid-list-density($density);\n    }\n    @if $typography != null {\n      @include mat-grid-list-typography($typography);\n    }\n  }\n}\n\n\n\n@mixin mat-icon-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $primary: map-get($config, primary);\n  $accent: map-get($config, accent);\n  $warn: map-get($config, warn);\n  $background: map-get($config, background);\n  $foreground: map-get($config, foreground);\n\n  .mat-icon {\n    &.mat-primary {\n      color: mat-color($primary, text);\n    }\n\n    &.mat-accent {\n      color: mat-color($accent, text);\n    }\n\n    &.mat-warn {\n      color: mat-color($warn, text);\n    }\n  }\n}\n\n@mixin mat-icon-typography($config-or-theme) {}\n\n@mixin _mat-icon-density($config-or-theme) {}\n\n@mixin mat-icon-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-icon') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-icon-color($color);\n    }\n    @if $density != null {\n      @include _mat-icon-density($density);\n    }\n    @if $typography != null {\n      @include mat-icon-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n\n// Renders a gradient for showing the dashed line when the input is disabled.\n// Unlike using a border, a gradient allows us to adjust the spacing of the dotted line\n// to match the Material Design spec.\n@mixin mat-private-control-disabled-underline($color) {\n  background-image: linear-gradient(to right, $color 0%, $color 33%, transparent 0%);\n  background-size: 4px 100%;\n  background-repeat: repeat-x;\n}\n\n// Figures out the color of the placeholder for a form control.\n// Used primarily to prevent the various form controls from\n// becoming out of sync since these colors aren't in a palette.\n@function mat-private-control-placeholder-color($config) {\n  $foreground: map-get($config, foreground);\n  $is-dark-theme: map-get($config, is-dark);\n  @return mat-color($foreground, secondary-text, if($is-dark-theme, 0.5, 0.42));\n}\n\n\n/* stylelint-disable material/no-prefixes */\n@mixin user-select($value) {\n  -webkit-user-select: $value;\n  -moz-user-select: $value;\n  -ms-user-select: $value;\n  user-select: $value;\n}\n\n@mixin input-placeholder {\n  &::placeholder {\n    @content;\n  }\n\n  &::-moz-placeholder {\n    @content;\n  }\n\n  &::-webkit-input-placeholder {\n    @content;\n  }\n\n  &:-ms-input-placeholder {\n    @content;\n  }\n}\n\n@mixin cursor-grab {\n  cursor: -webkit-grab;\n  cursor: grab;\n}\n\n@mixin cursor-grabbing {\n  cursor: -webkit-grabbing;\n  cursor: grabbing;\n}\n\n@mixin backface-visibility($value) {\n  -webkit-backface-visibility: $value;\n  backface-visibility: $value;\n}\n\n@mixin position-sticky($important: false) {\n  position: -webkit-sticky #{if($important, '!important', '')};\n  position: sticky #{if($important, '!important', '')};\n}\n/* stylelint-enable */\n\n\n\n@mixin mat-input-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $primary: map-get($config, primary);\n  $accent: map-get($config, accent);\n  $warn: map-get($config, warn);\n  $foreground: map-get($config, foreground);\n\n  .mat-form-field-type-mat-native-select .mat-form-field-infix::after {\n    color: mat-color($foreground, secondary-text);\n  }\n\n  .mat-input-element:disabled,\n  .mat-form-field-type-mat-native-select.mat-form-field-disabled .mat-form-field-infix::after {\n    color: mat-color($foreground, disabled-text);\n  }\n\n  .mat-input-element {\n    caret-color: mat-color($primary, text);\n\n    @include input-placeholder {\n      color: mat-private-control-placeholder-color($config);\n    }\n\n    // On dark themes we set the native `select` color to some shade of white,\n    // however the color propagates to all of the `option` elements, which are\n    // always on a white background inside the dropdown, causing them to blend in.\n    // Since we can't change background of the dropdown, we need to explicitly\n    // reset the color of the options to something dark.\n    @if (map-get($config, is-dark)) {\n      option {\n        color: $dark-primary-text;\n      }\n\n      option:disabled {\n        color: $dark-disabled-text;\n      }\n    }\n  }\n\n  .mat-form-field.mat-accent .mat-input-element {\n    caret-color: mat-color($accent, text);\n  }\n\n  .mat-form-field.mat-warn .mat-input-element,\n  .mat-form-field-invalid .mat-input-element {\n    caret-color: mat-color($warn, text);\n  }\n\n  .mat-form-field-type-mat-native-select.mat-form-field-invalid .mat-form-field-infix::after {\n    color: mat-color($warn, text);\n  }\n}\n\n@mixin mat-input-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  // The unit-less line-height from the font config.\n  $line-height: mat-line-height($config, input);\n\n  // The amount of space between the top of the line and the top of the actual text\n  // (as a fraction of the font-size).\n  $line-spacing: ($line-height - 1) / 2;\n\n  // <input> elements seem to have their height set slightly too large on Safari causing the text to\n  // be misaligned w.r.t. the placeholder. Adding this margin corrects it.\n  input.mat-input-element {\n    margin-top: -$line-spacing * 1em;\n  }\n}\n\n@mixin _mat-input-density($config-or-theme) {}\n\n@mixin mat-input-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-input') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-input-color($color);\n    }\n    @if $density != null {\n      @include _mat-input-density($density);\n    }\n    @if $typography != null {\n      @include mat-input-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n\n\n@mixin mat-list-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $background: map-get($config, background);\n  $foreground: map-get($config, foreground);\n\n  .mat-list-base {\n    .mat-list-item {\n      color: mat-color($foreground, text);\n    }\n\n    .mat-list-option {\n      color: mat-color($foreground, text);\n    }\n\n    .mat-subheader {\n      color: mat-color($foreground, secondary-text);\n    }\n  }\n\n  .mat-list-item-disabled {\n    background-color: mat-color($background, disabled-list-option);\n  }\n\n  .mat-list-option,\n  .mat-nav-list .mat-list-item,\n  .mat-action-list .mat-list-item {\n    &:hover, &:focus {\n      background: mat-color($background, 'hover');\n    }\n  }\n\n  .mat-list-single-selected-option {\n    &, &:hover, &:focus {\n      background: mat-color($background, hover, 0.12);\n    }\n  }\n}\n\n@mixin mat-list-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  $font-family: mat-font-family($config);\n\n  .mat-list-item {\n    font-family: $font-family;\n  }\n\n  .mat-list-option {\n    font-family: $font-family;\n  }\n\n  // Default list\n  .mat-list-base {\n    .mat-list-item {\n      font-size: mat-font-size($config, subheading-2);\n      @include mat-line-base(mat-font-size($config, body-1));\n    }\n\n    .mat-list-option {\n      font-size: mat-font-size($config, subheading-2);\n      @include mat-line-base(mat-font-size($config, body-1));\n    }\n\n    .mat-subheader {\n      font-family: mat-font-family($config, body-2);\n      font-size: mat-font-size($config, body-2);\n      font-weight: mat-font-weight($config, body-2);\n    }\n  }\n\n  // Dense list\n  .mat-list-base[dense] {\n    .mat-list-item {\n      font-size: mat-font-size($config, caption);\n      @include mat-line-base(mat-font-size($config, caption));\n    }\n\n    .mat-list-option {\n      font-size: mat-font-size($config, caption);\n      @include mat-line-base(mat-font-size($config, caption));\n    }\n\n    .mat-subheader {\n      font-family: $font-family;\n      font-size: mat-font-size($config, caption);\n      font-weight: mat-font-weight($config, body-2);\n    }\n  }\n}\n\n@mixin _mat-list-density($config-or-theme) {}\n\n@mixin mat-list-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-list') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-list-color($color);\n    }\n    @if $density != null {\n      @include _mat-list-density($density);\n    }\n    @if $typography != null {\n      @include mat-list-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n\n\n@mixin mat-menu-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $background: map-get($config, background);\n  $foreground: map-get($config, foreground);\n\n  .mat-menu-panel {\n    @include mat-private-theme-overridable-elevation(4, $config);\n    background: mat-color($background, 'card');\n  }\n\n  .mat-menu-item {\n    background: transparent;\n    color: mat-color($foreground, 'text');\n\n    &[disabled] {\n      &,\n      &::after,\n      .mat-icon-no-color {\n        color: mat-color($foreground, 'disabled');\n      }\n    }\n  }\n\n  .mat-menu-item .mat-icon-no-color,\n  .mat-menu-item-submenu-trigger::after {\n    color: mat-color($foreground, 'icon');\n  }\n\n  .mat-menu-item:hover,\n  .mat-menu-item.cdk-program-focused,\n  .mat-menu-item.cdk-keyboard-focused,\n  .mat-menu-item-highlighted {\n    &:not([disabled]) {\n      background: mat-color($background, 'hover');\n    }\n  }\n}\n\n@mixin mat-menu-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-menu-item {\n    font: {\n      family: mat-font-family($config, body-1);\n      size: mat-font-size($config, body-1);\n      weight: mat-font-weight($config, body-1);\n    }\n  }\n}\n\n@mixin _mat-menu-density($config-or-theme) {}\n\n@mixin mat-menu-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-menu') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-menu-color($color);\n    }\n    @if $density != null {\n      @include _mat-menu-density($density);\n    }\n    @if $typography != null {\n      @include mat-menu-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n\n$mat-paginator-height: 56px !default;\n// Minimum height for paginator's in the highest density is determined based on how\n// much the paginator can shrink until the content exceeds (i.e. navigation buttons).\n$mat-paginator-minimum-height: 40px !default;\n$mat-paginator-maximum-height: $mat-paginator-height !default;\n\n$mat-paginator-density-config: (\n  height: (\n    default: $mat-paginator-height,\n    maximum: $mat-paginator-maximum-height,\n    minimum: $mat-paginator-minimum-height,\n  )\n) !default;\n\n\n@mixin mat-paginator-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $foreground: map-get($config, foreground);\n  $background: map-get($config, background);\n\n  .mat-paginator {\n    background: mat-color($background, 'card');\n  }\n\n  .mat-paginator,\n  .mat-paginator-page-size .mat-select-trigger {\n    color: mat-color($foreground, secondary-text);\n  }\n\n  .mat-paginator-decrement,\n  .mat-paginator-increment {\n    border-top: 2px solid mat-color($foreground, 'icon');\n    border-right: 2px solid mat-color($foreground, 'icon');\n  }\n\n  .mat-paginator-first,\n  .mat-paginator-last {\n    border-top: 2px solid mat-color($foreground, 'icon');\n  }\n\n  .mat-icon-button[disabled] {\n    .mat-paginator-decrement,\n    .mat-paginator-increment,\n    .mat-paginator-first,\n    .mat-paginator-last {\n      border-color: mat-color($foreground, 'disabled');\n    }\n  }\n}\n\n@mixin mat-paginator-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-paginator,\n  .mat-paginator-page-size .mat-select-trigger {\n    font: {\n      family: mat-font-family($config, caption);\n      size: mat-font-size($config, caption);\n    }\n  }\n}\n\n@mixin mat-paginator-density($config-or-theme) {\n  $density-scale: mat-get-density-config($config-or-theme);\n  $height: mat-private-density-prop-value($mat-paginator-density-config, $density-scale, height);\n\n  @include mat-private-density-legacy-compatibility() {\n    .mat-paginator-container {\n      min-height: $height;\n    }\n  }\n}\n\n@mixin mat-paginator-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-paginator') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-paginator-color($color);\n    }\n    @if $density != null {\n      @include mat-paginator-density($density);\n    }\n    @if $typography != null {\n      @include mat-paginator-typography($typography);\n    }\n  }\n}\n\n\n\n\n@mixin mat-progress-bar-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $primary: map-get($config, primary);\n  $accent: map-get($config, accent);\n  $warn: map-get($config, warn);\n\n  .mat-progress-bar-background {\n    fill: mat-color($primary, lighter);\n  }\n\n  .mat-progress-bar-buffer {\n    background-color: mat-color($primary, lighter);\n  }\n\n  .mat-progress-bar-fill::after {\n    background-color: mat-color($primary);\n  }\n\n  .mat-progress-bar.mat-accent {\n    .mat-progress-bar-background {\n      fill: mat-color($accent, lighter);\n    }\n\n    .mat-progress-bar-buffer {\n      background-color: mat-color($accent, lighter);\n    }\n\n    .mat-progress-bar-fill::after {\n      background-color: mat-color($accent);\n    }\n  }\n\n  .mat-progress-bar.mat-warn {\n    .mat-progress-bar-background {\n      fill: mat-color($warn, lighter);\n    }\n\n    .mat-progress-bar-buffer {\n      background-color: mat-color($warn, lighter);\n    }\n\n    .mat-progress-bar-fill::after {\n      background-color: mat-color($warn);\n    }\n  }\n}\n\n@mixin mat-progress-bar-typography($config-or-theme) {}\n\n@mixin _mat-progress-bar-density($config-or-theme) {}\n\n@mixin mat-progress-bar-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-progress-bar') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-progress-bar-color($color);\n    }\n    @if $density != null {\n      @include _mat-progress-bar-density($density);\n    }\n    @if $typography != null {\n      @include mat-progress-bar-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n@mixin mat-progress-spinner-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $primary: map-get($config, primary);\n  $accent: map-get($config, accent);\n  $warn: map-get($config, warn);\n\n  .mat-progress-spinner, .mat-spinner {\n    circle {\n      stroke: mat-color($primary);\n    }\n\n    &.mat-accent circle {\n      stroke: mat-color($accent);\n    }\n\n    &.mat-warn circle {\n      stroke: mat-color($warn);\n    }\n  }\n}\n\n@mixin mat-progress-spinner-typography($config-or-theme) {}\n\n@mixin _mat-progress-spinner-density($config-or-theme) {}\n\n@mixin mat-progress-spinner-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-progress-spinner') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-progress-spinner-color($color);\n    }\n    @if $density != null {\n      @include _mat-progress-spinner-density($density);\n    }\n    @if $typography != null {\n      @include mat-progress-spinner-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n@mixin _mat-radio-color($palette) {\n  &.mat-radio-checked .mat-radio-outer-circle {\n    border-color: mat-color($palette);\n  }\n\n  .mat-radio-inner-circle,\n  .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple),\n  &.mat-radio-checked .mat-radio-persistent-ripple,\n  &:active .mat-radio-persistent-ripple {\n    background-color: mat-color($palette);\n  }\n}\n\n@mixin mat-radio-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $primary: map-get($config, primary);\n  $accent: map-get($config, accent);\n  $warn: map-get($config, warn);\n  $background: map-get($config, background);\n  $foreground: map-get($config, foreground);\n\n  .mat-radio-outer-circle {\n    border-color: mat-color($foreground, secondary-text);\n  }\n\n  .mat-radio-button {\n    &.mat-primary {\n      @include _mat-radio-color($primary);\n    }\n\n    &.mat-accent {\n      @include _mat-radio-color($accent);\n    }\n\n    &.mat-warn {\n      @include _mat-radio-color($warn);\n    }\n\n    // This needs extra specificity, because the classes above are combined\n    // (e.g. `.mat-radio-button.mat-accent`) which increases their specificity a lot.\n    // TODO: consider making the selectors into descendants (`.mat-primary .mat-radio-button`).\n    &.mat-radio-disabled {\n      &.mat-radio-checked .mat-radio-outer-circle,\n      .mat-radio-outer-circle {\n        border-color: mat-color($foreground, disabled);\n      }\n\n      .mat-radio-ripple .mat-ripple-element,\n      .mat-radio-inner-circle {\n        background-color: mat-color($foreground, disabled);\n      }\n\n      .mat-radio-label-content {\n        color: mat-color($foreground, disabled);\n      }\n    }\n\n    // Switch this to a solid color since we're using `opacity`\n    // to control how opaque the ripple should be.\n    .mat-ripple-element {\n      background-color: map-get($foreground, base);\n    }\n  }\n}\n\n@mixin mat-radio-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-radio-button {\n    font-family: mat-font-family($config);\n  }\n}\n\n@mixin _mat-radio-density($config-or-theme) {}\n\n@mixin mat-radio-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-radio') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-radio-color($color);\n    }\n    @if $density != null {\n      @include _mat-radio-density($density);\n    }\n    @if $typography != null {\n      @include mat-radio-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n\n\n\n@mixin mat-select-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $foreground: map-get($config, foreground);\n  $background: map-get($config, background);\n  $primary: map-get($config, primary);\n  $accent: map-get($config, accent);\n  $warn: map-get($config, warn);\n\n  .mat-select-value {\n    color: mat-color($foreground, text);\n  }\n\n  .mat-select-placeholder {\n    color: mat-private-control-placeholder-color($config);\n  }\n\n  .mat-select-disabled .mat-select-value {\n    color: mat-color($foreground, disabled-text);\n  }\n\n  .mat-select-arrow {\n    color: mat-color($foreground, secondary-text);\n  }\n\n  .mat-select-panel {\n    background: mat-color($background, card);\n    @include mat-private-theme-overridable-elevation(4, $config);\n\n    .mat-option.mat-selected:not(.mat-option-multiple) {\n      background: mat-color($background, hover, 0.12);\n    }\n  }\n\n  .mat-form-field {\n    &.mat-focused {\n      &.mat-primary .mat-select-arrow {\n        color: mat-color($primary, text);\n      }\n\n      &.mat-accent .mat-select-arrow {\n        color: mat-color($accent, text);\n      }\n\n      &.mat-warn .mat-select-arrow {\n        color: mat-color($warn, text);\n      }\n    }\n\n    .mat-select.mat-select-invalid .mat-select-arrow {\n      color: mat-color($warn, text);\n    }\n\n    .mat-select.mat-select-disabled .mat-select-arrow {\n      color: mat-color($foreground, disabled-text);\n    }\n  }\n}\n\n@mixin mat-select-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  // The unit-less line-height from the font config.\n  $line-height: mat-line-height($config, input);\n\n  .mat-select {\n    font-family: mat-font-family($config);\n  }\n\n  .mat-select-trigger {\n    height: $line-height * 1em;\n  }\n}\n\n@mixin _mat-select-density($config-or-theme) {}\n\n@mixin mat-select-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-select') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-select-color($color);\n    }\n    @if $density != null {\n      @include _mat-select-density($density);\n    }\n    @if $typography != null {\n      @include mat-select-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n@mixin mat-sidenav-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $primary: map-get($config, primary);\n  $accent: map-get($config, accent);\n  $warn: map-get($config, warn);\n  $background: map-get($config, background);\n  $foreground: map-get($config, foreground);\n\n  $drawer-background-color: mat-color($background, dialog);\n  $drawer-container-background-color:  mat-color($background, background);\n  $drawer-push-background-color: mat-color($background, dialog);\n  $drawer-side-border: solid 1px mat-color($foreground, divider);\n\n  .mat-drawer-container {\n    background-color: $drawer-container-background-color;\n    color: mat-color($foreground, text);\n  }\n\n  .mat-drawer {\n    background-color: $drawer-background-color;\n    color: mat-color($foreground, text);\n\n    &.mat-drawer-push {\n      background-color: $drawer-push-background-color;\n    }\n\n    &:not(.mat-drawer-side) {\n      // The elevation of z-16 is noted in the design specifications.\n      // See https://material.io/design/components/navigation-drawer.html\n      @include mat-private-theme-elevation(16, $config);\n    }\n  }\n\n  .mat-drawer-side {\n    border-right: $drawer-side-border;\n\n    &.mat-drawer-end {\n      border-left: $drawer-side-border;\n      border-right: none;\n    }\n  }\n\n  [dir='rtl'] .mat-drawer-side {\n    border-left: $drawer-side-border;\n    border-right: none;\n\n    &.mat-drawer-end {\n      border-left: none;\n      border-right: $drawer-side-border;\n    }\n  }\n\n  .mat-drawer-backdrop.mat-drawer-shown {\n    $opacity: 0.6;\n    $backdrop-color: mat-color($background, card, $opacity);\n\n    @if (type-of($backdrop-color) == color) {\n      // We use invert() here to have the darken the background color expected to be used. If the\n      // background is light, we use a dark backdrop. If the background is dark,\n      // we use a light backdrop.\n      background-color: invert($backdrop-color);\n    }\n    @else {\n      // If we couldn't resolve the backdrop color to a color value, fall back to using\n      // `opacity` to make it opaque since its end value could be a solid color.\n      background-color: $backdrop-color;\n      opacity: $opacity;\n    }\n  }\n}\n\n@mixin mat-sidenav-typography($config-or-theme) {}\n\n@mixin _mat-sidenav-density($config-or-theme) {}\n\n@mixin mat-sidenav-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-sidenav') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-sidenav-color($color);\n    }\n    @if $density != null {\n      @include _mat-sidenav-density($density);\n    }\n    @if $typography != null {\n      @include mat-sidenav-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n\n@mixin _mat-slide-toggle-checked($palette, $thumb-checked-hue) {\n  &.mat-checked {\n    .mat-slide-toggle-thumb {\n      background-color: mat-color($palette, $thumb-checked-hue);\n    }\n\n    .mat-slide-toggle-bar {\n      // Opacity is determined from the specs for the selection controls.\n      // See: https://material.io/design/components/selection-controls.html#specs\n      background-color: mat-color($palette, $thumb-checked-hue, 0.54);\n    }\n\n    .mat-ripple-element {\n      // Set no opacity for the ripples because the ripple opacity will be adjusted dynamically\n      // based on the type of interaction with the slide-toggle (e.g. for hover, focus)\n      background-color: mat-color($palette, $thumb-checked-hue);\n    }\n  }\n}\n\n@mixin mat-slide-toggle-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $is-dark: map-get($config, is-dark);\n  $primary: map-get($config, primary);\n  $accent: map-get($config, accent);\n  $warn: map-get($config, warn);\n  $background: map-get($config, background);\n  $foreground: map-get($config, foreground);\n\n  // Color hues are based on the specs which briefly show the hues that are applied to a switch.\n  // The 2018 specs no longer describe how dark switches should look like. Due to the lack of\n  // information for dark themed switches, we partially keep the old behavior that is based on\n  // the previous specifications. For the checked color we always use the `default` hue because\n  // that follows MDC and also makes it easier for people to create a custom theme without needing\n  // to specify each hue individually.\n  $thumb-unchecked-hue: if($is-dark, 400, 50);\n  $thumb-checked-hue: default;\n\n  $bar-unchecked-color: mat-color($foreground, disabled);\n  $ripple-unchecked-color: mat-color($foreground, base);\n\n  .mat-slide-toggle {\n    @include _mat-slide-toggle-checked($accent, $thumb-checked-hue);\n\n    &.mat-primary {\n      @include _mat-slide-toggle-checked($primary, $thumb-checked-hue);\n    }\n\n    &.mat-warn {\n      @include _mat-slide-toggle-checked($warn, $thumb-checked-hue);\n    }\n\n    &:not(.mat-checked) .mat-ripple-element {\n      // Set no opacity for the ripples because the ripple opacity will be adjusted dynamically\n      // based on the type of interaction with the slide-toggle (e.g. for hover, focus)\n      background-color: $ripple-unchecked-color;\n    }\n  }\n\n  .mat-slide-toggle-thumb {\n    @include mat-private-theme-elevation(1, $config);\n    background-color: mat-color($mat-grey, $thumb-unchecked-hue);\n  }\n\n  .mat-slide-toggle-bar {\n    background-color: $bar-unchecked-color;\n  }\n}\n\n@mixin mat-slide-toggle-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-slide-toggle-content {\n    font-family: mat-font-family($config);\n  }\n}\n\n@mixin _mat-slide-toggle-density($config-or-theme) {}\n\n@mixin mat-slide-toggle-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-slide-toggle') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-slide-toggle-color($color);\n    }\n    @if $density != null {\n      @include _mat-slide-toggle-density($density);\n    }\n    @if $typography != null {\n      @include mat-slide-toggle-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n\n@mixin _mat-slider-inner-content-theme($palette) {\n  .mat-slider-track-fill,\n  .mat-slider-thumb,\n  .mat-slider-thumb-label {\n    background-color: mat-color($palette);\n  }\n\n  .mat-slider-thumb-label-text {\n    color: mat-color($palette, default-contrast);\n  }\n\n  .mat-slider-focus-ring {\n    $opacity: 0.2;\n    $color: mat-color($palette, default, $opacity);\n    background-color: $color;\n\n    // `mat-color` uses `rgba` for the opacity which won't work with\n    // CSS variables so we need to use `opacity` as a fallback.\n    @if (type-of($color) != color) {\n      opacity: $opacity;\n    }\n  }\n}\n\n@mixin mat-slider-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $primary: map-get($config, primary);\n  $accent: map-get($config, accent);\n  $warn: map-get($config, warn);\n  $background: map-get($config, background);\n  $foreground: map-get($config, foreground);\n\n  $mat-slider-off-color: mat-color($foreground, slider-off);\n  $mat-slider-off-focused-color: mat-color($foreground, slider-off-active);\n  $mat-slider-disabled-color: mat-color($foreground, slider-off);\n  $mat-slider-labeled-min-value-thumb-color: mat-color($foreground, slider-min);\n  $mat-slider-labeled-min-value-thumb-label-color: mat-color($foreground, slider-off);\n  $mat-slider-tick-opacity: 0.7;\n  $mat-slider-tick-color: mat-color($foreground, base, $mat-slider-tick-opacity);\n  $mat-slider-tick-size: 2px;\n\n  .mat-slider-track-background {\n    background-color: $mat-slider-off-color;\n  }\n\n  .mat-primary {\n    @include _mat-slider-inner-content-theme($primary);\n  }\n\n  .mat-accent {\n    @include _mat-slider-inner-content-theme($accent);\n  }\n\n  .mat-warn {\n    @include _mat-slider-inner-content-theme($warn);\n  }\n\n  .mat-slider:hover,\n  .cdk-focused {\n    .mat-slider-track-background {\n      background-color: $mat-slider-off-focused-color;\n    }\n  }\n\n  .mat-slider-disabled {\n    .mat-slider-track-background,\n    .mat-slider-track-fill,\n    .mat-slider-thumb {\n      background-color: $mat-slider-disabled-color;\n    }\n\n    &:hover {\n      .mat-slider-track-background {\n        background-color: $mat-slider-disabled-color;\n      }\n    }\n  }\n\n  .mat-slider-min-value {\n    .mat-slider-focus-ring {\n      $opacity: 0.12;\n      $color: mat-color($foreground, base, $opacity);\n      background-color: $color;\n\n      // `mat-color` uses `rgba` for the opacity which won't work with\n      // CSS variables so we need to use `opacity` as a fallback.\n      @if (type-of($color) != color) {\n        opacity: $opacity;\n      }\n    }\n\n    &.mat-slider-thumb-label-showing {\n      .mat-slider-thumb,\n      .mat-slider-thumb-label {\n        background-color: $mat-slider-labeled-min-value-thumb-color;\n      }\n\n      &.cdk-focused {\n        .mat-slider-thumb,\n        .mat-slider-thumb-label {\n          background-color: $mat-slider-labeled-min-value-thumb-label-color;\n        }\n      }\n    }\n\n    &:not(.mat-slider-thumb-label-showing) {\n      .mat-slider-thumb {\n        border-color: $mat-slider-off-color;\n        background-color: transparent;\n      }\n\n      &:hover,\n      &.cdk-focused {\n        .mat-slider-thumb {\n          border-color: $mat-slider-off-focused-color;\n        }\n\n        &.mat-slider-disabled .mat-slider-thumb {\n          border-color: $mat-slider-disabled-color;\n        }\n      }\n    }\n  }\n\n  .mat-slider-has-ticks .mat-slider-wrapper::after {\n    border-color: $mat-slider-tick-color;\n\n    // `mat-color` uses `rgba` for the opacity which won't work with\n    // CSS variables so we need to use `opacity` as a fallback.\n    @if (type-of($mat-slider-tick-color) != color) {\n      opacity: $mat-slider-tick-opacity;\n    }\n  }\n\n  .mat-slider-horizontal .mat-slider-ticks {\n    background-image: repeating-linear-gradient(to right, $mat-slider-tick-color,\n        $mat-slider-tick-color $mat-slider-tick-size, transparent 0, transparent);\n    // Firefox doesn't draw the gradient correctly with 'to right'\n    // (see https://bugzilla.mozilla.org/show_bug.cgi?id=1314319).\n    background-image: -moz-repeating-linear-gradient(0.0001deg, $mat-slider-tick-color,\n        $mat-slider-tick-color $mat-slider-tick-size, transparent 0, transparent);\n\n    // `mat-color` uses `rgba` for the opacity which won't work with\n    // CSS variables so we need to use `opacity` as a fallback.\n    @if (type-of($mat-slider-tick-color) != color) {\n      opacity: $mat-slider-tick-opacity;\n    }\n  }\n\n  .mat-slider-vertical .mat-slider-ticks {\n    background-image: repeating-linear-gradient(to bottom, $mat-slider-tick-color,\n        $mat-slider-tick-color $mat-slider-tick-size, transparent 0, transparent);\n\n    // `mat-color` uses `rgba` for the opacity which won't work with\n    // CSS variables so we need to use `opacity` as a fallback.\n    @if (type-of($mat-slider-tick-color) != color) {\n      opacity: $mat-slider-tick-opacity;\n    }\n  }\n}\n\n@mixin mat-slider-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-slider-thumb-label-text {\n    font: {\n      family: mat-font-family($config);\n      size: mat-font-size($config, caption);\n      weight: mat-font-weight($config, body-2);\n    }\n  }\n}\n\n@mixin _mat-slider-density($config-or-theme) {}\n\n@mixin mat-slider-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-slider') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-slider-color($color);\n    }\n    @if $density != null {\n      @include _mat-slider-density($density);\n    }\n    @if $typography != null {\n      @include mat-slider-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n$mat-stepper-header-height: 72px !default;\n// Minimum height for highest density stepper's is determined based on how much\n// stepper headers can shrink until the step icon or step label exceed. We can't use\n// a value below `42px` because the optional label for steps would otherwise exceed.\n$mat-stepper-header-minimum-height: 42px !default;\n$mat-stepper-header-maximum-height: $mat-stepper-header-height !default;\n\n$mat-stepper-density-config: (\n  height: (\n    default: $mat-stepper-header-height,\n    maximum: $mat-stepper-header-maximum-height,\n    minimum: $mat-stepper-header-minimum-height,\n  )\n) !default;\n\n// Note: These variables are not denoted with `!default` because they are used in the non-theme\n// component styles. Modifying these variables does not have the desired effect for consumers.\n$mat-stepper-label-header-height: 24px;\n$mat-stepper-label-position-bottom-top-gap: 16px;\n$mat-stepper-label-min-width: 50px;\n\n$mat-vertical-stepper-content-margin: 36px;\n\n$mat-stepper-side-gap: 24px;\n$mat-stepper-line-width: 1px;\n$mat-stepper-line-gap: 8px;\n\n$mat-step-sub-label-font-size: 12px;\n$mat-step-header-icon-size: 16px;\n\n\n@mixin mat-stepper-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $foreground: map-get($config, foreground);\n  $background: map-get($config, background);\n  $primary: map-get($config, primary);\n  $accent: map-get($config, accent);\n  $warn: map-get($config, warn);\n\n  .mat-step-header {\n    &.cdk-keyboard-focused,\n    &.cdk-program-focused,\n    &:hover {\n      background-color: mat-color($background, hover);\n    }\n\n    // On touch devices the :hover state will linger on the element after a tap.\n    // Reset it via `@media` after the declaration, because the media query isn't\n    // supported by all browsers yet.\n    @media (hover: none) {\n      &:hover {\n        background: none;\n      }\n    }\n\n    .mat-step-label,\n    .mat-step-optional {\n      // TODO(josephperrott): Update to using a corrected disabled-text contrast\n      // instead of secondary-text.\n      color: mat-color($foreground, secondary-text);\n    }\n\n    .mat-step-icon {\n      // TODO(josephperrott): Update to using a corrected disabled-text contrast\n      // instead of secondary-text.\n      background-color: mat-color($foreground, secondary-text);\n      color: mat-color($primary, default-contrast);\n    }\n\n    .mat-step-icon-selected,\n    .mat-step-icon-state-done,\n    .mat-step-icon-state-edit {\n      background-color: mat-color($primary);\n      color: mat-color($primary, default-contrast);\n    }\n\n    &.mat-accent {\n      .mat-step-icon {\n        color: mat-color($accent, default-contrast);\n      }\n\n      .mat-step-icon-selected,\n      .mat-step-icon-state-done,\n      .mat-step-icon-state-edit {\n        background-color: mat-color($accent);\n        color: mat-color($accent, default-contrast);\n      }\n    }\n\n    &.mat-warn {\n      .mat-step-icon {\n        color: mat-color($warn, default-contrast);\n      }\n\n      .mat-step-icon-selected,\n      .mat-step-icon-state-done,\n      .mat-step-icon-state-edit {\n        background-color: mat-color($warn);\n        color: mat-color($warn, default-contrast);\n      }\n    }\n\n    .mat-step-icon-state-error {\n      background-color: transparent;\n      color: mat-color($warn, text);\n    }\n\n    .mat-step-label.mat-step-label-active {\n      color: mat-color($foreground, text);\n    }\n\n    .mat-step-label.mat-step-label-error {\n      color: mat-color($warn, text);\n    }\n  }\n\n  .mat-stepper-horizontal, .mat-stepper-vertical {\n    background-color: mat-color($background, card);\n  }\n\n  .mat-stepper-vertical-line::before {\n    border-left-color: mat-color($foreground, divider);\n  }\n\n  .mat-horizontal-stepper-header::before,\n  .mat-horizontal-stepper-header::after,\n  .mat-stepper-horizontal-line {\n    border-top-color: mat-color($foreground, divider);\n  }\n}\n\n@mixin mat-stepper-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-stepper-vertical, .mat-stepper-horizontal {\n    font-family: mat-font-family($config);\n  }\n\n  .mat-step-label {\n    font: {\n      size: mat-font-size($config, body-1);\n      weight: mat-font-weight($config, body-1);\n    };\n  }\n\n  .mat-step-sub-label-error {\n    font-weight: normal;\n  }\n\n  .mat-step-label-error {\n    font-size: mat-font-size($config, body-2);\n  }\n\n  .mat-step-label-selected {\n    font: {\n      size: mat-font-size($config, body-2);\n      weight: mat-font-weight($config, body-2);\n    };\n  }\n}\n\n@mixin mat-stepper-density($config-or-theme) {\n  $density-scale: mat-get-density-config($config-or-theme);\n  $height: mat-private-density-prop-value($mat-stepper-density-config, $density-scale, height);\n  $vertical-padding: ($height - $mat-stepper-label-header-height) / 2;\n\n  @include mat-private-density-legacy-compatibility() {\n    .mat-horizontal-stepper-header {\n      height: $height;\n    }\n\n    .mat-stepper-label-position-bottom .mat-horizontal-stepper-header,\n    .mat-vertical-stepper-header {\n      padding: $vertical-padding $mat-stepper-side-gap;\n    }\n\n    // Ensures that the vertical lines for the step content exceed into the step\n    // headers with a given distance (`$mat-stepper-line-gap`) to the step icon.\n    .mat-stepper-vertical-line::before {\n      top: $mat-stepper-line-gap - $vertical-padding;\n      bottom: $mat-stepper-line-gap - $vertical-padding;\n    }\n\n    // Ensures that the horizontal lines for the step header are centered vertically.\n    .mat-stepper-label-position-bottom .mat-horizontal-stepper-header {\n      &::after, &::before {\n        top: $vertical-padding + $mat-stepper-label-header-height / 2;\n      }\n    }\n\n    // Ensures that the horizontal line for the step content is aligned centered vertically.\n    .mat-stepper-label-position-bottom .mat-stepper-horizontal-line {\n      top: $vertical-padding + $mat-stepper-label-header-height / 2;\n    }\n  }\n}\n\n@mixin mat-stepper-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-stepper') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-stepper-color($color);\n    }\n    @if $density != null {\n      @include mat-stepper-density($density);\n    }\n    @if $typography != null {\n      @include mat-stepper-typography($typography);\n    }\n  }\n}\n\n\n\n@mixin mat-sort-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $background: map-get($config, background);\n  $foreground: map-get($config, foreground);\n\n  .mat-sort-header-arrow {\n    $table-background: mat-color($background, 'card');\n    $text-color: mat-color($foreground, secondary-text);\n\n    // Because the arrow is made up of multiple elements that are stacked on top of each other,\n    // we can't use the semi-transparent color from the theme directly. If the value is a color\n    // *type*, we convert it into a solid color by taking the opacity from the rgba value and\n    // using the value to determine the percentage of the background to put into foreground\n    // when mixing the colors together. Otherwise, if it resolves to something different\n    // (e.g. it resolves to a CSS variable), we use the color directly.\n    @if (type-of($table-background) == color and type-of($text-color) == color) {\n      $text-opacity: opacity($text-color);\n      color: mix($table-background, rgba($text-color, 1), (1 - $text-opacity) * 100%);\n    }\n    @else {\n      color: $text-color;\n    }\n  }\n}\n\n@mixin mat-sort-typography($config-or-theme) {}\n\n@mixin _mat-sort-density($config-or-theme) {}\n\n@mixin mat-sort-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-sort') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-sort-color($color);\n    }\n    @if $density != null {\n      @include _mat-sort-density($density);\n    }\n    @if $typography != null {\n      @include mat-sort-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n@mixin mat-tabs-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $primary: map-get($config, primary);\n  $accent: map-get($config, accent);\n  $warn: map-get($config, warn);\n  $background: map-get($config, background);\n  $foreground: map-get($config, foreground);\n  $header-border: 1px solid mat-color($foreground, divider);\n\n  .mat-tab-nav-bar,\n  .mat-tab-header {\n    border-bottom: $header-border;\n  }\n\n  .mat-tab-group-inverted-header {\n    .mat-tab-nav-bar,\n    .mat-tab-header {\n      border-top: $header-border;\n      border-bottom: none;\n    }\n  }\n\n  .mat-tab-label, .mat-tab-link {\n    color: mat-color($foreground, text);\n\n    &.mat-tab-disabled {\n      color: mat-color($foreground, disabled-text);\n    }\n  }\n\n  .mat-tab-header-pagination-chevron {\n    border-color: mat-color($foreground, text);\n  }\n\n  .mat-tab-header-pagination-disabled .mat-tab-header-pagination-chevron {\n    border-color: mat-color($foreground, disabled-text);\n  }\n\n  // Remove header border when there is a background color\n  .mat-tab-group[class*='mat-background-'] .mat-tab-header,\n  .mat-tab-nav-bar[class*='mat-background-'] {\n    border-bottom: none;\n    border-top: none;\n  }\n\n  .mat-tab-group, .mat-tab-nav-bar {\n    $theme-colors: (\n      primary: $primary,\n      accent: $accent,\n      warn: $warn\n    );\n\n    @each $name, $color in $theme-colors {\n      // Set the foreground color of the tabs\n      &.mat-#{$name} {\n        @include _mat-tab-label-focus($color);\n        @include _mat-ink-bar($color);\n\n        // Override ink bar when background color is the same\n        &.mat-background-#{$name} {\n          > .mat-tab-header, > .mat-tab-link-container {\n            @include _mat-ink-bar($color, default-contrast);\n          }\n        }\n      }\n    }\n\n    @each $name, $color in $theme-colors {\n      // Set background color of the tabs and override focus color\n      &.mat-background-#{$name} {\n        @include _mat-tab-label-focus($color);\n        @include _mat-tabs-background($color);\n      }\n    }\n  }\n}\n\n@mixin _mat-ink-bar($color, $hue: default) {\n  .mat-ink-bar {\n    background-color: mat-color($color, $hue);\n  }\n}\n\n@mixin _mat-tab-label-focus($tab-focus-color) {\n  .mat-tab-label,\n  .mat-tab-link {\n    &.cdk-keyboard-focused,\n    &.cdk-program-focused {\n      &:not(.mat-tab-disabled) {\n        background-color: mat-color($tab-focus-color, lighter, 0.3);\n      }\n    }\n  }\n}\n\n@mixin _mat-tabs-background($background-color) {\n  // Note that these selectors target direct descendants so\n  // that the styles don't apply to any nested tab groups.\n\n  // Set background color for the tab group\n  > .mat-tab-header, > .mat-tab-link-container, > .mat-tab-header-pagination {\n    background-color: mat-color($background-color);\n  }\n\n  // Set labels to contrast against background\n  > .mat-tab-header .mat-tab-label, > .mat-tab-link-container .mat-tab-link {\n    color: mat-color($background-color, default-contrast);\n\n    &.mat-tab-disabled {\n      color: mat-color($background-color, default-contrast, 0.4);\n    }\n  }\n\n  // Set pagination chevrons to contrast background\n  > .mat-tab-header-pagination .mat-tab-header-pagination-chevron,\n  > .mat-tab-links .mat-focus-indicator::before,\n  > .mat-tab-header .mat-focus-indicator::before {\n    border-color: mat-color($background-color, default-contrast);\n  }\n\n  > .mat-tab-header-pagination-disabled .mat-tab-header-pagination-chevron {\n    border-color: mat-color($background-color, default-contrast, 0.4);\n  }\n\n  // Set ripples color to be the contrast color of the new background. Otherwise the ripple\n  // color will be based on the app background color.\n  > .mat-tab-header .mat-ripple-element,\n  > .mat-tab-link-container .mat-ripple-element {\n    background-color: mat-color($background-color, default-contrast, 0.12);\n  }\n}\n\n@mixin mat-tabs-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-tab-group {\n    font-family: mat-font-family($config);\n  }\n\n  .mat-tab-label, .mat-tab-link {\n    font: {\n      family: mat-font-family($config, button);\n      size: mat-font-size($config, button);\n      weight: mat-font-weight($config, button);\n    }\n  }\n}\n\n@mixin _mat-tabs-density($config-or-theme) {}\n\n@mixin mat-tabs-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-tabs') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-tabs-color($color);\n    }\n    @if $density != null {\n      @include _mat-tabs-density($density);\n    }\n    @if $typography != null {\n      @include mat-tabs-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n\n// Minimum height for toolbar's in the highest density is difficult to determine because\n// developers can project arbitrary content. We use a minimum value that ensures that most\n// common content (e.g. icon buttons) does not exceed the row boundaries in highest density.\n$mat-toolbar-minimum-height: 44px !default;\n\n$mat-toolbar-height-desktop: 64px !default;\n$mat-toolbar-maximum-height-desktop: $mat-toolbar-height-desktop !default;\n$mat-toolbar-minimum-height-desktop: $mat-toolbar-minimum-height !default;\n\n$mat-toolbar-height-mobile: 56px !default;\n$mat-toolbar-maximum-height-mobile: $mat-toolbar-height-mobile !default;\n$mat-toolbar-minimum-height-mobile: $mat-toolbar-minimum-height !default;\n\n$mat-toolbar-desktop-density-config: (\n  height: (\n    default: $mat-toolbar-height-desktop,\n    maximum: $mat-toolbar-maximum-height-desktop,\n    minimum: $mat-toolbar-minimum-height-desktop,\n  )\n) !default;\n\n$mat-toolbar-mobile-density-config: (\n  height: (\n    default: $mat-toolbar-height-mobile,\n    maximum: $mat-toolbar-maximum-height-mobile,\n    minimum: $mat-toolbar-minimum-height-mobile,\n  )\n) !default;\n\n\n@mixin _mat-toolbar-height($height) {\n  .mat-toolbar-multiple-rows {\n    min-height: $height;\n  }\n  .mat-toolbar-row, .mat-toolbar-single-row {\n    height: $height;\n  }\n}\n\n@mixin _mat-toolbar-color($palette) {\n  background: mat-color($palette);\n  color: mat-color($palette, default-contrast);\n}\n\n@mixin _mat-toolbar-form-field-overrides {\n  .mat-form-field-underline,\n  .mat-form-field-ripple,\n  .mat-focused .mat-form-field-ripple {\n    background-color: currentColor;\n  }\n\n  .mat-form-field-label,\n  .mat-focused .mat-form-field-label,\n  .mat-select-value,\n  .mat-select-arrow,\n  .mat-form-field.mat-focused .mat-select-arrow {\n    color: inherit;\n  }\n\n  .mat-input-element {\n    caret-color: currentColor;\n  }\n}\n\n@mixin mat-toolbar-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $primary: map-get($config, primary);\n  $accent: map-get($config, accent);\n  $warn: map-get($config, warn);\n  $background: map-get($config, background);\n  $foreground: map-get($config, foreground);\n\n  .mat-toolbar {\n    background: mat-color($background, app-bar);\n    color: mat-color($foreground, text);\n\n    &.mat-primary {\n      @include _mat-toolbar-color($primary);\n    }\n\n    &.mat-accent {\n      @include _mat-toolbar-color($accent);\n    }\n\n    &.mat-warn {\n      @include _mat-toolbar-color($warn);\n    }\n\n    @include _mat-toolbar-form-field-overrides;\n  }\n}\n\n@mixin mat-toolbar-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-toolbar,\n  .mat-toolbar h1,\n  .mat-toolbar h2,\n  .mat-toolbar h3,\n  .mat-toolbar h4,\n  .mat-toolbar h5,\n  .mat-toolbar h6 {\n    @include mat-typography-level-to-styles($config, title);\n    margin: 0;\n  }\n}\n\n@mixin mat-toolbar-density($config-or-theme) {\n  $density-scale: mat-get-density-config($config-or-theme);\n  $height-desktop: mat-private-density-prop-value(\n      $mat-toolbar-desktop-density-config, $density-scale, height);\n  $height-mobile: mat-private-density-prop-value(\n      $mat-toolbar-mobile-density-config, $density-scale, height);\n\n  @include mat-private-density-legacy-compatibility() {\n    // Set the default height for the toolbar.\n    @include _mat-toolbar-height($height-desktop);\n\n    // As per specs, toolbars should have a different height in mobile devices. This has been\n    // specified in the old guidelines and is still observable in the new specifications by\n    // looking at the spec images. See: https://material.io/design/components/app-bars-top.html#anatomy\n    @media ($mat-xsmall) {\n      @include _mat-toolbar-height($height-mobile);\n    }\n  }\n}\n\n@mixin mat-toolbar-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-toolbar') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-toolbar-color($color);\n    }\n    @if $density != null {\n      @include mat-toolbar-density($density);\n    }\n    @if $typography != null {\n      @include mat-toolbar-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n$mat-tooltip-target-height: 22px;\n$mat-tooltip-font-size: 10px;\n$mat-tooltip-vertical-padding: ($mat-tooltip-target-height - $mat-tooltip-font-size) / 2;\n\n$mat-tooltip-handset-target-height: 30px;\n$mat-tooltip-handset-font-size: 14px;\n$mat-tooltip-handset-vertical-padding:\n    ($mat-tooltip-handset-target-height - $mat-tooltip-handset-font-size) / 2;\n\n@mixin mat-tooltip-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $background: map-get($config, background);\n\n  .mat-tooltip {\n    background: mat-color($background, tooltip, 0.9);\n  }\n}\n\n@mixin mat-tooltip-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-tooltip {\n    font-family: mat-font-family($config);\n    font-size: $mat-tooltip-font-size;\n    padding-top: $mat-tooltip-vertical-padding;\n    padding-bottom: $mat-tooltip-vertical-padding;\n  }\n\n  .mat-tooltip-handset {\n    font-size: $mat-tooltip-handset-font-size;\n    padding-top: $mat-tooltip-handset-vertical-padding;\n    padding-bottom: $mat-tooltip-handset-vertical-padding;\n  }\n}\n\n@mixin _mat-tooltip-density($config-or-theme) {}\n\n@mixin mat-tooltip-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-tooltip') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-tooltip-color($color);\n    }\n    @if $density != null {\n      @include _mat-tooltip-density($density);\n    }\n    @if $typography != null {\n      @include mat-tooltip-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n\n\n@mixin mat-snack-bar-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $is-dark-theme: map-get($config, is-dark);\n  $accent: map-get($config, accent);\n\n  .mat-snack-bar-container {\n    // Use the primary text on the dark theme, even though the lighter one uses\n    // a secondary, because the contrast on the light primary text is poor.\n    color: if($is-dark-theme, $dark-primary-text, $light-secondary-text);\n    background: if($is-dark-theme, map-get($mat-grey, 50), #323232);\n\n    @include mat-private-theme-elevation(6, $config);\n  }\n\n  .mat-simple-snackbar-action {\n    color: if($is-dark-theme, inherit, mat-color($accent, text));\n  }\n}\n\n@mixin mat-snack-bar-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-simple-snackbar {\n    font: {\n      family: mat-font-family($config, body-1);\n      size: mat-font-size($config, body-1);\n    }\n  }\n\n  .mat-simple-snackbar-action {\n    line-height: 1;\n    font: {\n      family: inherit;\n      size: inherit;\n      weight: mat-font-weight($config, button);\n    }\n  }\n}\n\n@mixin _mat-snack-bar-density($config-or-theme) {}\n\n@mixin mat-snack-bar-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-snack-bar') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-snack-bar-color($color);\n    }\n    @if $density != null {\n      @include _mat-snack-bar-density($density);\n    }\n    @if $typography != null {\n      @include mat-snack-bar-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Theme styles that only apply to the fill appearance of the form-field.\n\n@mixin mat-form-field-fill-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $foreground: map-get($config, foreground);\n  $is-dark-theme: map-get($config, is-dark);\n\n  $fill-background: mat-color($foreground, base, if($is-dark-theme, 0.1, 0.04));\n  $fill-disabled-background: mat-color($foreground, base, if($is-dark-theme, 0.05, 0.02));\n  $underline-color: mat-color($foreground, divider, if($is-dark-theme, 0.5, 0.42));\n  $label-disabled-color: mat-color($foreground, disabled-text);\n\n  .mat-form-field-appearance-fill {\n    .mat-form-field-flex {\n      background-color: $fill-background;\n    }\n\n    &.mat-form-field-disabled .mat-form-field-flex {\n      background-color: $fill-disabled-background;\n    }\n\n    .mat-form-field-underline::before {\n      background-color: $underline-color;\n    }\n\n    &.mat-form-field-disabled {\n      .mat-form-field-label {\n        color: $label-disabled-color;\n      }\n\n      .mat-form-field-underline::before {\n        background-color: transparent;\n      }\n    }\n  }\n}\n\n// Used to make instances of the _mat-form-field-label-floating mixin negligibly different,\n// and prevent Google's CSS Optimizer from collapsing the declarations. This is needed because some\n// of the selectors contain pseudo-classes not recognized in all browsers. If a browser encounters\n// an unknown pseudo-class it will discard the entire rule set.\n$mat-form-field-fill-dedupe: 0;\n\n// Applies a floating label above the form field control itself.\n@mixin _mat-form-field-fill-label-floating($font-scale, $infix-padding, $infix-margin-top) {\n  transform: translateY(-$infix-margin-top - $infix-padding + $mat-form-field-fill-dedupe)\n             scale($font-scale);\n  width: 100% / $font-scale + $mat-form-field-fill-dedupe;\n\n  $mat-form-field-fill-dedupe: $mat-form-field-fill-dedupe + 0.00001 !global;\n}\n\n@mixin mat-form-field-fill-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  // The unit-less line-height from the font config.\n  $line-height: mat-line-height($config, input);\n  // The amount to scale the font for the floating label and subscript.\n  $subscript-font-scale: 0.75;\n  // The padding on top of the infix.\n  $infix-padding-top: 0.25em;\n  // The padding below the infix.\n  $infix-padding-bottom: 0.75em;\n  // The margin applied to the form-field-infix to reserve space for the floating label.\n  $infix-margin-top: 1em * $line-height * $subscript-font-scale;\n  // The amount we offset the label from the input text in the fill appearance.\n  $fill-appearance-label-offset: -0.5em;\n\n  .mat-form-field-appearance-fill {\n    .mat-form-field-infix {\n      padding: $infix-padding-top 0 $infix-padding-bottom 0;\n    }\n\n    .mat-form-field-label {\n      top: $infix-margin-top + $infix-padding-top;\n      margin-top: $fill-appearance-label-offset;\n    }\n\n    &.mat-form-field-can-float {\n      &.mat-form-field-should-float .mat-form-field-label,\n      .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {\n        @include _mat-form-field-fill-label-floating(\n                $subscript-font-scale, $infix-padding-top + $fill-appearance-label-offset,\n                $infix-margin-top);\n      }\n\n      // Server-side rendered matInput with a label attribute but label not shown\n      // (used as a pure CSS stand-in for mat-form-field-should-float).\n      .mat-input-server[label]:not(:label-shown) + .mat-form-field-label-wrapper\n      .mat-form-field-label {\n        @include _mat-form-field-fill-label-floating(\n                $subscript-font-scale, $infix-padding-top + $fill-appearance-label-offset,\n                $infix-margin-top);\n      }\n    }\n  }\n}\n\n@mixin mat-private-form-field-fill-density($config-or-theme) {}\n\n@mixin mat-form-field-fill-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-form-field-fill') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-form-field-fill-color($color);\n    }\n    @if $density != null {\n      @include mat-private-form-field-fill-density($density);\n    }\n    @if $typography != null {\n      @include mat-form-field-fill-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n\n\n// Theme styles that only apply to the legacy appearance of the form-field.\n\n@mixin mat-form-field-legacy-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $foreground: map-get($config, foreground);\n  $is-dark-theme: map-get($config, is-dark);\n\n  $label-color: mat-color($foreground, secondary-text);\n  $underline-color: mat-color($foreground, divider, if($is-dark-theme, 0.7, 0.42));\n\n  .mat-form-field-appearance-legacy {\n    .mat-form-field-label {\n      color: $label-color;\n    }\n\n    .mat-hint {\n      color: $label-color;\n    }\n\n    .mat-form-field-underline {\n      background-color: $underline-color;\n    }\n\n    &.mat-form-field-disabled .mat-form-field-underline {\n      @include mat-private-control-disabled-underline($underline-color);\n    }\n  }\n}\n\n// Used to make instances of the _mat-form-field-label-floating mixin negligibly different,\n// and prevent Google's CSS Optimizer from collapsing the declarations. This is needed because some\n// of the selectors contain pseudo-classes not recognized in all browsers. If a browser encounters\n// an unknown pseudo-class it will discard the entire rule set.\n$mat-form-field-legacy-dedupe: 0;\n\n// Applies a floating label above the form field control itself.\n@mixin _mat-form-field-legacy-label-floating($font-scale, $infix-padding, $infix-margin-top) {\n  // We use perspective to fix the text blurriness as described here:\n  // http://www.useragentman.com/blog/2014/05/04/fixing-typography-inside-of-2-d-css-transforms/\n  // This results in a small jitter after the label floats on Firefox, which the\n  // translateZ fixes.\n  transform: translateY(-$infix-margin-top - $infix-padding) scale($font-scale) perspective(100px)\n  translateZ(0.001px + $mat-form-field-legacy-dedupe);\n  // The tricks above used to smooth out the animation on chrome and firefox actually make things\n  // worse on IE, so we don't include them in the IE version.\n  -ms-transform: translateY(-$infix-margin-top - $infix-padding + $mat-form-field-legacy-dedupe)\n                  scale($font-scale);\n\n  width: 100% / $font-scale + $mat-form-field-legacy-dedupe;\n\n  $mat-form-field-legacy-dedupe: $mat-form-field-legacy-dedupe + 0.00001 !global;\n}\n\n// Same as mixin above, but omits the translateZ for printing purposes.\n@mixin _mat-form-field-legacy-label-floating-print($font-scale, $infix-padding, $infix-margin-top) {\n  // This results in a small jitter after the label floats on Firefox, which the\n  // translateZ fixes.\n  transform: translateY(-$infix-margin-top - $infix-padding + $mat-form-field-legacy-dedupe)\n                  scale($font-scale);\n  // The tricks above used to smooth out the animation on chrome and firefox actually make things\n  // worse on IE, so we don't include them in the IE version.\n  $mat-form-field-legacy-dedupe: $mat-form-field-legacy-dedupe + 0.00001 !global;\n}\n\n@mixin mat-form-field-legacy-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  // The unit-less line-height from the font config.\n  $line-height: mat-line-height($config, input);\n  // The amount to scale the font for the floating label and subscript.\n  $subscript-font-scale: 0.75;\n  // The amount of space between the top of the line and the top of the actual text\n  // (as a fraction of the font-size).\n  $line-spacing: ($line-height - 1) / 2;\n  // The padding on the infix. Mocks show half of the text size, but seem to measure from the edge\n  // of the text itself, not the edge of the line; therefore we subtract off the line spacing.\n  $infix-padding: 0.5em - $line-spacing;\n  // The margin applied to the form-field-infix to reserve space for the floating label.\n  $infix-margin-top: 1em * $line-height * $subscript-font-scale;\n  // The space between the bottom of the .mat-form-field-flex area and the subscript wrapper.\n  // Mocks show half of the text size, but this margin is applied to an element with the subscript\n  // text font size, so we need to divide by the scale factor to make it half of the original text\n  // size. We again need to subtract off the line spacing since the mocks measure to the edge of the\n  // text, not the  edge of the line.\n  $subscript-margin-top: 0.5em / $subscript-font-scale - ($line-spacing * 2);\n  // The padding applied to the form-field-wrapper to reserve space for the subscript, since it's\n  // absolutely positioned. This is a combination of the subscript's margin and line-height, but we\n  // need to multiply by the subscript font scale factor since the wrapper has a larger font size.\n  $wrapper-padding-bottom: ($subscript-margin-top + $line-height) * $subscript-font-scale;\n\n  .mat-form-field-appearance-legacy {\n    .mat-form-field-wrapper {\n      padding-bottom: $wrapper-padding-bottom;\n    }\n\n    .mat-form-field-infix {\n      padding: $infix-padding 0;\n    }\n\n    &.mat-form-field-can-float {\n      &.mat-form-field-should-float .mat-form-field-label,\n      .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {\n        @include _mat-form-field-legacy-label-floating(\n                $subscript-font-scale, $infix-padding, $infix-margin-top);\n      }\n\n      // @breaking-change 8.0.0 will rely on AutofillMonitor instead.\n      .mat-form-field-autofill-control:-webkit-autofill + .mat-form-field-label-wrapper\n      .mat-form-field-label {\n        @include _mat-form-field-legacy-label-floating(\n                $subscript-font-scale, $infix-padding, $infix-margin-top);\n      }\n\n      // Server-side rendered matInput with a label attribute but label not shown\n      // (used as a pure CSS stand-in for mat-form-field-should-float).\n      .mat-input-server[label]:not(:label-shown) + .mat-form-field-label-wrapper\n      .mat-form-field-label {\n        @include _mat-form-field-legacy-label-floating(\n                $subscript-font-scale, $infix-padding, $infix-margin-top);\n      }\n    }\n\n    .mat-form-field-label {\n      top: $infix-margin-top + $infix-padding;\n    }\n\n    .mat-form-field-underline {\n      // We want the underline to start at the end of the content box, not the padding box,\n      // so we move it up by the padding amount.\n      bottom: $wrapper-padding-bottom;\n    }\n\n    .mat-form-field-subscript-wrapper {\n      margin-top: $subscript-margin-top;\n\n      // We want the subscript to start at the end of the content box, not the padding box,\n      // so we move it up by the padding amount (adjusted for the smaller font size);\n      top: calc(100% - #{$wrapper-padding-bottom / $subscript-font-scale});\n    }\n  }\n\n  // translateZ causes the label to not appear while printing, so we override it to not\n  // apply translateZ while printing\n  @media print {\n    .mat-form-field-appearance-legacy {\n      &.mat-form-field-can-float {\n        &.mat-form-field-should-float .mat-form-field-label,\n        .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {\n          @include _mat-form-field-legacy-label-floating-print(\n                  $subscript-font-scale, $infix-padding, $infix-margin-top);\n        }\n\n        // @breaking-change 8.0.0 will rely on AutofillMonitor instead.\n        .mat-form-field-autofill-control:-webkit-autofill + .mat-form-field-label-wrapper\n        .mat-form-field-label {\n          @include _mat-form-field-legacy-label-floating-print(\n                  $subscript-font-scale, $infix-padding, $infix-margin-top);\n        }\n\n        // Server-side rendered matInput with a label attribute but label not shown\n        // (used as a pure CSS stand-in for mat-form-field-should-float).\n        .mat-input-server[label]:not(:label-shown) + .mat-form-field-label-wrapper\n        .mat-form-field-label {\n          @include _mat-form-field-legacy-label-floating-print(\n                  $subscript-font-scale, $infix-padding, $infix-margin-top);\n        }\n      }\n    }\n  }\n}\n\n@mixin mat-private-form-field-legacy-density($config-or-theme) {}\n\n@mixin mat-form-field-legacy-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-form-field-legacy') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-form-field-legacy-color($color);\n    }\n    @if $density != null {\n      @include mat-private-form-field-legacy-density($density);\n    }\n    @if $typography != null {\n      @include mat-form-field-legacy-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n\n\n// Theme styles that only apply to the outline appearance of the form-field.\n\n@mixin mat-form-field-outline-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $primary: map-get($config, primary);\n  $accent: map-get($config, accent);\n  $warn: map-get($config, warn);\n  $foreground: map-get($config, foreground);\n  $is-dark-theme: map-get($config, is-dark);\n\n  $label-disabled-color: mat-color($foreground, disabled-text);\n  $outline-color: mat-color($foreground, divider, if($is-dark-theme, 0.3, 0.12));\n  $outline-color-hover: mat-color($foreground, divider, if($is-dark-theme, 1, 0.87));\n  $outline-color-primary: mat-color($primary);\n  $outline-color-accent: mat-color($accent);\n  $outline-color-warn: mat-color($warn);\n  $outline-color-disabled: mat-color($foreground, divider, if($is-dark-theme, 0.15, 0.06));\n\n  .mat-form-field-appearance-outline {\n    .mat-form-field-outline {\n      color: $outline-color;\n    }\n\n    .mat-form-field-outline-thick {\n      color: $outline-color-hover;\n    }\n\n    &.mat-focused {\n      .mat-form-field-outline-thick {\n        color: $outline-color-primary;\n      }\n\n      &.mat-accent .mat-form-field-outline-thick {\n        color: $outline-color-accent;\n      }\n\n      &.mat-warn .mat-form-field-outline-thick {\n        color: $outline-color-warn;\n      }\n    }\n\n    // Class repeated so that rule is specific enough to override focused accent color case.\n    &.mat-form-field-invalid.mat-form-field-invalid {\n      .mat-form-field-outline-thick {\n        color: $outline-color-warn;\n      }\n    }\n\n    &.mat-form-field-disabled {\n      .mat-form-field-label {\n        color: $label-disabled-color;\n      }\n\n      .mat-form-field-outline {\n        color: $outline-color-disabled;\n      }\n    }\n  }\n}\n\n// Used to make instances of the _mat-form-field-label-floating mixin negligibly different,\n// and prevent Google's CSS Optimizer from collapsing the declarations. This is needed because some\n// of the selectors contain pseudo-classes not recognized in all browsers. If a browser encounters\n// an unknown pseudo-class it will discard the entire rule set.\n$mat-form-field-outline-dedupe: 0;\n\n// Applies a floating label above the form field control itself.\n@mixin _mat-form-field-outline-label-floating($font-scale, $infix-padding, $infix-margin-top) {\n  transform: translateY(-$infix-margin-top - $infix-padding + $mat-form-field-outline-dedupe)\n  scale($font-scale);\n  width: 100% / $font-scale + $mat-form-field-outline-dedupe;\n\n  $mat-form-field-outline-dedupe: $mat-form-field-outline-dedupe + 0.00001 !global;\n}\n\n@mixin mat-form-field-outline-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  // The unit-less line-height from the font config.\n  $line-height: mat-line-height($config, input);\n  // The amount to scale the font for the floating label and subscript.\n  $subscript-font-scale: 0.75;\n  // The padding above and below the infix.\n  $infix-padding: 1em;\n  // The margin applied to the form-field-infix to reserve space for the floating label.\n  $infix-margin-top: 1em * $line-height * $subscript-font-scale;\n  // The space between the bottom of the .mat-form-field-flex area and the subscript wrapper.\n  // Mocks show half of the text size, but this margin is applied to an element with the subscript\n  // text font size, so we need to divide by the scale factor to make it half of the original text\n  // size.\n  $subscript-margin-top: 0.5em / $subscript-font-scale;\n  // The padding applied to the form-field-wrapper to reserve space for the subscript, since it's\n  // absolutely positioned. This is a combination of the subscript's margin and line-height, but we\n  // need to multiply by the subscript font scale factor since the wrapper has a larger font size.\n  $wrapper-padding-bottom: ($subscript-margin-top + $line-height) * $subscript-font-scale;\n  // The amount we offset the label from the input text in the outline appearance.\n  $outline-appearance-label-offset: -0.25em;\n\n  .mat-form-field-appearance-outline {\n    .mat-form-field-infix {\n      padding: $infix-padding 0 $infix-padding 0;\n    }\n\n    .mat-form-field-label {\n      top: $infix-margin-top + $infix-padding;\n      margin-top: $outline-appearance-label-offset;\n    }\n\n    &.mat-form-field-can-float {\n      &.mat-form-field-should-float .mat-form-field-label,\n      .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {\n        @include _mat-form-field-outline-label-floating(\n                $subscript-font-scale, $infix-padding + $outline-appearance-label-offset,\n                $infix-margin-top);\n      }\n\n      // Server-side rendered matInput with a label attribute but label not shown\n      // (used as a pure CSS stand-in for mat-form-field-should-float).\n      .mat-input-server[label]:not(:label-shown) + .mat-form-field-label-wrapper\n      .mat-form-field-label {\n        @include _mat-form-field-outline-label-floating(\n                $subscript-font-scale, $infix-padding + $outline-appearance-label-offset,\n                $infix-margin-top);\n      }\n    }\n  }\n}\n\n@mixin mat-private-form-field-outline-density($config-or-theme) {}\n\n@mixin mat-form-field-outline-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-form-field-outline') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-form-field-outline-color($color);\n    }\n    @if $density != null {\n      @include mat-private-form-field-outline-density($density);\n    }\n    @if $typography != null {\n      @include mat-form-field-outline-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n\n\n\n// Theme styles that only apply to the standard appearance of the form-field.\n\n@mixin mat-form-field-standard-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $foreground: map-get($config, foreground);\n  $is-dark-theme: map-get($config, is-dark);\n\n  $underline-color: mat-color($foreground, divider, if($is-dark-theme, 0.7, 0.42));\n\n  .mat-form-field-appearance-standard {\n    .mat-form-field-underline {\n      background-color: $underline-color;\n    }\n\n    &.mat-form-field-disabled .mat-form-field-underline {\n      @include mat-private-control-disabled-underline($underline-color);\n    }\n  }\n}\n\n@mixin mat-form-field-standard-typography($config-or-theme) {}\n\n@mixin mat-private-form-field-standard-density($config-or-theme) {}\n\n@mixin mat-form-field-standard-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-form-field-standard') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-form-field-standard-color($color);\n    }\n    @if $density != null {\n      @include mat-private-form-field-standard-density($density);\n    }\n    @if $typography != null {\n      @include mat-form-field-standard-typography($typography);\n    }\n  }\n}\n\n\n// Color styles that apply to all appearances of the form-field.\n@mixin mat-form-field-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $primary: map-get($config, primary);\n  $accent: map-get($config, accent);\n  $warn: map-get($config, warn);\n  $background: map-get($config, background);\n  $foreground: map-get($config, foreground);\n  $is-dark-theme: map-get($config, is-dark);\n\n  // Label colors. Required is used for the `*` star shown in the label.\n  $label-color: mat-color($foreground, secondary-text, if($is-dark-theme, 0.7, 0.6));\n  $focused-label-color: mat-color($primary, text);\n  $required-label-color: mat-color($accent, text);\n\n  // Underline colors.\n  $underline-color-base: mat-color($foreground, divider, if($is-dark-theme, 1, 0.87));\n  $underline-color-accent: mat-color($accent, text);\n  $underline-color-warn: mat-color($warn, text);\n  $underline-focused-color: mat-color($primary, text);\n\n  .mat-form-field-label {\n    color: $label-color;\n  }\n\n  .mat-hint {\n    color: $label-color;\n  }\n\n  .mat-form-field.mat-focused .mat-form-field-label {\n    color: $focused-label-color;\n\n    &.mat-accent {\n      color: $underline-color-accent;\n    }\n\n    &.mat-warn {\n      color: $underline-color-warn;\n    }\n  }\n\n  .mat-focused .mat-form-field-required-marker {\n    color: $required-label-color;\n  }\n\n  .mat-form-field-ripple {\n    background-color: $underline-color-base;\n  }\n\n  .mat-form-field.mat-focused {\n    .mat-form-field-ripple {\n      background-color: $underline-focused-color;\n\n      &.mat-accent {\n        background-color: $underline-color-accent;\n      }\n\n      &.mat-warn {\n        background-color: $underline-color-warn;\n      }\n    }\n  }\n\n  .mat-form-field-type-mat-native-select.mat-focused:not(.mat-form-field-invalid) {\n    .mat-form-field-infix::after {\n      color: $underline-focused-color;\n    }\n\n    &.mat-accent .mat-form-field-infix::after {\n      color: $underline-color-accent;\n    }\n\n    &.mat-warn .mat-form-field-infix::after {\n      color: $underline-color-warn;\n    }\n  }\n\n  // Styling for the error state of the form field. Note that while the same can be\n  // achieved with the ng-* classes, we use this approach in order to ensure that the same\n  // logic is used to style the error state and to show the error messages.\n  .mat-form-field.mat-form-field-invalid {\n    .mat-form-field-label {\n      color: $underline-color-warn;\n\n      &.mat-accent,\n      .mat-form-field-required-marker {\n        color: $underline-color-warn;\n      }\n    }\n\n    .mat-form-field-ripple,\n    .mat-form-field-ripple.mat-accent {\n      background-color: $underline-color-warn;\n    }\n  }\n\n  .mat-error {\n    color: $underline-color-warn;\n  }\n\n  @include mat-form-field-legacy-color($config);\n  @include mat-form-field-standard-color($config);\n  @include mat-form-field-fill-color($config);\n  @include mat-form-field-outline-color($config);\n}\n\n// Used to make instances of the _mat-form-field-label-floating mixin negligibly different,\n// and prevent Google's CSS Optimizer from collapsing the declarations. This is needed because some\n// of the selectors contain pseudo-classes not recognized in all browsers. If a browser encounters\n// an unknown pseudo-class it will discard the entire rule set.\n$mat-form-field-dedupe: 0;\n\n// Applies a floating label above the form field control itself.\n@mixin _mat-form-field-label-floating($font-scale, $infix-padding, $infix-margin-top) {\n  transform: translateY(-$infix-margin-top - $infix-padding + $mat-form-field-dedupe)\n             scale($font-scale);\n  width: 100% / $font-scale + $mat-form-field-dedupe;\n\n  $mat-form-field-dedupe: $mat-form-field-dedupe + 0.00001 !global;\n}\n\n@mixin mat-form-field-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  // The unit-less line-height from the font config.\n  $line-height: mat-line-height($config, input);\n\n  // The amount to scale the font for the floating label and subscript.\n  $subscript-font-scale: 0.75;\n  // The amount to scale the font for the prefix and suffix icons.\n  $prefix-suffix-icon-font-scale: 1.5;\n\n  // The padding on the infix. Mocks show half of the text size.\n  $infix-padding: 0.5em;\n  // The margin applied to the form-field-infix to reserve space for the floating label.\n  $infix-margin-top: 1em * $line-height * $subscript-font-scale;\n  // Font size to use for the label and subscript text.\n  $subscript-font-size: $subscript-font-scale * 100%;\n  // Font size to use for the for the prefix and suffix icons.\n  $prefix-suffix-icon-font-size: $prefix-suffix-icon-font-scale * 100%;\n  // The space between the bottom of the .mat-form-field-flex area and the subscript wrapper.\n  // Mocks show half of the text size, but this margin is applied to an element with the subscript\n  // text font size, so we need to divide by the scale factor to make it half of the original text\n  // size.\n  $subscript-margin-top: 0.5em / $subscript-font-scale;\n  // The padding applied to the form-field-wrapper to reserve space for the subscript, since it's\n  // absolutely positioned. This is a combination of the subscript's margin and line-height, but we\n  // need to multiply by the subscript font scale factor since the wrapper has a larger font size.\n  $wrapper-padding-bottom: ($subscript-margin-top + $line-height) * $subscript-font-scale;\n\n  .mat-form-field {\n    @include mat-typography-level-to-styles($config, input);\n  }\n\n  .mat-form-field-wrapper {\n    padding-bottom: $wrapper-padding-bottom;\n  }\n\n  .mat-form-field-prefix,\n  .mat-form-field-suffix {\n    // Allow icons in a prefix or suffix to adapt to the correct size.\n    .mat-icon {\n      font-size: $prefix-suffix-icon-font-size;\n      line-height: $line-height;\n    }\n\n    // Allow icon buttons in a prefix or suffix to adapt to the correct size.\n    .mat-icon-button {\n      height: $prefix-suffix-icon-font-scale * 1em;\n      width: $prefix-suffix-icon-font-scale * 1em;\n\n      .mat-icon {\n        height: $line-height * 1em;\n        line-height: $line-height;\n      }\n    }\n  }\n\n  .mat-form-field-infix {\n    padding: $infix-padding 0;\n    // Throws off the baseline if we do it as a real margin, so we do it as a border instead.\n    border-top: $infix-margin-top solid transparent;\n  }\n\n  .mat-form-field-can-float {\n    &.mat-form-field-should-float .mat-form-field-label,\n    .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {\n      @include _mat-form-field-label-floating(\n              $subscript-font-scale, $infix-padding, $infix-margin-top);\n    }\n\n    // Server-side rendered matInput with a label attribute but label not shown\n    // (used as a pure CSS stand-in for mat-form-field-should-float).\n    .mat-input-server[label]:not(:label-shown) + .mat-form-field-label-wrapper\n        .mat-form-field-label {\n      @include _mat-form-field-label-floating(\n              $subscript-font-scale, $infix-padding, $infix-margin-top);\n    }\n  }\n\n  .mat-form-field-label-wrapper {\n    top: -$infix-margin-top;\n    padding-top: $infix-margin-top;\n  }\n\n  .mat-form-field-label {\n    top: $infix-margin-top + $infix-padding;\n  }\n\n  .mat-form-field-underline {\n    // We want the underline to start at the end of the content box, not the padding box,\n    // so we move it up by the padding amount.\n    bottom: $wrapper-padding-bottom;\n  }\n\n  .mat-form-field-subscript-wrapper {\n    font-size: $subscript-font-size;\n    margin-top: $subscript-margin-top;\n\n    // We want the subscript to start at the end of the content box, not the padding box,\n    // so we move it up by the padding amount (adjusted for the smaller font size);\n    top: calc(100% - #{$wrapper-padding-bottom / $subscript-font-scale});\n  }\n\n  @include mat-form-field-legacy-typography($config);\n  @include mat-form-field-standard-typography($config);\n  @include mat-form-field-fill-typography($config);\n  @include mat-form-field-outline-typography($config);\n}\n\n@mixin mat-form-field-density($config-or-theme) {\n  $density-scale: mat-get-density-config($config-or-theme);\n  @include mat-private-form-field-legacy-density($density-scale);\n  @include mat-private-form-field-standard-density($density-scale);\n  @include mat-private-form-field-fill-density($density-scale);\n  @include mat-private-form-field-outline-density($density-scale);\n}\n\n@mixin mat-form-field-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-form-field') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-form-field-color($color);\n    }\n    @if $density != null {\n      @include mat-form-field-density($density);\n    }\n    @if $typography != null {\n      @include mat-form-field-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n$mat-tree-node-height: 48px !default;\n// Minimum height for tree nodes in highest density is difficult to determine as\n// developers can display arbitrary content. We use a minimum height which ensures\n// that common content placed in tree nodes does not exceed (e.g. icons, checkboxes).\n$mat-tree-node-minimum-height: 24px !default;\n$mat-tree-node-maximum-height: $mat-tree-node-height !default;\n\n$mat-tree-density-config: (\n  height: (\n    default: $mat-tree-node-height,\n    maximum: $mat-tree-node-maximum-height,\n    minimum: $mat-tree-node-minimum-height,\n  )\n) !default;\n\n\n@mixin mat-tree-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $background: map-get($config, background);\n  $foreground: map-get($config, foreground);\n\n  .mat-tree {\n    background: mat-color($background, 'card');\n  }\n\n  .mat-tree-node,\n  .mat-nested-tree-node {\n    color: mat-color($foreground, text);\n  }\n}\n\n@mixin mat-tree-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-tree {\n    font-family: mat-font-family($config);\n  }\n\n  .mat-tree-node,\n  .mat-nested-tree-node {\n    font-weight: mat-font-weight($config, body-1);\n    font-size: mat-font-size($config, body-1);\n  }\n}\n\n@mixin mat-tree-density($config-or-theme) {\n  $density-scale: mat-get-density-config($config-or-theme);\n  $height: mat-private-density-prop-value($mat-tree-density-config, $density-scale, height);\n\n  @include mat-private-density-legacy-compatibility() {\n    .mat-tree-node {\n      min-height: $height;\n    }\n  }\n}\n\n@mixin mat-tree-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-tree') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-tree-color($color);\n    }\n    @if $density != null {\n      @include mat-tree-density($density);\n    }\n    @if $typography != null {\n      @include mat-tree-typography($typography);\n    }\n  }\n}\n\n\n\n\n// Includes all of the typographic styles.\n@mixin angular-material-typography($config-or-theme: null) {\n  $config: if(mat-private-is-theme-object($config-or-theme),\n      mat-get-typography-config($config-or-theme), $config-or-theme);\n\n  // If no actual color configuration has been specified, create a default one.\n  @if not $config {\n    $config: mat-typography-config();\n  }\n\n  // TODO: COMP-309: Do not use individual mixins. Instead, use the all-theme mixin and only\n  // specify a `typography` config while setting `color` and `density` to `null`. This is currently\n  // not possible as it would introduce a circular dependency for typography because the `mat-core`\n  // mixin that is transitively loaded by the `all-theme` file, imports `all-typography` which\n  // would then load `all-theme` again. This ultimately results a circular dependency.\n\n  @include mat-badge-typography($config);\n  @include mat-base-typography($config);\n  @include mat-autocomplete-typography($config);\n  @include mat-bottom-sheet-typography($config);\n  @include mat-button-typography($config);\n  @include mat-button-toggle-typography($config);\n  @include mat-card-typography($config);\n  @include mat-checkbox-typography($config);\n  @include mat-chips-typography($config);\n  @include mat-divider-typography($config);\n  @include mat-table-typography($config);\n  @include mat-datepicker-typography($config);\n  @include mat-dialog-typography($config);\n  @include mat-expansion-panel-typography($config);\n  @include mat-form-field-typography($config);\n  @include mat-grid-list-typography($config);\n  @include mat-icon-typography($config);\n  @include mat-input-typography($config);\n  @include mat-menu-typography($config);\n  @include mat-paginator-typography($config);\n  @include mat-progress-bar-typography($config);\n  @include mat-progress-spinner-typography($config);\n  @include mat-radio-typography($config);\n  @include mat-select-typography($config);\n  @include mat-sidenav-typography($config);\n  @include mat-slide-toggle-typography($config);\n  @include mat-slider-typography($config);\n  @include mat-stepper-typography($config);\n  @include mat-sort-typography($config);\n  @include mat-tabs-typography($config);\n  @include mat-toolbar-typography($config);\n  @include mat-tooltip-typography($config);\n  @include mat-list-typography($config);\n  @include mat-option-typography($config);\n  @include mat-optgroup-typography($config);\n  @include mat-snack-bar-typography($config);\n  @include mat-tree-typography($config);\n}\n\n\n// Mixin that renders all of the core styles that are not theme-dependent.\n@mixin mat-core($typography-config: null) {\n  @include angular-material-typography($typography-config);\n  @include mat-ripple();\n  @include cdk-a11y();\n  @include cdk-overlay();\n  @include cdk-text-field();\n\n  @include mat-private-strong-focus-indicators-positioning();\n  @include _mat-mdc-core();\n}\n\n@mixin mat-core-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  // Wrapper element that provides the theme background when the user's content isn't\n  // inside of a `mat-sidenav-container`. Note that we need to exclude the ampersand\n  // selector in case the mixin is included at the top level.\n  .mat-app-background#{if(&, ', &.mat-app-background', '')} {\n    $background: map-get($config, background);\n    $foreground: map-get($config, foreground);\n\n    background-color: mat-color($background, background);\n    color: mat-color($foreground, text);\n  }\n\n  // Provides external CSS classes for each elevation value. Each CSS class is formatted as\n  // `mat-elevation-z$zValue` where `$zValue` corresponds to the z-space to which the element is\n  // elevated.\n  @for $zValue from 0 through 24 {\n    .#{$mat-elevation-prefix}#{$zValue} {\n      @include mat-private-theme-elevation($zValue, $config);\n    }\n  }\n\n  // Marker that is used to determine whether the user has added a theme to their page.\n  @at-root {\n    .mat-theme-loaded-marker {\n      display: none;\n    }\n  }\n}\n\n// Mixin that renders all of the core styles that depend on the theme.\n@mixin mat-core-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  // Wrap the sub-theme includes in the duplicate theme styles mixin. This ensures that\n  // there won't be multiple warnings. e.g. if `mat-core-theme` reports a warning, then\n  // the imported themes (such as `mat-ripple-theme`) should not report again.\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-core') {\n    @include mat-ripple-theme($theme);\n    @include mat-option-theme($theme);\n    @include mat-optgroup-theme($theme);\n    @include mat-pseudo-checkbox-theme($theme);\n\n    $color: mat-get-color-config($theme);\n    @if $color != null {\n      @include mat-core-color($color);\n    }\n  }\n}\n\n// Mixin that renders all of the core MDC styles. Private mixin included with `mat-core`.\n@mixin _mat-mdc-core() {\n  @include _mat-mdc-strong-focus-indicators-positioning();\n}\n\n// Mixin that ensures focus indicator host elements are positioned so that the focus indicator\n// pseudo element within is positioned relative to the host. Private mixin included within\n// `_mat-mdc-core`.\n@mixin _mat-mdc-strong-focus-indicators-positioning() {\n  .mat-mdc-focus-indicator {\n    position: relative;\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Create a theme.\n@mixin angular-material-theme($theme-or-color-config) {\n  $dedupe-key: 'angular-material-theme';\n  @include mat-private-check-duplicate-theme-styles($theme-or-color-config, $dedupe-key) {\n    @include mat-core-theme($theme-or-color-config);\n    @include mat-autocomplete-theme($theme-or-color-config);\n    @include mat-badge-theme($theme-or-color-config);\n    @include mat-bottom-sheet-theme($theme-or-color-config);\n    @include mat-button-theme($theme-or-color-config);\n    @include mat-button-toggle-theme($theme-or-color-config);\n    @include mat-card-theme($theme-or-color-config);\n    @include mat-checkbox-theme($theme-or-color-config);\n    @include mat-chips-theme($theme-or-color-config);\n    @include mat-table-theme($theme-or-color-config);\n    @include mat-datepicker-theme($theme-or-color-config);\n    @include mat-dialog-theme($theme-or-color-config);\n    @include mat-divider-theme($theme-or-color-config);\n    @include mat-expansion-panel-theme($theme-or-color-config);\n    @include mat-form-field-theme($theme-or-color-config);\n    @include mat-grid-list-theme($theme-or-color-config);\n    @include mat-icon-theme($theme-or-color-config);\n    @include mat-input-theme($theme-or-color-config);\n    @include mat-list-theme($theme-or-color-config);\n    @include mat-menu-theme($theme-or-color-config);\n    @include mat-paginator-theme($theme-or-color-config);\n    @include mat-progress-bar-theme($theme-or-color-config);\n    @include mat-progress-spinner-theme($theme-or-color-config);\n    @include mat-radio-theme($theme-or-color-config);\n    @include mat-select-theme($theme-or-color-config);\n    @include mat-sidenav-theme($theme-or-color-config);\n    @include mat-slide-toggle-theme($theme-or-color-config);\n    @include mat-slider-theme($theme-or-color-config);\n    @include mat-stepper-theme($theme-or-color-config);\n    @include mat-sort-theme($theme-or-color-config);\n    @include mat-tabs-theme($theme-or-color-config);\n    @include mat-toolbar-theme($theme-or-color-config);\n    @include mat-tooltip-theme($theme-or-color-config);\n    @include mat-tree-theme($theme-or-color-config);\n    @include mat-snack-bar-theme($theme-or-color-config);\n  }\n}\n\n\n\n// Includes all of the color styles.\n@mixin angular-material-color($config-or-theme) {\n  // In case a theme object has been passed instead of a configuration for\n  // the color system, extract the color config from the theme object.\n  $config: if(mat-private-is-theme-object($config-or-theme),\n      mat-get-color-config($config-or-theme), $config-or-theme);\n\n  @if $config == null {\n    @error 'No color configuration specified.';\n  }\n\n  @include angular-material-theme((\n    color: $config,\n    typography: null,\n    density: null,\n  ));\n}\n\n\n\n\n\n\n\n\n\n\n// Includes all of the density styles.\n@mixin angular-material-density($config-or-theme) {\n  // In case a theme object has been passed instead of a configuration for\n  // the density system, extract the density config from the theme object.\n  $config: if(mat-private-is-theme-object($config-or-theme),\n      mat-get-density-config($config-or-theme), $config-or-theme);\n\n  @if $config == null {\n    @error 'No density configuration specified.';\n  }\n\n  // TODO: COMP-309: Do not use individual mixins. Instead, use the all-theme mixin and only\n  // specify a `density` config while setting `color` and `typography` to `null`. This is currently\n  // not possible as it would introduce a circular dependency for density because the `mat-core`\n  // mixin that is transitively loaded by the `all-theme` file, imports `all-density` which\n  // would then load `all-theme` again. This ultimately results a circular dependency.\n\n  @include mat-expansion-panel-density($config);\n  @include mat-stepper-density($config);\n  @include mat-toolbar-density($config);\n  @include mat-tree-density($config);\n  @include mat-paginator-density($config);\n  @include mat-form-field-density($config);\n  @include mat-button-toggle-density($config);\n}\n\n\n\n","/**\r\n* Generated theme by Material Theme Generator\r\n* https://materialtheme.arcsine.dev\r\n* Fork at: https://materialtheme.arcsine.dev/?c=YHBhbGV0dGU$YHByaW1hcnk$YF48IzliOWI5YiIsIj9lcjwjZTFlMWUxIiwiO2VyPCM3ZjdmN2Z$LCIlPmBePCNmZmU4MDMiLCI~ZXI8I2ZmZjhiMyIsIjtlcjwjZmZkZTAyfiwid2Fybj5gXjwjZTcwNDEyIiwiP2VyPCNmOGI0YjgiLCI7ZXI8I2RkMDIwYX4sIj9UZXh0PCMwMDAwMDAiLCI~PTwjZmFmYWZhIiwiO1RleHQ8I2ZmZmZmZiIsIjs9PCMyYzJjMmN$LCJmb250cz5bYEA8KC00fixgQDwoLTN$LGBAPCgtMn4sYEA8KC0xfixgQDxoZWFkbGluZX4sYEA8dGl0bGV$LGBAPHN1YiktMn4sYEA8c3ViKS0xfixgQDxib2R5LTJ$LGBAPGJvZHktMX4sYEA8YnV0dG9ufixgQDxjYXB0aW9ufixgQDxpbnB1dCIsInNpemU$bnVsbH1dLCJpY29uczxGaWxsZWQiLCI~bmVzcz50cnVlLCJ2ZXJzaW9uPjExfQ==\r\n*/\r\n\r\n@import '~@angular/material/theming';\r\n\r\n// Include the common styles for Angular Material. We include this here so that you only\r\n// have to load a single css file for Angular Material in your app.\r\n\r\n// Fonts\r\n@import 'https://fonts.googleapis.com/icon?family=Material+Icons';\r\n@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500&display=swap');\r\n\r\n$fontConfig: (display-4: mat-typography-level(112px, 112px, 300, 'Roboto', -0.0134em),\r\n  display-3: mat-typography-level(56px, 56px, 400, 'Roboto', -0.0089em),\r\n  display-2: mat-typography-level(45px, 48px, 400, 'Roboto', 0.0000em),\r\n  display-1: mat-typography-level(34px, 40px, 400, 'Roboto', 0.0074em),\r\n  headline: mat-typography-level(24px, 32px, 400, 'Roboto', 0.0000em),\r\n  title: mat-typography-level(20px, 32px, 500, 'Roboto', 0.0075em),\r\n  subheading-2: mat-typography-level(16px, 28px, 400, 'Roboto', 0.0094em),\r\n  subheading-1: mat-typography-level(15px, 24px, 500, 'Roboto', 0.0067em),\r\n  body-2: mat-typography-level(14px, 24px, 500, 'Roboto', 0.0179em),\r\n  body-1: mat-typography-level(14px, 20px, 400, 'Roboto', 0.0179em),\r\n  button: mat-typography-level(14px, 14px, 500, 'Roboto', 0.0893em),\r\n  caption: mat-typography-level(12px, 20px, 400, 'Roboto', 0.0333em),\r\n  input: mat-typography-level(inherit, 1.125, 400, 'Roboto', 1.5px));\r\n\r\n// Foreground Elements\r\n\r\n// Light Theme Text\r\n$dark-text: #000000;\r\n$dark-primary-text: rgba($dark-text, 0.87);\r\n$dark-accent-text: rgba($dark-primary-text, 0.54);\r\n$dark-disabled-text: rgba($dark-primary-text, 0.38);\r\n$dark-dividers: rgba($dark-primary-text, 0.12);\r\n$dark-focused: rgba($dark-primary-text, 0.12);\r\n\r\n$mat-light-theme-foreground: (base: black,\r\n  divider: $dark-dividers,\r\n  dividers: $dark-dividers,\r\n  disabled: $dark-disabled-text,\r\n  disabled-button: rgba($dark-text, 0.26),\r\n  disabled-text: $dark-disabled-text,\r\n  elevation: black,\r\n  secondary-text: $dark-accent-text,\r\n  hint-text: $dark-disabled-text,\r\n  accent-text: $dark-accent-text,\r\n  icon: $dark-accent-text,\r\n  icons: $dark-accent-text,\r\n  text: $dark-primary-text,\r\n  slider-min: $dark-primary-text,\r\n  slider-off: rgba($dark-text, 0.26),\r\n  slider-off-active: $dark-disabled-text,\r\n);\r\n\r\n// Dark Theme text\r\n$light-text: #ffffff;\r\n$light-primary-text: $light-text;\r\n$light-accent-text: rgba($light-primary-text, 0.7);\r\n$light-disabled-text: rgba($light-primary-text, 0.5);\r\n$light-dividers: rgba($light-primary-text, 0.12);\r\n$light-focused: rgba($light-primary-text, 0.12);\r\n\r\n$mat-dark-theme-foreground: (base: $light-text,\r\n  divider: $light-dividers,\r\n  dividers: $light-dividers,\r\n  disabled: $light-disabled-text,\r\n  disabled-button: rgba($light-text, 0.3),\r\n  disabled-text: $light-disabled-text,\r\n  elevation: black,\r\n  hint-text: $light-disabled-text,\r\n  secondary-text: $light-accent-text,\r\n  accent-text: $light-accent-text,\r\n  icon: $light-text,\r\n  icons: $light-text,\r\n  text: $light-text,\r\n  slider-min: $light-text,\r\n  slider-off: rgba($light-text, 0.3),\r\n  slider-off-active: rgba($light-text, 0.3),\r\n);\r\n\r\n// Background config\r\n// Light bg\r\n$light-background: #fafafa;\r\n$light-bg-darker-5: darken($light-background, 5%);\r\n$light-bg-darker-10: darken($light-background, 10%);\r\n$light-bg-darker-20: darken($light-background, 20%);\r\n$light-bg-darker-30: darken($light-background, 30%);\r\n$light-bg-lighter-5: lighten($light-background, 5%);\r\n$dark-bg-tooltip: lighten(#2c2c2c, 20%);\r\n$dark-bg-alpha-4: rgba(#2c2c2c, 0.04);\r\n$dark-bg-alpha-12: rgba(#2c2c2c, 0.12);\r\n\r\n$mat-light-theme-background: (background: $light-background,\r\n  status-bar: $light-bg-darker-20,\r\n  app-bar: $light-bg-darker-5,\r\n  hover: $dark-bg-alpha-4,\r\n  card: $light-bg-lighter-5,\r\n  dialog: $light-bg-lighter-5,\r\n  tooltip: $dark-bg-tooltip,\r\n  disabled-button: $dark-bg-alpha-12,\r\n  raised-button: $light-bg-lighter-5,\r\n  focused-button: $dark-focused,\r\n  selected-button: $light-bg-darker-20,\r\n  selected-disabled-button: $light-bg-darker-30,\r\n  disabled-button-toggle: $light-bg-darker-10,\r\n  unselected-chip: $light-bg-darker-10,\r\n  disabled-list-option: $light-bg-darker-10,\r\n);\r\n\r\n// Dark bg\r\n$dark-background: #2c2c2c;\r\n$dark-bg-lighter-5: lighten($dark-background, 5%);\r\n$dark-bg-lighter-10: lighten($dark-background, 10%);\r\n$dark-bg-lighter-20: lighten($dark-background, 20%);\r\n$dark-bg-lighter-30: lighten($dark-background, 30%);\r\n$light-bg-alpha-4: rgba(#fafafa, 0.04);\r\n$light-bg-alpha-12: rgba(#fafafa, 0.12);\r\n\r\n// Background palette for dark themes.\r\n$mat-dark-theme-background: (background: $dark-background,\r\n  status-bar: $dark-bg-lighter-20,\r\n  app-bar: $dark-bg-lighter-5,\r\n  hover: $light-bg-alpha-4,\r\n  card: $dark-bg-lighter-5,\r\n  dialog: $dark-bg-lighter-5,\r\n  tooltip: $dark-bg-lighter-20,\r\n  disabled-button: $light-bg-alpha-12,\r\n  raised-button: $dark-bg-lighter-5,\r\n  focused-button: $light-focused,\r\n  selected-button: $dark-bg-lighter-20,\r\n  selected-disabled-button: $dark-bg-lighter-30,\r\n  disabled-button-toggle: $dark-bg-lighter-10,\r\n  unselected-chip: $dark-bg-lighter-20,\r\n  disabled-list-option: $dark-bg-lighter-10,\r\n);\r\n\r\n// Compute font config\r\n@include mat-core($fontConfig);\r\n\r\n// Theme Config\r\n\r\nbody {\r\n  --primary-color: #9b9b9b;\r\n  --primary-lighter-color: #e1e1e1;\r\n  --primary-darker-color: #7f7f7f;\r\n  --text-primary-color: #{$dark-primary-text};\r\n  --text-primary-lighter-color: #{$dark-primary-text};\r\n  --text-primary-darker-color: #{$light-primary-text};\r\n}\r\n\r\n$mat-primary: (main: #9b9b9b,\r\n  lighter: #e1e1e1,\r\n  darker: #7f7f7f,\r\n  200: #9b9b9b, // For slide toggle,\r\n  contrast : (main: $dark-primary-text,\r\n    lighter: $dark-primary-text,\r\n    darker: $light-primary-text,\r\n  ));\r\n$theme-primary: mat-palette($mat-primary, main, lighter, darker);\r\n\r\n\r\nbody {\r\n  --accent-color: #ffe803;\r\n  --accent-lighter-color: #fff8b3;\r\n  --accent-darker-color: #ffde02;\r\n  --text-accent-color: #{$dark-primary-text};\r\n  --text-accent-lighter-color: #{$dark-primary-text};\r\n  --text-accent-darker-color: #{$dark-primary-text};\r\n}\r\n\r\n$mat-accent: (main: #ffe803,\r\n  lighter: #fff8b3,\r\n  darker: #ffde02,\r\n  200: #ffe803, // For slide toggle,\r\n  contrast : (main: $dark-primary-text,\r\n    lighter: $dark-primary-text,\r\n    darker: $dark-primary-text,\r\n  ));\r\n$theme-accent: mat-palette($mat-accent, main, lighter, darker);\r\n\r\n\r\nbody {\r\n  --warn-color: #e70412;\r\n  --warn-lighter-color: #f8b4b8;\r\n  --warn-darker-color: #dd020a;\r\n  --text-warn-color: #{$light-primary-text};\r\n  --text-warn-lighter-color: #{$dark-primary-text};\r\n  --text-warn-darker-color: #{$light-primary-text};\r\n}\r\n\r\n$mat-warn: (main: #e70412,\r\n  lighter: #f8b4b8,\r\n  darker: #dd020a,\r\n  200: #e70412, // For slide toggle,\r\n  contrast : (main: $light-primary-text,\r\n    lighter: $dark-primary-text,\r\n    darker: $light-primary-text,\r\n  ));\r\n$theme-warn: mat-palette($mat-warn, main, lighter, darker);\r\n;\r\n\r\n$theme: mat-light-theme($theme-primary, $theme-accent, $theme-warn);\r\n$altTheme: mat-dark-theme($theme-primary, $theme-accent, $theme-warn);\r\n\r\n// Theme Init\r\n@include angular-material-theme($theme);\r\n\r\n.theme-alternate {\r\n  @include angular-material-theme($altTheme);\r\n}\r\n\r\n// Specific component overrides, pieces that are not in line with the general theming\r\n\r\n// Handle buttons appropriately, with respect to line-height\r\n.mat-raised-button,\r\n.mat-stroked-button,\r\n.mat-flat-button {\r\n  padding: 0 1.15em;\r\n  margin: 0 .65em;\r\n  min-width: 3em;\r\n  line-height: 36.4px\r\n}\r\n\r\n.mat-standard-chip {\r\n  padding: .5em .85em;\r\n  min-height: 2.5em;\r\n}\r\n\r\n.material-icons {\r\n  font-size: 24px;\r\n  font-family: 'Material Icons', 'Material Icons';\r\n\r\n  .mat-badge-content {\r\n    font-family: 'Roboto';\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}